
usart_advanced.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000002ec  00000380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000380  2**0
                  ALLOC
  3 .stab         00000b94  00000000  00000000  00000380  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d04  00000000  00000000  00000f14  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001c18  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000040  00000000  00000000  00001c30  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000017c  00000000  00000000  00001c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000028  00000000  00000000  00001dec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000000b6  00000000  00000000  00001e14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
#include "myUSART.h"




int main(){
  90:	cf 93       	push	r28
  92:	df 93       	push	r29
  94:	00 d0       	rcall	.+0      	; 0x96 <main+0x6>
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
	asm("sei");
  9a:	78 94       	sei
	USART_init(MYUBRR);
  9c:	87 e6       	ldi	r24, 0x67	; 103
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	0e 94 62 00 	call	0xc4	; 0xc4 <USART_init>
	unsigned int c = 50000;
  a4:	80 e5       	ldi	r24, 0x50	; 80
  a6:	93 ec       	ldi	r25, 0xC3	; 195
  a8:	9a 83       	std	Y+2, r25	; 0x02
  aa:	89 83       	std	Y+1, r24	; 0x01


	while(1){
		if(dataReceived){
  ac:	80 91 00 01 	lds	r24, 0x0100
  b0:	88 23       	and	r24, r24
  b2:	39 f0       	breq	.+14     	; 0xc2 <main+0x32>
			USART_Transmit_16_hex(c);
  b4:	89 81       	ldd	r24, Y+1	; 0x01
  b6:	9a 81       	ldd	r25, Y+2	; 0x02
  b8:	0e 94 9f 00 	call	0x13e	; 0x13e <USART_Transmit_16_hex>
//			for(char i = 0; i < 62; i++){
//				USART_Transmit_int_hex(c[i]);
//			}
			dataReceived = 0;
  bc:	10 92 00 01 	sts	0x0100, r1
		}
	}
  c0:	f5 cf       	rjmp	.-22     	; 0xac <main+0x1c>
  c2:	f4 cf       	rjmp	.-24     	; 0xac <main+0x1c>

000000c4 <USART_init>:
	else if(byte <= 0x0F){byte += 0x37;};	\
}



void USART_init(unsigned int br){
  c4:	cf 93       	push	r28
  c6:	df 93       	push	r29
  c8:	00 d0       	rcall	.+0      	; 0xca <USART_init+0x6>
  ca:	cd b7       	in	r28, 0x3d	; 61
  cc:	de b7       	in	r29, 0x3e	; 62
  ce:	9a 83       	std	Y+2, r25	; 0x02
  d0:	89 83       	std	Y+1, r24	; 0x01
	// Settin Baud Rate to br
	UBRR0H = (unsigned char) (br >> 8);
  d2:	85 ec       	ldi	r24, 0xC5	; 197
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	29 81       	ldd	r18, Y+1	; 0x01
  d8:	3a 81       	ldd	r19, Y+2	; 0x02
  da:	23 2f       	mov	r18, r19
  dc:	33 27       	eor	r19, r19
  de:	fc 01       	movw	r30, r24
  e0:	20 83       	st	Z, r18
	UBRR0L = (unsigned char) br;
  e2:	84 ec       	ldi	r24, 0xC4	; 196
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	29 81       	ldd	r18, Y+1	; 0x01
  e8:	fc 01       	movw	r30, r24
  ea:	20 83       	st	Z, r18

	// Enabling Receive (RXEN0) and transmit (TXEN0) and
	// the RX Complete Interrupt in the USART
	//Control and Status Register 0B
	UCSR0B = (1 << RXEN0) | ( 1 << TXEN0 ) | ( 1 << RXCIE0);
  ec:	81 ec       	ldi	r24, 0xC1	; 193
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	28 e9       	ldi	r18, 0x98	; 152
  f2:	fc 01       	movw	r30, r24
  f4:	20 83       	st	Z, r18

	// Setting frame format:
			// 2 stop bits		8 bit
	UCSR0C = (1 << USBS0) | (3 << UCSZ00);
  f6:	82 ec       	ldi	r24, 0xC2	; 194
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	2e e0       	ldi	r18, 0x0E	; 14
  fc:	fc 01       	movw	r30, r24
  fe:	20 83       	st	Z, r18
}
 100:	0f 90       	pop	r0
 102:	0f 90       	pop	r0
 104:	df 91       	pop	r29
 106:	cf 91       	pop	r28
 108:	08 95       	ret

0000010a <USART_Transmit>:


void USART_Transmit(unsigned char data){
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
 10e:	1f 92       	push	r1
 110:	cd b7       	in	r28, 0x3d	; 61
 112:	de b7       	in	r29, 0x3e	; 62
 114:	89 83       	std	Y+1, r24	; 0x01
	// While the transmit buffer is not empty (UDRE0 flag in UCSR0A)
	while( !(UCSR0A & (1 << UDRE0)) ){
 116:	00 00       	nop
 118:	80 ec       	ldi	r24, 0xC0	; 192
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	fc 01       	movw	r30, r24
 11e:	80 81       	ld	r24, Z
 120:	88 2f       	mov	r24, r24
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	80 72       	andi	r24, 0x20	; 32
 126:	99 27       	eor	r25, r25
 128:	00 97       	sbiw	r24, 0x00	; 0
 12a:	b1 f3       	breq	.-20     	; 0x118 <USART_Transmit+0xe>
		;
	}
	// Write the data into the USART Data I/O register
	UDR0 = data;
 12c:	86 ec       	ldi	r24, 0xC6	; 198
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	29 81       	ldd	r18, Y+1	; 0x01
 132:	fc 01       	movw	r30, r24
 134:	20 83       	st	Z, r18
}
 136:	0f 90       	pop	r0
 138:	df 91       	pop	r29
 13a:	cf 91       	pop	r28
 13c:	08 95       	ret

0000013e <USART_Transmit_16_hex>:

void USART_Transmit_16_hex(int data16bit){
 13e:	cf 93       	push	r28
 140:	df 93       	push	r29
 142:	00 d0       	rcall	.+0      	; 0x144 <USART_Transmit_16_hex+0x6>
 144:	00 d0       	rcall	.+0      	; 0x146 <USART_Transmit_16_hex+0x8>
 146:	00 d0       	rcall	.+0      	; 0x148 <USART_Transmit_16_hex+0xa>
 148:	cd b7       	in	r28, 0x3d	; 61
 14a:	de b7       	in	r29, 0x3e	; 62
 14c:	9e 83       	std	Y+6, r25	; 0x06
 14e:	8d 83       	std	Y+5, r24	; 0x05
	unsigned char LSN_1 = (data16bit & 0x000F);
 150:	8d 81       	ldd	r24, Y+5	; 0x05
 152:	8f 70       	andi	r24, 0x0F	; 15
 154:	89 83       	std	Y+1, r24	; 0x01
	unsigned char LSN_2 = ((data16bit >> 4 ) & 0x000F);
 156:	8d 81       	ldd	r24, Y+5	; 0x05
 158:	9e 81       	ldd	r25, Y+6	; 0x06
 15a:	95 95       	asr	r25
 15c:	87 95       	ror	r24
 15e:	95 95       	asr	r25
 160:	87 95       	ror	r24
 162:	95 95       	asr	r25
 164:	87 95       	ror	r24
 166:	95 95       	asr	r25
 168:	87 95       	ror	r24
 16a:	8f 70       	andi	r24, 0x0F	; 15
 16c:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char MSN_2 = ((data16bit >> 8 ) & 0x000F);
 16e:	8d 81       	ldd	r24, Y+5	; 0x05
 170:	9e 81       	ldd	r25, Y+6	; 0x06
 172:	89 2f       	mov	r24, r25
 174:	99 0f       	add	r25, r25
 176:	99 0b       	sbc	r25, r25
 178:	8f 70       	andi	r24, 0x0F	; 15
 17a:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char MSN_1 = ((data16bit >> 12 ) & 0x000F);
 17c:	8d 81       	ldd	r24, Y+5	; 0x05
 17e:	9e 81       	ldd	r25, Y+6	; 0x06
 180:	89 2f       	mov	r24, r25
 182:	99 27       	eor	r25, r25
 184:	82 95       	swap	r24
 186:	8f 70       	andi	r24, 0x0F	; 15
 188:	8c 83       	std	Y+4, r24	; 0x04

	convert2ASCII(LSN_1);
 18a:	89 81       	ldd	r24, Y+1	; 0x01
 18c:	8a 30       	cpi	r24, 0x0A	; 10
 18e:	20 f4       	brcc	.+8      	; 0x198 <USART_Transmit_16_hex+0x5a>
 190:	89 81       	ldd	r24, Y+1	; 0x01
 192:	80 5d       	subi	r24, 0xD0	; 208
 194:	89 83       	std	Y+1, r24	; 0x01
 196:	06 c0       	rjmp	.+12     	; 0x1a4 <USART_Transmit_16_hex+0x66>
 198:	89 81       	ldd	r24, Y+1	; 0x01
 19a:	80 31       	cpi	r24, 0x10	; 16
 19c:	18 f4       	brcc	.+6      	; 0x1a4 <USART_Transmit_16_hex+0x66>
 19e:	89 81       	ldd	r24, Y+1	; 0x01
 1a0:	89 5c       	subi	r24, 0xC9	; 201
 1a2:	89 83       	std	Y+1, r24	; 0x01
	convert2ASCII(LSN_2);
 1a4:	8a 81       	ldd	r24, Y+2	; 0x02
 1a6:	8a 30       	cpi	r24, 0x0A	; 10
 1a8:	20 f4       	brcc	.+8      	; 0x1b2 <USART_Transmit_16_hex+0x74>
 1aa:	8a 81       	ldd	r24, Y+2	; 0x02
 1ac:	80 5d       	subi	r24, 0xD0	; 208
 1ae:	8a 83       	std	Y+2, r24	; 0x02
 1b0:	06 c0       	rjmp	.+12     	; 0x1be <USART_Transmit_16_hex+0x80>
 1b2:	8a 81       	ldd	r24, Y+2	; 0x02
 1b4:	80 31       	cpi	r24, 0x10	; 16
 1b6:	18 f4       	brcc	.+6      	; 0x1be <USART_Transmit_16_hex+0x80>
 1b8:	8a 81       	ldd	r24, Y+2	; 0x02
 1ba:	89 5c       	subi	r24, 0xC9	; 201
 1bc:	8a 83       	std	Y+2, r24	; 0x02
	convert2ASCII(MSN_2);
 1be:	8b 81       	ldd	r24, Y+3	; 0x03
 1c0:	8a 30       	cpi	r24, 0x0A	; 10
 1c2:	20 f4       	brcc	.+8      	; 0x1cc <USART_Transmit_16_hex+0x8e>
 1c4:	8b 81       	ldd	r24, Y+3	; 0x03
 1c6:	80 5d       	subi	r24, 0xD0	; 208
 1c8:	8b 83       	std	Y+3, r24	; 0x03
 1ca:	06 c0       	rjmp	.+12     	; 0x1d8 <USART_Transmit_16_hex+0x9a>
 1cc:	8b 81       	ldd	r24, Y+3	; 0x03
 1ce:	80 31       	cpi	r24, 0x10	; 16
 1d0:	18 f4       	brcc	.+6      	; 0x1d8 <USART_Transmit_16_hex+0x9a>
 1d2:	8b 81       	ldd	r24, Y+3	; 0x03
 1d4:	89 5c       	subi	r24, 0xC9	; 201
 1d6:	8b 83       	std	Y+3, r24	; 0x03
	convert2ASCII(MSN_1);
 1d8:	8c 81       	ldd	r24, Y+4	; 0x04
 1da:	8a 30       	cpi	r24, 0x0A	; 10
 1dc:	20 f4       	brcc	.+8      	; 0x1e6 <USART_Transmit_16_hex+0xa8>
 1de:	8c 81       	ldd	r24, Y+4	; 0x04
 1e0:	80 5d       	subi	r24, 0xD0	; 208
 1e2:	8c 83       	std	Y+4, r24	; 0x04
 1e4:	06 c0       	rjmp	.+12     	; 0x1f2 <USART_Transmit_16_hex+0xb4>
 1e6:	8c 81       	ldd	r24, Y+4	; 0x04
 1e8:	80 31       	cpi	r24, 0x10	; 16
 1ea:	18 f4       	brcc	.+6      	; 0x1f2 <USART_Transmit_16_hex+0xb4>
 1ec:	8c 81       	ldd	r24, Y+4	; 0x04
 1ee:	89 5c       	subi	r24, 0xC9	; 201
 1f0:	8c 83       	std	Y+4, r24	; 0x04

	USART_Transmit('0');
 1f2:	80 e3       	ldi	r24, 0x30	; 48
 1f4:	0e 94 85 00 	call	0x10a	; 0x10a <USART_Transmit>
	USART_Transmit('x');
 1f8:	88 e7       	ldi	r24, 0x78	; 120
 1fa:	0e 94 85 00 	call	0x10a	; 0x10a <USART_Transmit>

	USART_Transmit(MSN_1);
 1fe:	8c 81       	ldd	r24, Y+4	; 0x04
 200:	0e 94 85 00 	call	0x10a	; 0x10a <USART_Transmit>
	USART_Transmit(MSN_2);
 204:	8b 81       	ldd	r24, Y+3	; 0x03
 206:	0e 94 85 00 	call	0x10a	; 0x10a <USART_Transmit>
	USART_Transmit(LSN_2);
 20a:	8a 81       	ldd	r24, Y+2	; 0x02
 20c:	0e 94 85 00 	call	0x10a	; 0x10a <USART_Transmit>
	USART_Transmit(LSN_1);
 210:	89 81       	ldd	r24, Y+1	; 0x01
 212:	0e 94 85 00 	call	0x10a	; 0x10a <USART_Transmit>
}
 216:	26 96       	adiw	r28, 0x06	; 6
 218:	0f b6       	in	r0, 0x3f	; 63
 21a:	f8 94       	cli
 21c:	de bf       	out	0x3e, r29	; 62
 21e:	0f be       	out	0x3f, r0	; 63
 220:	cd bf       	out	0x3d, r28	; 61
 222:	df 91       	pop	r29
 224:	cf 91       	pop	r28
 226:	08 95       	ret

00000228 <USART_Transmit_byte_hex>:



void USART_Transmit_byte_hex(unsigned char byte){
 228:	cf 93       	push	r28
 22a:	df 93       	push	r29
 22c:	00 d0       	rcall	.+0      	; 0x22e <USART_Transmit_byte_hex+0x6>
 22e:	1f 92       	push	r1
 230:	cd b7       	in	r28, 0x3d	; 61
 232:	de b7       	in	r29, 0x3e	; 62
 234:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char LSN = (byte & 0x0F);
 236:	8b 81       	ldd	r24, Y+3	; 0x03
 238:	8f 70       	andi	r24, 0x0F	; 15
 23a:	89 83       	std	Y+1, r24	; 0x01
	unsigned char MSN = ((byte >> 4) & 0x0F);
 23c:	8b 81       	ldd	r24, Y+3	; 0x03
 23e:	82 95       	swap	r24
 240:	8f 70       	andi	r24, 0x0F	; 15
 242:	8a 83       	std	Y+2, r24	; 0x02
	if(LSN <= 0x09){LSN += 0x30;}
 244:	89 81       	ldd	r24, Y+1	; 0x01
 246:	8a 30       	cpi	r24, 0x0A	; 10
 248:	20 f4       	brcc	.+8      	; 0x252 <USART_Transmit_byte_hex+0x2a>
 24a:	89 81       	ldd	r24, Y+1	; 0x01
 24c:	80 5d       	subi	r24, 0xD0	; 208
 24e:	89 83       	std	Y+1, r24	; 0x01
 250:	06 c0       	rjmp	.+12     	; 0x25e <USART_Transmit_byte_hex+0x36>
	else if(LSN <= 0x0F){LSN += 0x37;}
 252:	89 81       	ldd	r24, Y+1	; 0x01
 254:	80 31       	cpi	r24, 0x10	; 16
 256:	18 f4       	brcc	.+6      	; 0x25e <USART_Transmit_byte_hex+0x36>
 258:	89 81       	ldd	r24, Y+1	; 0x01
 25a:	89 5c       	subi	r24, 0xC9	; 201
 25c:	89 83       	std	Y+1, r24	; 0x01

	if(MSN <= 0x09){MSN += 0x30;}
 25e:	8a 81       	ldd	r24, Y+2	; 0x02
 260:	8a 30       	cpi	r24, 0x0A	; 10
 262:	20 f4       	brcc	.+8      	; 0x26c <USART_Transmit_byte_hex+0x44>
 264:	8a 81       	ldd	r24, Y+2	; 0x02
 266:	80 5d       	subi	r24, 0xD0	; 208
 268:	8a 83       	std	Y+2, r24	; 0x02
 26a:	06 c0       	rjmp	.+12     	; 0x278 <USART_Transmit_byte_hex+0x50>
	else if(MSN <= 0xA){MSN += 0x37;}
 26c:	8a 81       	ldd	r24, Y+2	; 0x02
 26e:	8b 30       	cpi	r24, 0x0B	; 11
 270:	18 f4       	brcc	.+6      	; 0x278 <USART_Transmit_byte_hex+0x50>
 272:	8a 81       	ldd	r24, Y+2	; 0x02
 274:	89 5c       	subi	r24, 0xC9	; 201
 276:	8a 83       	std	Y+2, r24	; 0x02

	USART_Transmit('0');
 278:	80 e3       	ldi	r24, 0x30	; 48
 27a:	0e 94 85 00 	call	0x10a	; 0x10a <USART_Transmit>
	USART_Transmit('x');
 27e:	88 e7       	ldi	r24, 0x78	; 120
 280:	0e 94 85 00 	call	0x10a	; 0x10a <USART_Transmit>
	USART_Transmit(MSN);
 284:	8a 81       	ldd	r24, Y+2	; 0x02
 286:	0e 94 85 00 	call	0x10a	; 0x10a <USART_Transmit>
	USART_Transmit(LSN);
 28a:	89 81       	ldd	r24, Y+1	; 0x01
 28c:	0e 94 85 00 	call	0x10a	; 0x10a <USART_Transmit>
	USART_Transmit(0x0A);
 290:	8a e0       	ldi	r24, 0x0A	; 10
 292:	0e 94 85 00 	call	0x10a	; 0x10a <USART_Transmit>
}
 296:	0f 90       	pop	r0
 298:	0f 90       	pop	r0
 29a:	0f 90       	pop	r0
 29c:	df 91       	pop	r29
 29e:	cf 91       	pop	r28
 2a0:	08 95       	ret

000002a2 <__vector_18>:


ISR(USART_RX_vect){
 2a2:	1f 92       	push	r1
 2a4:	0f 92       	push	r0
 2a6:	00 90 5f 00 	lds	r0, 0x005F
 2aa:	0f 92       	push	r0
 2ac:	11 24       	eor	r1, r1
 2ae:	8f 93       	push	r24
 2b0:	9f 93       	push	r25
 2b2:	ef 93       	push	r30
 2b4:	ff 93       	push	r31
 2b6:	cf 93       	push	r28
 2b8:	df 93       	push	r29
 2ba:	cd b7       	in	r28, 0x3d	; 61
 2bc:	de b7       	in	r29, 0x3e	; 62
	// dataReceived variable to allow the main function to know when new data is available
	dataReceived = 1;
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	80 93 00 01 	sts	0x0100, r24
	// Write the data from the USART I/O register to a buffer
	rxBuffer = UDR0;
 2c4:	86 ec       	ldi	r24, 0xC6	; 198
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	fc 01       	movw	r30, r24
 2ca:	80 81       	ld	r24, Z
 2cc:	80 93 01 01 	sts	0x0101, r24
}
 2d0:	df 91       	pop	r29
 2d2:	cf 91       	pop	r28
 2d4:	ff 91       	pop	r31
 2d6:	ef 91       	pop	r30
 2d8:	9f 91       	pop	r25
 2da:	8f 91       	pop	r24
 2dc:	0f 90       	pop	r0
 2de:	00 92 5f 00 	sts	0x005F, r0
 2e2:	0f 90       	pop	r0
 2e4:	1f 90       	pop	r1
 2e6:	18 95       	reti

000002e8 <_exit>:
 2e8:	f8 94       	cli

000002ea <__stop_program>:
 2ea:	ff cf       	rjmp	.-2      	; 0x2ea <__stop_program>
