
uart_echo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000018a  0000021e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000018a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000021e  2**0
                  ALLOC
  3 .stab         000008dc  00000000  00000000  00000220  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c5f  00000000  00000000  00000afc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000175b  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000040  00000000  00000000  00001770  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000017c  00000000  00000000  000017b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000028  00000000  00000000  0000192c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000000b6  00000000  00000000  00001954  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 a0 00 	jmp	0x140	; 0x140 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 c3 00 	jmp	0x186	; 0x186 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
#include <avr/io.h>
#include "myUSART.h"



int main(){
  90:	cf 93       	push	r28
  92:	df 93       	push	r29
  94:	1f 92       	push	r1
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
	USART_init(MYUBRR);
  9a:	87 e6       	ldi	r24, 0x67	; 103
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	0e 94 63 00 	call	0xc6	; 0xc6 <USART_init>
	asm("sei");
  a2:	78 94       	sei
	unsigned char data;
	while(1){
		data = rxBuffer;
  a4:	80 91 00 01 	lds	r24, 0x0100
  a8:	89 83       	std	Y+1, r24	; 0x01
		if(sendBack){
  aa:	80 91 01 01 	lds	r24, 0x0101
  ae:	88 23       	and	r24, r24
  b0:	49 f0       	breq	.+18     	; 0xc4 <main+0x34>
			data++;
  b2:	89 81       	ldd	r24, Y+1	; 0x01
  b4:	8f 5f       	subi	r24, 0xFF	; 255
  b6:	89 83       	std	Y+1, r24	; 0x01
			USART_Transmit(data);
  b8:	89 81       	ldd	r24, Y+1	; 0x01
  ba:	0e 94 86 00 	call	0x10c	; 0x10c <USART_Transmit>
			sendBack = 0;
  be:	10 92 01 01 	sts	0x0101, r1
		}

	}
  c2:	f0 cf       	rjmp	.-32     	; 0xa4 <main+0x14>
  c4:	ef cf       	rjmp	.-34     	; 0xa4 <main+0x14>

000000c6 <USART_init>:

#include "myUSART.h"
#include <avr/interrupt.h>


void USART_init(unsigned int br){
  c6:	cf 93       	push	r28
  c8:	df 93       	push	r29
  ca:	00 d0       	rcall	.+0      	; 0xcc <USART_init+0x6>
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
  d0:	9a 83       	std	Y+2, r25	; 0x02
  d2:	89 83       	std	Y+1, r24	; 0x01
	// Settin Baud Rate to br
	UBRR0H = (unsigned char) (br >> 8);
  d4:	85 ec       	ldi	r24, 0xC5	; 197
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	29 81       	ldd	r18, Y+1	; 0x01
  da:	3a 81       	ldd	r19, Y+2	; 0x02
  dc:	23 2f       	mov	r18, r19
  de:	33 27       	eor	r19, r19
  e0:	fc 01       	movw	r30, r24
  e2:	20 83       	st	Z, r18
	UBRR0L = (unsigned char) br;
  e4:	84 ec       	ldi	r24, 0xC4	; 196
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	29 81       	ldd	r18, Y+1	; 0x01
  ea:	fc 01       	movw	r30, r24
  ec:	20 83       	st	Z, r18

	// Enabling Recieve (RXEN0) and transmit (TXEN0) and
	// the RX Complete Interrupt in the USART
	//Control and Status Register 0B
	UCSR0B = (1 << RXEN0) | ( 1 << TXEN0 ) | ( 1 << RXCIE0);
  ee:	81 ec       	ldi	r24, 0xC1	; 193
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	28 e9       	ldi	r18, 0x98	; 152
  f4:	fc 01       	movw	r30, r24
  f6:	20 83       	st	Z, r18

	// Setting frame format:
			// 2 stop bits		8 bit
	UCSR0C = (1 << USBS0) | (3 << UCSZ00);
  f8:	82 ec       	ldi	r24, 0xC2	; 194
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	2e e0       	ldi	r18, 0x0E	; 14
  fe:	fc 01       	movw	r30, r24
 100:	20 83       	st	Z, r18
}
 102:	0f 90       	pop	r0
 104:	0f 90       	pop	r0
 106:	df 91       	pop	r29
 108:	cf 91       	pop	r28
 10a:	08 95       	ret

0000010c <USART_Transmit>:


void USART_Transmit(unsigned char data){
 10c:	cf 93       	push	r28
 10e:	df 93       	push	r29
 110:	1f 92       	push	r1
 112:	cd b7       	in	r28, 0x3d	; 61
 114:	de b7       	in	r29, 0x3e	; 62
 116:	89 83       	std	Y+1, r24	; 0x01
	while( !(UCSR0A & (1 << UDRE0)) ){
 118:	00 00       	nop
 11a:	80 ec       	ldi	r24, 0xC0	; 192
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	fc 01       	movw	r30, r24
 120:	80 81       	ld	r24, Z
 122:	88 2f       	mov	r24, r24
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	80 72       	andi	r24, 0x20	; 32
 128:	99 27       	eor	r25, r25
 12a:	00 97       	sbiw	r24, 0x00	; 0
 12c:	b1 f3       	breq	.-20     	; 0x11a <USART_Transmit+0xe>
		;
	}
	UDR0 = data;
 12e:	86 ec       	ldi	r24, 0xC6	; 198
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	29 81       	ldd	r18, Y+1	; 0x01
 134:	fc 01       	movw	r30, r24
 136:	20 83       	st	Z, r18
}
 138:	0f 90       	pop	r0
 13a:	df 91       	pop	r29
 13c:	cf 91       	pop	r28
 13e:	08 95       	ret

00000140 <__vector_18>:
	}
	return UDR0;
}
*/

ISR(USART_RX_vect){
 140:	1f 92       	push	r1
 142:	0f 92       	push	r0
 144:	00 90 5f 00 	lds	r0, 0x005F
 148:	0f 92       	push	r0
 14a:	11 24       	eor	r1, r1
 14c:	8f 93       	push	r24
 14e:	9f 93       	push	r25
 150:	ef 93       	push	r30
 152:	ff 93       	push	r31
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
 158:	cd b7       	in	r28, 0x3d	; 61
 15a:	de b7       	in	r29, 0x3e	; 62
	sendBack = 1;
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	80 93 01 01 	sts	0x0101, r24
	rxBuffer = UDR0;
 162:	86 ec       	ldi	r24, 0xC6	; 198
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	fc 01       	movw	r30, r24
 168:	80 81       	ld	r24, Z
 16a:	80 93 00 01 	sts	0x0100, r24
	//UDR0 = byteReceived;
}
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	ff 91       	pop	r31
 174:	ef 91       	pop	r30
 176:	9f 91       	pop	r25
 178:	8f 91       	pop	r24
 17a:	0f 90       	pop	r0
 17c:	00 92 5f 00 	sts	0x005F, r0
 180:	0f 90       	pop	r0
 182:	1f 90       	pop	r1
 184:	18 95       	reti

00000186 <_exit>:
 186:	f8 94       	cli

00000188 <__stop_program>:
 188:	ff cf       	rjmp	.-2      	; 0x188 <__stop_program>
