/*
 * spi_com.c
 *
 *  Created on: 20. feb. 2016
 *      Author: olafurjonthoroddsen
 */

#define DDR_SPI DDRB
#define SPI_MOSI DDB3
#define SPI_MISO DDB4
#define SPI_SCK DDB5
#define SPI_SS DDB2

#include "IMU_communication.h"
// including myUSART for debugging
#include "myUSART.h"

void SPI_MasterInit(void){
	// set MOSI, SCK and SS as output, all others are inputs.
	DDR_SPI = ( 1 << SPI_MOSI ) | ( 1 << SPI_SCK ) | ( 1 << SPI_SS );

	// SPI Control Register
	// SPE bit: SPI Enable
	// MSTR bit: Master select bit
	// SPR0 bit: Clock select bit, sets clock rate to Fosc/16
	SPCR = ( 1 << SPE ) | ( 1 << MSTR ) | ( 1 << SPR0 );
}

void SPI_MasterTransmit(char cData){
	// Start transmission
	// SPI Data Register, transfers data between register file and the SPI shift register
	SPDR = cData;

	// Wait for transmission to complete
	// SPI Status Register
	// SPIF bit: SPI Interrupt Flag, it is set when a serial transfer is complete
	while ( !( SPSR & ( 1 << SPIF ) ) ){};
}

void IMU_read_acc(char *accBuffer){
	// char sendingRequest[27] = "Now sending request to IMU\n";
	// char readingFromSPDR[18] = "Reading from SPDR\n";

	char *acc = accBuffer;

	// Select the IMU as an SPI Slave
	PORTB |= ( 1 << SPI_SS );
	// Send "read from acceleration output register" signal
	SPDR = 0b10101000;
	USART_Transmit('a');
	// Wait for the request to be sent
	while( !(SPSR & (1 << SPIF ) ) ){};

	for (unsigned char i = 0; i <= 6; i++){
			*acc = SPDR;
			acc++;
			//while( !(SPSR & (1 << SPIF ) ) ){};
	}
	PORTB &= ~( 1 << SPI_SS );

}
