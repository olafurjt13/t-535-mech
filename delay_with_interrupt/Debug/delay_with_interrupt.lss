
delay_with_interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000192  00000226  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000192  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000226  2**0
                  ALLOC
  3 .stab         000005f4  00000000  00000000  00000228  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c39  00000000  00000000  0000081c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001455  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000040  00000000  00000000  00001468  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000017c  00000000  00000000  000014a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000028  00000000  00000000  00001624  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000000b6  00000000  00000000  0000164c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 6b 00 	call	0xd6	; 0xd6 <main>
  88:	0c 94 c7 00 	jmp	0x18e	; 0x18e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <Delay>:
#include <avr/io.h>
#include <avr/interrupt.h>

volatile char cDelayDone = 0;

void Delay(char cDelay){
  90:	cf 93       	push	r28
  92:	df 93       	push	r29
  94:	1f 92       	push	r1
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	89 83       	std	Y+1, r24	; 0x01
	cDelayDone = 0;
  9c:	10 92 00 01 	sts	0x0100, r1
	OCR0A = cDelay;
  a0:	87 e4       	ldi	r24, 0x47	; 71
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	29 81       	ldd	r18, Y+1	; 0x01
  a6:	fc 01       	movw	r30, r24
  a8:	20 83       	st	Z, r18
	TCNT0 = 0;
  aa:	86 e4       	ldi	r24, 0x46	; 70
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	fc 01       	movw	r30, r24
  b0:	10 82       	st	Z, r1
	TIMSK0 = 0x02;
  b2:	8e e6       	ldi	r24, 0x6E	; 110
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	22 e0       	ldi	r18, 0x02	; 2
  b8:	fc 01       	movw	r30, r24
  ba:	20 83       	st	Z, r18
	while(cDelayDone == 0)
  bc:	00 00       	nop
  be:	80 91 00 01 	lds	r24, 0x0100
  c2:	88 23       	and	r24, r24
  c4:	e1 f3       	breq	.-8      	; 0xbe <Delay+0x2e>
		;
		TIMSK0 = 0;
  c6:	8e e6       	ldi	r24, 0x6E	; 110
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	fc 01       	movw	r30, r24
  cc:	10 82       	st	Z, r1
}
  ce:	0f 90       	pop	r0
  d0:	df 91       	pop	r29
  d2:	cf 91       	pop	r28
  d4:	08 95       	ret

000000d6 <main>:

int main(){
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
  da:	cd b7       	in	r28, 0x3d	; 61
  dc:	de b7       	in	r29, 0x3e	; 62
	DDRB = 0x20;
  de:	84 e2       	ldi	r24, 0x24	; 36
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	20 e2       	ldi	r18, 0x20	; 32
  e4:	fc 01       	movw	r30, r24
  e6:	20 83       	st	Z, r18
	OCR0A = 0xFF;
  e8:	87 e4       	ldi	r24, 0x47	; 71
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	2f ef       	ldi	r18, 0xFF	; 255
  ee:	fc 01       	movw	r30, r24
  f0:	20 83       	st	Z, r18
	TCCR0A = 0x00;
  f2:	84 e4       	ldi	r24, 0x44	; 68
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	fc 01       	movw	r30, r24
  f8:	10 82       	st	Z, r1
	TCCR0B = 0x05;
  fa:	85 e4       	ldi	r24, 0x45	; 69
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	25 e0       	ldi	r18, 0x05	; 5
 100:	fc 01       	movw	r30, r24
 102:	20 83       	st	Z, r18
	TIFR0 = 0x03;
 104:	85 e3       	ldi	r24, 0x35	; 53
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	23 e0       	ldi	r18, 0x03	; 3
 10a:	fc 01       	movw	r30, r24
 10c:	20 83       	st	Z, r18
	TIMSK0 = 0;
 10e:	8e e6       	ldi	r24, 0x6E	; 110
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	fc 01       	movw	r30, r24
 114:	10 82       	st	Z, r1
	TIFR0 = 0x03;
 116:	85 e3       	ldi	r24, 0x35	; 53
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	23 e0       	ldi	r18, 0x03	; 3
 11c:	fc 01       	movw	r30, r24
 11e:	20 83       	st	Z, r18

	sei();
 120:	78 94       	sei

	while(1){
		PORTB = 0x20;
 122:	85 e2       	ldi	r24, 0x25	; 37
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	20 e2       	ldi	r18, 0x20	; 32
 128:	fc 01       	movw	r30, r24
 12a:	20 83       	st	Z, r18
		Delay(15);
 12c:	8f e0       	ldi	r24, 0x0F	; 15
 12e:	0e 94 48 00 	call	0x90	; 0x90 <Delay>
		PORTB = 0;
 132:	85 e2       	ldi	r24, 0x25	; 37
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	fc 01       	movw	r30, r24
 138:	10 82       	st	Z, r1
	}
 13a:	f3 cf       	rjmp	.-26     	; 0x122 <main+0x4c>

0000013c <__vector_14>:
}

ISR (TIMER0_COMPA_vect){
 13c:	1f 92       	push	r1
 13e:	0f 92       	push	r0
 140:	00 90 5f 00 	lds	r0, 0x005F
 144:	0f 92       	push	r0
 146:	11 24       	eor	r1, r1
 148:	8f 93       	push	r24
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	cd b7       	in	r28, 0x3d	; 61
 150:	de b7       	in	r29, 0x3e	; 62
	cDelayDone = 1;
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	80 93 00 01 	sts	0x0100, r24
}
 158:	df 91       	pop	r29
 15a:	cf 91       	pop	r28
 15c:	8f 91       	pop	r24
 15e:	0f 90       	pop	r0
 160:	00 92 5f 00 	sts	0x005F, r0
 164:	0f 90       	pop	r0
 166:	1f 90       	pop	r1
 168:	18 95       	reti

0000016a <__vector_16>:

ISR (TIMER0_OVF_vect){
 16a:	1f 92       	push	r1
 16c:	0f 92       	push	r0
 16e:	00 90 5f 00 	lds	r0, 0x005F
 172:	0f 92       	push	r0
 174:	11 24       	eor	r1, r1
 176:	cf 93       	push	r28
 178:	df 93       	push	r29
 17a:	cd b7       	in	r28, 0x3d	; 61
 17c:	de b7       	in	r29, 0x3e	; 62

}
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	0f 90       	pop	r0
 184:	00 92 5f 00 	sts	0x005F, r0
 188:	0f 90       	pop	r0
 18a:	1f 90       	pop	r1
 18c:	18 95       	reti

0000018e <_exit>:
 18e:	f8 94       	cli

00000190 <__stop_program>:
 190:	ff cf       	rjmp	.-2      	; 0x190 <__stop_program>
