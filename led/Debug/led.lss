
led.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000001e0  00000274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000274  2**0
                  ALLOC
  3 .stab         00000bf4  00000000  00000000  00000274  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c68  00000000  00000000  00000e68  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001ad0  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000040  00000000  00000000  00001ae8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000017c  00000000  00000000  00001b28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000028  00000000  00000000  00001ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000000b6  00000000  00000000  00001ccc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 ac 00 	call	0x158	; 0x158 <main>
  88:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <Delay>:
#include "delay.h"
#include <avr/io.h>
#include <avr/interrupt.h>


void Delay(char cDelay){
  90:	cf 93       	push	r28
  92:	df 93       	push	r29
  94:	1f 92       	push	r1
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	89 83       	std	Y+1, r24	; 0x01
	cDelayDone = 0;
  9c:	10 92 00 01 	sts	0x0100, r1
	OCR0A=cDelay;
  a0:	87 e4       	ldi	r24, 0x47	; 71
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	29 81       	ldd	r18, Y+1	; 0x01
  a6:	fc 01       	movw	r30, r24
  a8:	20 83       	st	Z, r18
	TCNT0=0;
  aa:	86 e4       	ldi	r24, 0x46	; 70
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	fc 01       	movw	r30, r24
  b0:	10 82       	st	Z, r1
	TIMSK0=0x02;
  b2:	8e e6       	ldi	r24, 0x6E	; 110
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	22 e0       	ldi	r18, 0x02	; 2
  b8:	fc 01       	movw	r30, r24
  ba:	20 83       	st	Z, r18
	while(cDelayDone==0)
  bc:	00 00       	nop
  be:	80 91 00 01 	lds	r24, 0x0100
  c2:	88 23       	and	r24, r24
  c4:	e1 f3       	breq	.-8      	; 0xbe <Delay+0x2e>
		;
	TIMSK0=0;
  c6:	8e e6       	ldi	r24, 0x6E	; 110
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	fc 01       	movw	r30, r24
  cc:	10 82       	st	Z, r1
}
  ce:	0f 90       	pop	r0
  d0:	df 91       	pop	r29
  d2:	cf 91       	pop	r28
  d4:	08 95       	ret

000000d6 <LED_Init>:


#include "led.h"
#include <avr/io.h>

void LED_Init(){
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
  da:	cd b7       	in	r28, 0x3d	; 61
  dc:	de b7       	in	r29, 0x3e	; 62
	LEDDIR |= PIN_LED;	// make the pin an output
  de:	84 e2       	ldi	r24, 0x24	; 36
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	24 e2       	ldi	r18, 0x24	; 36
  e4:	30 e0       	ldi	r19, 0x00	; 0
  e6:	f9 01       	movw	r30, r18
  e8:	20 81       	ld	r18, Z
  ea:	20 62       	ori	r18, 0x20	; 32
  ec:	fc 01       	movw	r30, r24
  ee:	20 83       	st	Z, r18
}
  f0:	df 91       	pop	r29
  f2:	cf 91       	pop	r28
  f4:	08 95       	ret

000000f6 <LED_On>:

void LED_On(){
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  fa:	cd b7       	in	r28, 0x3d	; 61
  fc:	de b7       	in	r29, 0x3e	; 62
	LEDPORT |= PIN_LED;
  fe:	85 e2       	ldi	r24, 0x25	; 37
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	25 e2       	ldi	r18, 0x25	; 37
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	f9 01       	movw	r30, r18
 108:	20 81       	ld	r18, Z
 10a:	20 62       	ori	r18, 0x20	; 32
 10c:	fc 01       	movw	r30, r24
 10e:	20 83       	st	Z, r18
}
 110:	df 91       	pop	r29
 112:	cf 91       	pop	r28
 114:	08 95       	ret

00000116 <LED_Off>:

void LED_Off(){
 116:	cf 93       	push	r28
 118:	df 93       	push	r29
 11a:	cd b7       	in	r28, 0x3d	; 61
 11c:	de b7       	in	r29, 0x3e	; 62
	LEDPORT &= ~PIN_LED;
 11e:	85 e2       	ldi	r24, 0x25	; 37
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	25 e2       	ldi	r18, 0x25	; 37
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	f9 01       	movw	r30, r18
 128:	20 81       	ld	r18, Z
 12a:	2f 7d       	andi	r18, 0xDF	; 223
 12c:	fc 01       	movw	r30, r24
 12e:	20 83       	st	Z, r18
}
 130:	df 91       	pop	r29
 132:	cf 91       	pop	r28
 134:	08 95       	ret

00000136 <LED_Toggle>:

void LED_Toggle(){
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	cd b7       	in	r28, 0x3d	; 61
 13c:	de b7       	in	r29, 0x3e	; 62
	LEDPORT ^= PIN_LED;
 13e:	85 e2       	ldi	r24, 0x25	; 37
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	25 e2       	ldi	r18, 0x25	; 37
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	f9 01       	movw	r30, r18
 148:	30 81       	ld	r19, Z
 14a:	20 e2       	ldi	r18, 0x20	; 32
 14c:	23 27       	eor	r18, r19
 14e:	fc 01       	movw	r30, r24
 150:	20 83       	st	Z, r18
}
 152:	df 91       	pop	r29
 154:	cf 91       	pop	r28
 156:	08 95       	ret

00000158 <main>:
#include <avr/interrupt.h>
#include "led.h"
#include "delay.h"

int main()
{
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
 15c:	cd b7       	in	r28, 0x3d	; 61
 15e:	de b7       	in	r29, 0x3e	; 62
	OCR0A=0xFF;
 160:	87 e4       	ldi	r24, 0x47	; 71
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	2f ef       	ldi	r18, 0xFF	; 255
 166:	fc 01       	movw	r30, r24
 168:	20 83       	st	Z, r18
	TCCR0A=0x00;
 16a:	84 e4       	ldi	r24, 0x44	; 68
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	fc 01       	movw	r30, r24
 170:	10 82       	st	Z, r1
	TCCR0B=0x05;
 172:	85 e4       	ldi	r24, 0x45	; 69
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	25 e0       	ldi	r18, 0x05	; 5
 178:	fc 01       	movw	r30, r24
 17a:	20 83       	st	Z, r18
	TIFR0=0x03;
 17c:	85 e3       	ldi	r24, 0x35	; 53
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	23 e0       	ldi	r18, 0x03	; 3
 182:	fc 01       	movw	r30, r24
 184:	20 83       	st	Z, r18
	TIMSK0=0;
 186:	8e e6       	ldi	r24, 0x6E	; 110
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	fc 01       	movw	r30, r24
 18c:	10 82       	st	Z, r1
	TIFR0=0x03;
 18e:	85 e3       	ldi	r24, 0x35	; 53
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	23 e0       	ldi	r18, 0x03	; 3
 194:	fc 01       	movw	r30, r24
 196:	20 83       	st	Z, r18
	sei();
 198:	78 94       	sei

	LED_Init();
 19a:	0e 94 6b 00 	call	0xd6	; 0xd6 <LED_Init>
	LED_On();
 19e:	0e 94 7b 00 	call	0xf6	; 0xf6 <LED_On>
	while(1){
		LED_Toggle();
 1a2:	0e 94 9b 00 	call	0x136	; 0x136 <LED_Toggle>
		Delay(15);
 1a6:	8f e0       	ldi	r24, 0x0F	; 15
 1a8:	0e 94 48 00 	call	0x90	; 0x90 <Delay>
	}
 1ac:	fa cf       	rjmp	.-12     	; 0x1a2 <main+0x4a>

000001ae <__vector_14>:
}

ISR(TIMER0_COMPA_vect)
{
 1ae:	1f 92       	push	r1
 1b0:	0f 92       	push	r0
 1b2:	00 90 5f 00 	lds	r0, 0x005F
 1b6:	0f 92       	push	r0
 1b8:	11 24       	eor	r1, r1
 1ba:	8f 93       	push	r24
 1bc:	cf 93       	push	r28
 1be:	df 93       	push	r29
 1c0:	cd b7       	in	r28, 0x3d	; 61
 1c2:	de b7       	in	r29, 0x3e	; 62
	cDelayDone=1;
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	80 93 00 01 	sts	0x0100, r24
}
 1ca:	df 91       	pop	r29
 1cc:	cf 91       	pop	r28
 1ce:	8f 91       	pop	r24
 1d0:	0f 90       	pop	r0
 1d2:	00 92 5f 00 	sts	0x005F, r0
 1d6:	0f 90       	pop	r0
 1d8:	1f 90       	pop	r1
 1da:	18 95       	reti

000001dc <_exit>:
 1dc:	f8 94       	cli

000001de <__stop_program>:
 1de:	ff cf       	rjmp	.-2      	; 0x1de <__stop_program>
