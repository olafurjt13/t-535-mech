
imu_spi_com.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000078  00800100  0000281e  000028b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000281e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000091  00800178  00800178  0000292a  2**0
                  ALLOC
  3 .stab         00002cdc  00000000  00000000  0000292c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001793  00000000  00000000  00005608  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00006d9b  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000001a0  00000000  00000000  00006db0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000009a6  00000000  00000000  00006f50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000104  00000000  00000000  000078f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000535  00000000  00000000  000079fa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 9c 06 	jmp	0xd38	; 0xd38 <__vector_15>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 73 0e 	jmp	0x1ce6	; 0x1ce6 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ee e1       	ldi	r30, 0x1E	; 30
      7c:	f8 e2       	ldi	r31, 0x28	; 40
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a8 37       	cpi	r26, 0x78	; 120
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	22 e0       	ldi	r18, 0x02	; 2
      8c:	a8 e7       	ldi	r26, 0x78	; 120
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a9 30       	cpi	r26, 0x09	; 9
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 de 06 	call	0xdbc	; 0xdbc <main>
      9e:	0c 94 0d 14 	jmp	0x281a	; 0x281a <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <IMU_init>:

// Debounce counter variable
unsigned char debounceCounter = 0;


void IMU_init(){
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
      aa:	cd b7       	in	r28, 0x3d	; 61
      ac:	de b7       	in	r29, 0x3e	; 62
      ae:	6e 97       	sbiw	r28, 0x1e	; 30
      b0:	0f b6       	in	r0, 0x3f	; 63
      b2:	f8 94       	cli
      b4:	de bf       	out	0x3e, r29	; 62
      b6:	0f be       	out	0x3f, r0	; 63
      b8:	cd bf       	out	0x3d, r28	; 61

	//PCICR |= ( 1 << PCIE2 );
	// Enabling pin change interrupt on PD2
	//PCMSK2 |= ( 1 << PCINT18 );
	EICRA |= ( 1 << ISC01 );// | ( 1 << ISC00 );
      ba:	89 e6       	ldi	r24, 0x69	; 105
      bc:	90 e0       	ldi	r25, 0x00	; 0
      be:	29 e6       	ldi	r18, 0x69	; 105
      c0:	30 e0       	ldi	r19, 0x00	; 0
      c2:	f9 01       	movw	r30, r18
      c4:	20 81       	ld	r18, Z
      c6:	22 60       	ori	r18, 0x02	; 2
      c8:	fc 01       	movw	r30, r24
      ca:	20 83       	st	Z, r18
	EIMSK |= ( 1 << INT0 );
      cc:	8d e3       	ldi	r24, 0x3D	; 61
      ce:	90 e0       	ldi	r25, 0x00	; 0
      d0:	2d e3       	ldi	r18, 0x3D	; 61
      d2:	30 e0       	ldi	r19, 0x00	; 0
      d4:	f9 01       	movw	r30, r18
      d6:	20 81       	ld	r18, Z
      d8:	21 60       	ori	r18, 0x01	; 1
      da:	fc 01       	movw	r30, r24
      dc:	20 83       	st	Z, r18
	calibrationFlag = 0;
      de:	10 92 d9 01 	sts	0x01D9, r1

	SPI_MasterInit();
      e2:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <SPI_MasterInit>

	if (whoami() != 0x68){
      e6:	0e 94 79 06 	call	0xcf2	; 0xcf2 <whoami>
      ea:	88 36       	cpi	r24, 0x68	; 104
      ec:	99 f0       	breq	.+38     	; 0x114 <IMU_init+0x6e>
			unsigned char errStr[30] = "Error connecting to IMU!\0";
      ee:	2a e1       	ldi	r18, 0x1A	; 26
      f0:	e0 e1       	ldi	r30, 0x10	; 16
      f2:	f1 e0       	ldi	r31, 0x01	; 1
      f4:	ce 01       	movw	r24, r28
      f6:	01 96       	adiw	r24, 0x01	; 1
      f8:	dc 01       	movw	r26, r24
      fa:	01 90       	ld	r0, Z+
      fc:	0d 92       	st	X+, r0
      fe:	2a 95       	dec	r18
     100:	e1 f7       	brne	.-8      	; 0xfa <IMU_init+0x54>
     102:	1b 8e       	std	Y+27, r1	; 0x1b
     104:	1c 8e       	std	Y+28, r1	; 0x1c
     106:	1d 8e       	std	Y+29, r1	; 0x1d
     108:	1e 8e       	std	Y+30, r1	; 0x1e
			myPrint(errStr,10);
     10a:	6a e0       	ldi	r22, 0x0A	; 10
     10c:	ce 01       	movw	r24, r28
     10e:	01 96       	adiw	r24, 0x01	; 1
     110:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <myPrint>
	}
	accInit();
     114:	0e 94 b8 00 	call	0x170	; 0x170 <accInit>
	gyroInit();
     118:	0e 94 12 01 	call	0x224	; 0x224 <gyroInit>
	debounceTimerInit();
     11c:	0e 94 99 00 	call	0x132	; 0x132 <debounceTimerInit>
}
     120:	6e 96       	adiw	r28, 0x1e	; 30
     122:	0f b6       	in	r0, 0x3f	; 63
     124:	f8 94       	cli
     126:	de bf       	out	0x3e, r29	; 62
     128:	0f be       	out	0x3f, r0	; 63
     12a:	cd bf       	out	0x3d, r28	; 61
     12c:	df 91       	pop	r29
     12e:	cf 91       	pop	r28
     130:	08 95       	ret

00000132 <debounceTimerInit>:

void debounceTimerInit(){
     132:	cf 93       	push	r28
     134:	df 93       	push	r29
     136:	cd b7       	in	r28, 0x3d	; 61
     138:	de b7       	in	r29, 0x3e	; 62
	// Prescale the clock by 1/64
	TCCR0B =  ( 1 << CS01 ) | ( 1 << CS00) ;
     13a:	85 e4       	ldi	r24, 0x45	; 69
     13c:	90 e0       	ldi	r25, 0x00	; 0
     13e:	23 e0       	ldi	r18, 0x03	; 3
     140:	fc 01       	movw	r30, r24
     142:	20 83       	st	Z, r18
	// Initialize the counter at 0
	TCNT0 = 0;
     144:	86 e4       	ldi	r24, 0x46	; 70
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	fc 01       	movw	r30, r24
     14a:	10 82       	st	Z, r1
	// Enable Output Compare Match
	TIMSK0 = ( 1 << OCIE0B );
     14c:	8e e6       	ldi	r24, 0x6E	; 110
     14e:	90 e0       	ldi	r25, 0x00	; 0
     150:	24 e0       	ldi	r18, 0x04	; 4
     152:	fc 01       	movw	r30, r24
     154:	20 83       	st	Z, r18
	// Clearing interrupt flags (writing 1 to them => clearing)
	TIFR0 = ( 1 << OCF0B );
     156:	85 e3       	ldi	r24, 0x35	; 53
     158:	90 e0       	ldi	r25, 0x00	; 0
     15a:	24 e0       	ldi	r18, 0x04	; 4
     15c:	fc 01       	movw	r30, r24
     15e:	20 83       	st	Z, r18
	// Set the output compare to 250 => 1ms with 1/64th prescaling
	OCR0B = 250;
     160:	88 e4       	ldi	r24, 0x48	; 72
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	2a ef       	ldi	r18, 0xFA	; 250
     166:	fc 01       	movw	r30, r24
     168:	20 83       	st	Z, r18
}
     16a:	df 91       	pop	r29
     16c:	cf 91       	pop	r28
     16e:	08 95       	ret

00000170 <accInit>:

void accInit(){
     170:	cf 93       	push	r28
     172:	df 93       	push	r29
     174:	00 d0       	rcall	.+0      	; 0x176 <accInit+0x6>
     176:	1f 92       	push	r1
     178:	cd b7       	in	r28, 0x3d	; 61
     17a:	de b7       	in	r29, 0x3e	; 62
	// The bit pattern to turn on acceleration sensing in the Z,Y and X directions
	char setCtrlReg5 = ( 1 << ACC_Z ) | ( 1 << ACC_Y ) | ( 1 << ACC_X );
     17c:	88 e3       	ldi	r24, 0x38	; 56
     17e:	89 83       	std	Y+1, r24	; 0x01

	// Send write address
	SPI_Initiate_Transmission();
     180:	85 e2       	ldi	r24, 0x25	; 37
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	25 e2       	ldi	r18, 0x25	; 37
     186:	30 e0       	ldi	r19, 0x00	; 0
     188:	f9 01       	movw	r30, r18
     18a:	20 81       	ld	r18, Z
     18c:	2b 7f       	andi	r18, 0xFB	; 251
     18e:	fc 01       	movw	r30, r24
     190:	20 83       	st	Z, r18
	SPI_MasterTransmit( WRITE | CTRL_REG5_XL );
     192:	8f e1       	ldi	r24, 0x1F	; 31
     194:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <SPI_MasterTransmit>

	// Send ctrlReg5 bit pattern to turn on X,Y,Z acceleration sensors
	SPI_MasterTransmit( setCtrlReg5 );
     198:	89 81       	ldd	r24, Y+1	; 0x01
     19a:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <SPI_MasterTransmit>
	SPI_End_Transmission();
     19e:	85 e2       	ldi	r24, 0x25	; 37
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	25 e2       	ldi	r18, 0x25	; 37
     1a4:	30 e0       	ldi	r19, 0x00	; 0
     1a6:	f9 01       	movw	r30, r18
     1a8:	20 81       	ld	r18, Z
     1aa:	24 60       	ori	r18, 0x04	; 4
     1ac:	fc 01       	movw	r30, r24
     1ae:	20 83       	st	Z, r18


	char setCtrlReg8 = ( 1 << IF_ADD_INC );
     1b0:	84 e0       	ldi	r24, 0x04	; 4
     1b2:	8a 83       	std	Y+2, r24	; 0x02

	// Send write address
	SPI_Initiate_Transmission();
     1b4:	85 e2       	ldi	r24, 0x25	; 37
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	25 e2       	ldi	r18, 0x25	; 37
     1ba:	30 e0       	ldi	r19, 0x00	; 0
     1bc:	f9 01       	movw	r30, r18
     1be:	20 81       	ld	r18, Z
     1c0:	2b 7f       	andi	r18, 0xFB	; 251
     1c2:	fc 01       	movw	r30, r24
     1c4:	20 83       	st	Z, r18
		SPI_MasterTransmit( WRITE | CTRL_REG8 );
     1c6:	82 e2       	ldi	r24, 0x22	; 34
     1c8:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <SPI_MasterTransmit>
		// Send setCtrlReg8 bit pattern to turn auto increment registers on
		SPI_MasterTransmit( setCtrlReg8 );
     1cc:	8a 81       	ldd	r24, Y+2	; 0x02
     1ce:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <SPI_MasterTransmit>
	SPI_End_Transmission();
     1d2:	85 e2       	ldi	r24, 0x25	; 37
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	25 e2       	ldi	r18, 0x25	; 37
     1d8:	30 e0       	ldi	r19, 0x00	; 0
     1da:	f9 01       	movw	r30, r18
     1dc:	20 81       	ld	r18, Z
     1de:	24 60       	ori	r18, 0x04	; 4
     1e0:	fc 01       	movw	r30, r24
     1e2:	20 83       	st	Z, r18
	//unsigned char doneIMU[50] = "Finished initializing IMU\0";
	//myPrint(doneIMU,30);

	// Set output data rate to 952Hz
	char setCtrlReg6 = ( 1 << ODR_XL2 ) | ( 1 << ODR_XL1 );
     1e4:	80 ec       	ldi	r24, 0xC0	; 192
     1e6:	8b 83       	std	Y+3, r24	; 0x03

	SPI_Initiate_Transmission();
     1e8:	85 e2       	ldi	r24, 0x25	; 37
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	25 e2       	ldi	r18, 0x25	; 37
     1ee:	30 e0       	ldi	r19, 0x00	; 0
     1f0:	f9 01       	movw	r30, r18
     1f2:	20 81       	ld	r18, Z
     1f4:	2b 7f       	andi	r18, 0xFB	; 251
     1f6:	fc 01       	movw	r30, r24
     1f8:	20 83       	st	Z, r18
		SPI_MasterTransmit ( WRITE | CTRL_REG6_XL );
     1fa:	80 e2       	ldi	r24, 0x20	; 32
     1fc:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <SPI_MasterTransmit>
		SPI_MasterTransmit ( setCtrlReg6 );
     200:	8b 81       	ldd	r24, Y+3	; 0x03
     202:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <SPI_MasterTransmit>
	SPI_End_Transmission();
     206:	85 e2       	ldi	r24, 0x25	; 37
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	25 e2       	ldi	r18, 0x25	; 37
     20c:	30 e0       	ldi	r19, 0x00	; 0
     20e:	f9 01       	movw	r30, r18
     210:	20 81       	ld	r18, Z
     212:	24 60       	ori	r18, 0x04	; 4
     214:	fc 01       	movw	r30, r24
     216:	20 83       	st	Z, r18
}
     218:	0f 90       	pop	r0
     21a:	0f 90       	pop	r0
     21c:	0f 90       	pop	r0
     21e:	df 91       	pop	r29
     220:	cf 91       	pop	r28
     222:	08 95       	ret

00000224 <gyroInit>:


void gyroInit(){
     224:	cf 93       	push	r28
     226:	df 93       	push	r29
     228:	1f 92       	push	r1
     22a:	cd b7       	in	r28, 0x3d	; 61
     22c:	de b7       	in	r29, 0x3e	; 62
	// Set output data rate (ODR) to 952Hz, Full scale selection (FS) to 245dps and gyro bandwidth (BW) to 33Hz
	unsigned char setCtrlReg1 = ( 1 << ODR_G2 ) | ( 1 << ODR_G1 ) | ( 0 << FS_G1 ) | ( 0 << FS_G0 ) | ( 0 << BW_G1 ) | ( 0 << BW_G0);
     22e:	80 ec       	ldi	r24, 0xC0	; 192
     230:	89 83       	std	Y+1, r24	; 0x01

	SPI_Initiate_Transmission();
     232:	85 e2       	ldi	r24, 0x25	; 37
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	25 e2       	ldi	r18, 0x25	; 37
     238:	30 e0       	ldi	r19, 0x00	; 0
     23a:	f9 01       	movw	r30, r18
     23c:	20 81       	ld	r18, Z
     23e:	2b 7f       	andi	r18, 0xFB	; 251
     240:	fc 01       	movw	r30, r24
     242:	20 83       	st	Z, r18
		SPI_MasterTransmit ( WRITE | CTRL_REG1_G );
     244:	80 e1       	ldi	r24, 0x10	; 16
     246:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <SPI_MasterTransmit>
		SPI_MasterTransmit ( setCtrlReg1 );
     24a:	89 81       	ldd	r24, Y+1	; 0x01
     24c:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <SPI_MasterTransmit>
	SPI_End_Transmission();
     250:	85 e2       	ldi	r24, 0x25	; 37
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	25 e2       	ldi	r18, 0x25	; 37
     256:	30 e0       	ldi	r19, 0x00	; 0
     258:	f9 01       	movw	r30, r18
     25a:	20 81       	ld	r18, Z
     25c:	24 60       	ori	r18, 0x04	; 4
     25e:	fc 01       	movw	r30, r24
     260:	20 83       	st	Z, r18

}
     262:	0f 90       	pop	r0
     264:	df 91       	pop	r29
     266:	cf 91       	pop	r28
     268:	08 95       	ret

0000026a <calibrateIMU>:
/*
 * This function initializes calibration of the gyro and accelerometer
 * For this to work, the IMU must be completely stable
 */

void calibrateIMU(){
     26a:	cf 92       	push	r12
     26c:	df 92       	push	r13
     26e:	ef 92       	push	r14
     270:	ff 92       	push	r15
     272:	0f 93       	push	r16
     274:	1f 93       	push	r17
     276:	cf 93       	push	r28
     278:	df 93       	push	r29
     27a:	cd b7       	in	r28, 0x3d	; 61
     27c:	de b7       	in	r29, 0x3e	; 62
     27e:	e1 97       	sbiw	r28, 0x31	; 49
     280:	0f b6       	in	r0, 0x3f	; 63
     282:	f8 94       	cli
     284:	de bf       	out	0x3e, r29	; 62
     286:	0f be       	out	0x3f, r0	; 63
     288:	cd bf       	out	0x3d, r28	; 61
	int accBuffer[3];
	int gyroBuffer[3];

	// Using temporary long variables to reserve space, don't need long to store the resulting variable, only intermediately
	long accCalibration_TMP[3] = {0,0,0};
     28a:	1a 8a       	std	Y+18, r1	; 0x12
     28c:	1b 8a       	std	Y+19, r1	; 0x13
     28e:	1c 8a       	std	Y+20, r1	; 0x14
     290:	1d 8a       	std	Y+21, r1	; 0x15
     292:	1e 8a       	std	Y+22, r1	; 0x16
     294:	1f 8a       	std	Y+23, r1	; 0x17
     296:	18 8e       	std	Y+24, r1	; 0x18
     298:	19 8e       	std	Y+25, r1	; 0x19
     29a:	1a 8e       	std	Y+26, r1	; 0x1a
     29c:	1b 8e       	std	Y+27, r1	; 0x1b
     29e:	1c 8e       	std	Y+28, r1	; 0x1c
     2a0:	1d 8e       	std	Y+29, r1	; 0x1d
	long gyroCalibration_TMP[3] = {0,0,0};
     2a2:	1e 8e       	std	Y+30, r1	; 0x1e
     2a4:	1f 8e       	std	Y+31, r1	; 0x1f
     2a6:	18 a2       	std	Y+32, r1	; 0x20
     2a8:	19 a2       	std	Y+33, r1	; 0x21
     2aa:	1a a2       	std	Y+34, r1	; 0x22
     2ac:	1b a2       	std	Y+35, r1	; 0x23
     2ae:	1c a2       	std	Y+36, r1	; 0x24
     2b0:	1d a2       	std	Y+37, r1	; 0x25
     2b2:	1e a2       	std	Y+38, r1	; 0x26
     2b4:	1f a2       	std	Y+39, r1	; 0x27
     2b6:	18 a6       	std	Y+40, r1	; 0x28
     2b8:	19 a6       	std	Y+41, r1	; 0x29

	IMU_read_acc(accBuffer);
     2ba:	ce 01       	movw	r24, r28
     2bc:	06 96       	adiw	r24, 0x06	; 6
     2be:	0e 94 8d 05 	call	0xb1a	; 0xb1a <IMU_read_acc>
	IMU_read_gyro(gyroBuffer);
     2c2:	ce 01       	movw	r24, r28
     2c4:	0c 96       	adiw	r24, 0x0c	; 12
     2c6:	0e 94 03 06 	call	0xc06	; 0xc06 <IMU_read_gyro>
	for(unsigned char i = 0; i < 3; i++){
     2ca:	19 82       	std	Y+1, r1	; 0x01
     2cc:	35 c0       	rjmp	.+106    	; 0x338 <calibrateIMU+0xce>
		accCalibration[i] = accBuffer[i];
     2ce:	89 81       	ldd	r24, Y+1	; 0x01
     2d0:	88 2f       	mov	r24, r24
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	29 81       	ldd	r18, Y+1	; 0x01
     2d6:	22 2f       	mov	r18, r18
     2d8:	30 e0       	ldi	r19, 0x00	; 0
     2da:	22 0f       	add	r18, r18
     2dc:	33 1f       	adc	r19, r19
     2de:	ae 01       	movw	r20, r28
     2e0:	4f 5f       	subi	r20, 0xFF	; 255
     2e2:	5f 4f       	sbci	r21, 0xFF	; 255
     2e4:	24 0f       	add	r18, r20
     2e6:	35 1f       	adc	r19, r21
     2e8:	2b 5f       	subi	r18, 0xFB	; 251
     2ea:	3f 4f       	sbci	r19, 0xFF	; 255
     2ec:	f9 01       	movw	r30, r18
     2ee:	20 81       	ld	r18, Z
     2f0:	31 81       	ldd	r19, Z+1	; 0x01
     2f2:	88 0f       	add	r24, r24
     2f4:	99 1f       	adc	r25, r25
     2f6:	86 58       	subi	r24, 0x86	; 134
     2f8:	9e 4f       	sbci	r25, 0xFE	; 254
     2fa:	fc 01       	movw	r30, r24
     2fc:	31 83       	std	Z+1, r19	; 0x01
     2fe:	20 83       	st	Z, r18
		gyroCalibration[i] = gyroBuffer[i];
     300:	89 81       	ldd	r24, Y+1	; 0x01
     302:	88 2f       	mov	r24, r24
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	29 81       	ldd	r18, Y+1	; 0x01
     308:	22 2f       	mov	r18, r18
     30a:	30 e0       	ldi	r19, 0x00	; 0
     30c:	22 0f       	add	r18, r18
     30e:	33 1f       	adc	r19, r19
     310:	ae 01       	movw	r20, r28
     312:	4f 5f       	subi	r20, 0xFF	; 255
     314:	5f 4f       	sbci	r21, 0xFF	; 255
     316:	24 0f       	add	r18, r20
     318:	35 1f       	adc	r19, r21
     31a:	25 5f       	subi	r18, 0xF5	; 245
     31c:	3f 4f       	sbci	r19, 0xFF	; 255
     31e:	f9 01       	movw	r30, r18
     320:	20 81       	ld	r18, Z
     322:	31 81       	ldd	r19, Z+1	; 0x01
     324:	88 0f       	add	r24, r24
     326:	99 1f       	adc	r25, r25
     328:	80 58       	subi	r24, 0x80	; 128
     32a:	9e 4f       	sbci	r25, 0xFE	; 254
     32c:	fc 01       	movw	r30, r24
     32e:	31 83       	std	Z+1, r19	; 0x01
     330:	20 83       	st	Z, r18
	long accCalibration_TMP[3] = {0,0,0};
	long gyroCalibration_TMP[3] = {0,0,0};

	IMU_read_acc(accBuffer);
	IMU_read_gyro(gyroBuffer);
	for(unsigned char i = 0; i < 3; i++){
     332:	89 81       	ldd	r24, Y+1	; 0x01
     334:	8f 5f       	subi	r24, 0xFF	; 255
     336:	89 83       	std	Y+1, r24	; 0x01
     338:	89 81       	ldd	r24, Y+1	; 0x01
     33a:	83 30       	cpi	r24, 0x03	; 3
     33c:	40 f2       	brcs	.-112    	; 0x2ce <calibrateIMU+0x64>
		accCalibration[i] = accBuffer[i];
		gyroCalibration[i] = gyroBuffer[i];
	}

	for (unsigned int i = 0; i < 1000; i++){
     33e:	1b 82       	std	Y+3, r1	; 0x03
     340:	1a 82       	std	Y+2, r1	; 0x02
     342:	c2 c0       	rjmp	.+388    	; 0x4c8 <calibrateIMU+0x25e>
		IMU_read_acc(accBuffer);
     344:	ce 01       	movw	r24, r28
     346:	06 96       	adiw	r24, 0x06	; 6
     348:	0e 94 8d 05 	call	0xb1a	; 0xb1a <IMU_read_acc>
		IMU_read_gyro(gyroBuffer);
     34c:	ce 01       	movw	r24, r28
     34e:	0c 96       	adiw	r24, 0x0c	; 12
     350:	0e 94 03 06 	call	0xc06	; 0xc06 <IMU_read_gyro>
		for(unsigned char j = 0; j < 3; j++){
     354:	1c 82       	std	Y+4, r1	; 0x04
     356:	af c0       	rjmp	.+350    	; 0x4b6 <calibrateIMU+0x24c>
			accCalibration_TMP[j] = (accBuffer[j] + (i+1)*accCalibration_TMP[j])/(i+2);
     358:	8c 81       	ldd	r24, Y+4	; 0x04
     35a:	c8 2e       	mov	r12, r24
     35c:	d1 2c       	mov	r13, r1
     35e:	8c 81       	ldd	r24, Y+4	; 0x04
     360:	88 2f       	mov	r24, r24
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	88 0f       	add	r24, r24
     366:	99 1f       	adc	r25, r25
     368:	9e 01       	movw	r18, r28
     36a:	2f 5f       	subi	r18, 0xFF	; 255
     36c:	3f 4f       	sbci	r19, 0xFF	; 255
     36e:	82 0f       	add	r24, r18
     370:	93 1f       	adc	r25, r19
     372:	05 96       	adiw	r24, 0x05	; 5
     374:	fc 01       	movw	r30, r24
     376:	80 81       	ld	r24, Z
     378:	91 81       	ldd	r25, Z+1	; 0x01
     37a:	7c 01       	movw	r14, r24
     37c:	00 27       	eor	r16, r16
     37e:	f7 fc       	sbrc	r15, 7
     380:	00 95       	com	r16
     382:	10 2f       	mov	r17, r16
     384:	8a 81       	ldd	r24, Y+2	; 0x02
     386:	9b 81       	ldd	r25, Y+3	; 0x03
     388:	01 96       	adiw	r24, 0x01	; 1
     38a:	9c 01       	movw	r18, r24
     38c:	40 e0       	ldi	r20, 0x00	; 0
     38e:	50 e0       	ldi	r21, 0x00	; 0
     390:	8c 81       	ldd	r24, Y+4	; 0x04
     392:	88 2f       	mov	r24, r24
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	88 0f       	add	r24, r24
     398:	99 1f       	adc	r25, r25
     39a:	88 0f       	add	r24, r24
     39c:	99 1f       	adc	r25, r25
     39e:	be 01       	movw	r22, r28
     3a0:	6f 5f       	subi	r22, 0xFF	; 255
     3a2:	7f 4f       	sbci	r23, 0xFF	; 255
     3a4:	86 0f       	add	r24, r22
     3a6:	97 1f       	adc	r25, r23
     3a8:	41 96       	adiw	r24, 0x11	; 17
     3aa:	fc 01       	movw	r30, r24
     3ac:	80 81       	ld	r24, Z
     3ae:	91 81       	ldd	r25, Z+1	; 0x01
     3b0:	a2 81       	ldd	r26, Z+2	; 0x02
     3b2:	b3 81       	ldd	r27, Z+3	; 0x03
     3b4:	bc 01       	movw	r22, r24
     3b6:	cd 01       	movw	r24, r26
     3b8:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <__mulsi3>
     3bc:	dc 01       	movw	r26, r24
     3be:	cb 01       	movw	r24, r22
     3c0:	8e 0d       	add	r24, r14
     3c2:	9f 1d       	adc	r25, r15
     3c4:	a0 1f       	adc	r26, r16
     3c6:	b1 1f       	adc	r27, r17
     3c8:	2a 81       	ldd	r18, Y+2	; 0x02
     3ca:	3b 81       	ldd	r19, Y+3	; 0x03
     3cc:	2e 5f       	subi	r18, 0xFE	; 254
     3ce:	3f 4f       	sbci	r19, 0xFF	; 255
     3d0:	99 01       	movw	r18, r18
     3d2:	40 e0       	ldi	r20, 0x00	; 0
     3d4:	50 e0       	ldi	r21, 0x00	; 0
     3d6:	bc 01       	movw	r22, r24
     3d8:	cd 01       	movw	r24, r26
     3da:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <__divmodsi4>
     3de:	da 01       	movw	r26, r20
     3e0:	c9 01       	movw	r24, r18
     3e2:	96 01       	movw	r18, r12
     3e4:	22 0f       	add	r18, r18
     3e6:	33 1f       	adc	r19, r19
     3e8:	22 0f       	add	r18, r18
     3ea:	33 1f       	adc	r19, r19
     3ec:	ae 01       	movw	r20, r28
     3ee:	4f 5f       	subi	r20, 0xFF	; 255
     3f0:	5f 4f       	sbci	r21, 0xFF	; 255
     3f2:	24 0f       	add	r18, r20
     3f4:	35 1f       	adc	r19, r21
     3f6:	2f 5e       	subi	r18, 0xEF	; 239
     3f8:	3f 4f       	sbci	r19, 0xFF	; 255
     3fa:	f9 01       	movw	r30, r18
     3fc:	80 83       	st	Z, r24
     3fe:	91 83       	std	Z+1, r25	; 0x01
     400:	a2 83       	std	Z+2, r26	; 0x02
     402:	b3 83       	std	Z+3, r27	; 0x03
			gyroCalibration_TMP[j] = (gyroBuffer[j] + (i+1)*gyroCalibration_TMP[j])/(i+2);
     404:	8c 81       	ldd	r24, Y+4	; 0x04
     406:	c8 2e       	mov	r12, r24
     408:	d1 2c       	mov	r13, r1
     40a:	8c 81       	ldd	r24, Y+4	; 0x04
     40c:	88 2f       	mov	r24, r24
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	88 0f       	add	r24, r24
     412:	99 1f       	adc	r25, r25
     414:	9e 01       	movw	r18, r28
     416:	2f 5f       	subi	r18, 0xFF	; 255
     418:	3f 4f       	sbci	r19, 0xFF	; 255
     41a:	82 0f       	add	r24, r18
     41c:	93 1f       	adc	r25, r19
     41e:	0b 96       	adiw	r24, 0x0b	; 11
     420:	fc 01       	movw	r30, r24
     422:	80 81       	ld	r24, Z
     424:	91 81       	ldd	r25, Z+1	; 0x01
     426:	7c 01       	movw	r14, r24
     428:	00 27       	eor	r16, r16
     42a:	f7 fc       	sbrc	r15, 7
     42c:	00 95       	com	r16
     42e:	10 2f       	mov	r17, r16
     430:	8a 81       	ldd	r24, Y+2	; 0x02
     432:	9b 81       	ldd	r25, Y+3	; 0x03
     434:	01 96       	adiw	r24, 0x01	; 1
     436:	9c 01       	movw	r18, r24
     438:	40 e0       	ldi	r20, 0x00	; 0
     43a:	50 e0       	ldi	r21, 0x00	; 0
     43c:	8c 81       	ldd	r24, Y+4	; 0x04
     43e:	88 2f       	mov	r24, r24
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	88 0f       	add	r24, r24
     444:	99 1f       	adc	r25, r25
     446:	88 0f       	add	r24, r24
     448:	99 1f       	adc	r25, r25
     44a:	be 01       	movw	r22, r28
     44c:	6f 5f       	subi	r22, 0xFF	; 255
     44e:	7f 4f       	sbci	r23, 0xFF	; 255
     450:	86 0f       	add	r24, r22
     452:	97 1f       	adc	r25, r23
     454:	4d 96       	adiw	r24, 0x1d	; 29
     456:	fc 01       	movw	r30, r24
     458:	80 81       	ld	r24, Z
     45a:	91 81       	ldd	r25, Z+1	; 0x01
     45c:	a2 81       	ldd	r26, Z+2	; 0x02
     45e:	b3 81       	ldd	r27, Z+3	; 0x03
     460:	bc 01       	movw	r22, r24
     462:	cd 01       	movw	r24, r26
     464:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <__mulsi3>
     468:	dc 01       	movw	r26, r24
     46a:	cb 01       	movw	r24, r22
     46c:	8e 0d       	add	r24, r14
     46e:	9f 1d       	adc	r25, r15
     470:	a0 1f       	adc	r26, r16
     472:	b1 1f       	adc	r27, r17
     474:	2a 81       	ldd	r18, Y+2	; 0x02
     476:	3b 81       	ldd	r19, Y+3	; 0x03
     478:	2e 5f       	subi	r18, 0xFE	; 254
     47a:	3f 4f       	sbci	r19, 0xFF	; 255
     47c:	99 01       	movw	r18, r18
     47e:	40 e0       	ldi	r20, 0x00	; 0
     480:	50 e0       	ldi	r21, 0x00	; 0
     482:	bc 01       	movw	r22, r24
     484:	cd 01       	movw	r24, r26
     486:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <__divmodsi4>
     48a:	da 01       	movw	r26, r20
     48c:	c9 01       	movw	r24, r18
     48e:	96 01       	movw	r18, r12
     490:	22 0f       	add	r18, r18
     492:	33 1f       	adc	r19, r19
     494:	22 0f       	add	r18, r18
     496:	33 1f       	adc	r19, r19
     498:	ae 01       	movw	r20, r28
     49a:	4f 5f       	subi	r20, 0xFF	; 255
     49c:	5f 4f       	sbci	r21, 0xFF	; 255
     49e:	24 0f       	add	r18, r20
     4a0:	35 1f       	adc	r19, r21
     4a2:	23 5e       	subi	r18, 0xE3	; 227
     4a4:	3f 4f       	sbci	r19, 0xFF	; 255
     4a6:	f9 01       	movw	r30, r18
     4a8:	80 83       	st	Z, r24
     4aa:	91 83       	std	Z+1, r25	; 0x01
     4ac:	a2 83       	std	Z+2, r26	; 0x02
     4ae:	b3 83       	std	Z+3, r27	; 0x03
	}

	for (unsigned int i = 0; i < 1000; i++){
		IMU_read_acc(accBuffer);
		IMU_read_gyro(gyroBuffer);
		for(unsigned char j = 0; j < 3; j++){
     4b0:	8c 81       	ldd	r24, Y+4	; 0x04
     4b2:	8f 5f       	subi	r24, 0xFF	; 255
     4b4:	8c 83       	std	Y+4, r24	; 0x04
     4b6:	8c 81       	ldd	r24, Y+4	; 0x04
     4b8:	83 30       	cpi	r24, 0x03	; 3
     4ba:	08 f4       	brcc	.+2      	; 0x4be <calibrateIMU+0x254>
     4bc:	4d cf       	rjmp	.-358    	; 0x358 <calibrateIMU+0xee>
	for(unsigned char i = 0; i < 3; i++){
		accCalibration[i] = accBuffer[i];
		gyroCalibration[i] = gyroBuffer[i];
	}

	for (unsigned int i = 0; i < 1000; i++){
     4be:	8a 81       	ldd	r24, Y+2	; 0x02
     4c0:	9b 81       	ldd	r25, Y+3	; 0x03
     4c2:	01 96       	adiw	r24, 0x01	; 1
     4c4:	9b 83       	std	Y+3, r25	; 0x03
     4c6:	8a 83       	std	Y+2, r24	; 0x02
     4c8:	8a 81       	ldd	r24, Y+2	; 0x02
     4ca:	9b 81       	ldd	r25, Y+3	; 0x03
     4cc:	88 3e       	cpi	r24, 0xE8	; 232
     4ce:	f3 e0       	ldi	r31, 0x03	; 3
     4d0:	9f 07       	cpc	r25, r31
     4d2:	08 f4       	brcc	.+2      	; 0x4d6 <calibrateIMU+0x26c>
     4d4:	37 cf       	rjmp	.-402    	; 0x344 <calibrateIMU+0xda>
		for(unsigned char j = 0; j < 3; j++){
			accCalibration_TMP[j] = (accBuffer[j] + (i+1)*accCalibration_TMP[j])/(i+2);
			gyroCalibration_TMP[j] = (gyroBuffer[j] + (i+1)*gyroCalibration_TMP[j])/(i+2);
		}
	}
	for(unsigned char i = 0; i < 3; i++){
     4d6:	1d 82       	std	Y+5, r1	; 0x05
     4d8:	3f c0       	rjmp	.+126    	; 0x558 <calibrateIMU+0x2ee>
		accCalibration[i] = accCalibration_TMP[i];
     4da:	8d 81       	ldd	r24, Y+5	; 0x05
     4dc:	48 2f       	mov	r20, r24
     4de:	50 e0       	ldi	r21, 0x00	; 0
     4e0:	8d 81       	ldd	r24, Y+5	; 0x05
     4e2:	88 2f       	mov	r24, r24
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	88 0f       	add	r24, r24
     4e8:	99 1f       	adc	r25, r25
     4ea:	88 0f       	add	r24, r24
     4ec:	99 1f       	adc	r25, r25
     4ee:	9e 01       	movw	r18, r28
     4f0:	2f 5f       	subi	r18, 0xFF	; 255
     4f2:	3f 4f       	sbci	r19, 0xFF	; 255
     4f4:	82 0f       	add	r24, r18
     4f6:	93 1f       	adc	r25, r19
     4f8:	41 96       	adiw	r24, 0x11	; 17
     4fa:	fc 01       	movw	r30, r24
     4fc:	80 81       	ld	r24, Z
     4fe:	91 81       	ldd	r25, Z+1	; 0x01
     500:	a2 81       	ldd	r26, Z+2	; 0x02
     502:	b3 81       	ldd	r27, Z+3	; 0x03
     504:	9c 01       	movw	r18, r24
     506:	ca 01       	movw	r24, r20
     508:	88 0f       	add	r24, r24
     50a:	99 1f       	adc	r25, r25
     50c:	86 58       	subi	r24, 0x86	; 134
     50e:	9e 4f       	sbci	r25, 0xFE	; 254
     510:	fc 01       	movw	r30, r24
     512:	31 83       	std	Z+1, r19	; 0x01
     514:	20 83       	st	Z, r18
		gyroCalibration[i] = gyroCalibration_TMP[i];
     516:	8d 81       	ldd	r24, Y+5	; 0x05
     518:	48 2f       	mov	r20, r24
     51a:	50 e0       	ldi	r21, 0x00	; 0
     51c:	8d 81       	ldd	r24, Y+5	; 0x05
     51e:	88 2f       	mov	r24, r24
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	88 0f       	add	r24, r24
     524:	99 1f       	adc	r25, r25
     526:	88 0f       	add	r24, r24
     528:	99 1f       	adc	r25, r25
     52a:	9e 01       	movw	r18, r28
     52c:	2f 5f       	subi	r18, 0xFF	; 255
     52e:	3f 4f       	sbci	r19, 0xFF	; 255
     530:	82 0f       	add	r24, r18
     532:	93 1f       	adc	r25, r19
     534:	4d 96       	adiw	r24, 0x1d	; 29
     536:	fc 01       	movw	r30, r24
     538:	80 81       	ld	r24, Z
     53a:	91 81       	ldd	r25, Z+1	; 0x01
     53c:	a2 81       	ldd	r26, Z+2	; 0x02
     53e:	b3 81       	ldd	r27, Z+3	; 0x03
     540:	9c 01       	movw	r18, r24
     542:	ca 01       	movw	r24, r20
     544:	88 0f       	add	r24, r24
     546:	99 1f       	adc	r25, r25
     548:	80 58       	subi	r24, 0x80	; 128
     54a:	9e 4f       	sbci	r25, 0xFE	; 254
     54c:	fc 01       	movw	r30, r24
     54e:	31 83       	std	Z+1, r19	; 0x01
     550:	20 83       	st	Z, r18
		for(unsigned char j = 0; j < 3; j++){
			accCalibration_TMP[j] = (accBuffer[j] + (i+1)*accCalibration_TMP[j])/(i+2);
			gyroCalibration_TMP[j] = (gyroBuffer[j] + (i+1)*gyroCalibration_TMP[j])/(i+2);
		}
	}
	for(unsigned char i = 0; i < 3; i++){
     552:	8d 81       	ldd	r24, Y+5	; 0x05
     554:	8f 5f       	subi	r24, 0xFF	; 255
     556:	8d 83       	std	Y+5, r24	; 0x05
     558:	8d 81       	ldd	r24, Y+5	; 0x05
     55a:	83 30       	cpi	r24, 0x03	; 3
     55c:	08 f4       	brcc	.+2      	; 0x560 <calibrateIMU+0x2f6>
     55e:	bd cf       	rjmp	.-134    	; 0x4da <calibrateIMU+0x270>
		accCalibration[i] = accCalibration_TMP[i];
		gyroCalibration[i] = gyroCalibration_TMP[i];
	}
	// Calibration done
	calibrationFlag = 0;
     560:	10 92 d9 01 	sts	0x01D9, r1
}
     564:	e1 96       	adiw	r28, 0x31	; 49
     566:	0f b6       	in	r0, 0x3f	; 63
     568:	f8 94       	cli
     56a:	de bf       	out	0x3e, r29	; 62
     56c:	0f be       	out	0x3f, r0	; 63
     56e:	cd bf       	out	0x3d, r28	; 61
     570:	df 91       	pop	r29
     572:	cf 91       	pop	r28
     574:	1f 91       	pop	r17
     576:	0f 91       	pop	r16
     578:	ff 90       	pop	r15
     57a:	ef 90       	pop	r14
     57c:	df 90       	pop	r13
     57e:	cf 90       	pop	r12
     580:	08 95       	ret

00000582 <readAcc>:

/*
 * This function serves as a get function for acceleration data with a moving average filter.
 * The smoothness parameter is the number of points in the moving avg filter.
 */
void readAcc(int *dataBuff,char smoothness){
     582:	0f 93       	push	r16
     584:	1f 93       	push	r17
     586:	cf 93       	push	r28
     588:	df 93       	push	r29
     58a:	cd b7       	in	r28, 0x3d	; 61
     58c:	de b7       	in	r29, 0x3e	; 62
     58e:	a2 97       	sbiw	r28, 0x22	; 34
     590:	0f b6       	in	r0, 0x3f	; 63
     592:	f8 94       	cli
     594:	de bf       	out	0x3e, r29	; 62
     596:	0f be       	out	0x3f, r0	; 63
     598:	cd bf       	out	0x3d, r28	; 61
     59a:	99 87       	std	Y+9, r25	; 0x09
     59c:	88 87       	std	Y+8, r24	; 0x08
     59e:	6a 87       	std	Y+10, r22	; 0x0a
	int rawdata[3];

	if (accumulatingAcc){
     5a0:	80 91 00 01 	lds	r24, 0x0100
     5a4:	88 23       	and	r24, r24
     5a6:	09 f4       	brne	.+2      	; 0x5aa <readAcc+0x28>
     5a8:	80 c0       	rjmp	.+256    	; 0x6aa <readAcc+0x128>
		for(unsigned char i = 0; i < smoothness; i++){
     5aa:	19 82       	std	Y+1, r1	; 0x01
     5ac:	2b c0       	rjmp	.+86     	; 0x604 <readAcc+0x82>
			IMU_read_acc(rawdata);
     5ae:	ce 01       	movw	r24, r28
     5b0:	02 96       	adiw	r24, 0x02	; 2
     5b2:	0e 94 8d 05 	call	0xb1a	; 0xb1a <IMU_read_acc>
			accX_rawDataBuffer[i] = rawdata[0];
     5b6:	89 81       	ldd	r24, Y+1	; 0x01
     5b8:	88 2f       	mov	r24, r24
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	2a 81       	ldd	r18, Y+2	; 0x02
     5be:	3b 81       	ldd	r19, Y+3	; 0x03
     5c0:	88 0f       	add	r24, r24
     5c2:	99 1f       	adc	r25, r25
     5c4:	8c 53       	subi	r24, 0x3C	; 60
     5c6:	9e 4f       	sbci	r25, 0xFE	; 254
     5c8:	fc 01       	movw	r30, r24
     5ca:	31 83       	std	Z+1, r19	; 0x01
     5cc:	20 83       	st	Z, r18
			accY_rawDataBuffer[i] = rawdata[1];
     5ce:	89 81       	ldd	r24, Y+1	; 0x01
     5d0:	88 2f       	mov	r24, r24
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	2c 81       	ldd	r18, Y+4	; 0x04
     5d6:	3d 81       	ldd	r19, Y+5	; 0x05
     5d8:	88 0f       	add	r24, r24
     5da:	99 1f       	adc	r25, r25
     5dc:	80 55       	subi	r24, 0x50	; 80
     5de:	9e 4f       	sbci	r25, 0xFE	; 254
     5e0:	fc 01       	movw	r30, r24
     5e2:	31 83       	std	Z+1, r19	; 0x01
     5e4:	20 83       	st	Z, r18
			accZ_rawDataBuffer[i] = rawdata[2];
     5e6:	89 81       	ldd	r24, Y+1	; 0x01
     5e8:	88 2f       	mov	r24, r24
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	2e 81       	ldd	r18, Y+6	; 0x06
     5ee:	3f 81       	ldd	r19, Y+7	; 0x07
     5f0:	88 0f       	add	r24, r24
     5f2:	99 1f       	adc	r25, r25
     5f4:	88 57       	subi	r24, 0x78	; 120
     5f6:	9e 4f       	sbci	r25, 0xFE	; 254
     5f8:	fc 01       	movw	r30, r24
     5fa:	31 83       	std	Z+1, r19	; 0x01
     5fc:	20 83       	st	Z, r18
 */
void readAcc(int *dataBuff,char smoothness){
	int rawdata[3];

	if (accumulatingAcc){
		for(unsigned char i = 0; i < smoothness; i++){
     5fe:	89 81       	ldd	r24, Y+1	; 0x01
     600:	8f 5f       	subi	r24, 0xFF	; 255
     602:	89 83       	std	Y+1, r24	; 0x01
     604:	99 81       	ldd	r25, Y+1	; 0x01
     606:	8a 85       	ldd	r24, Y+10	; 0x0a
     608:	98 17       	cp	r25, r24
     60a:	88 f2       	brcs	.-94     	; 0x5ae <readAcc+0x2c>
			IMU_read_acc(rawdata);
			accX_rawDataBuffer[i] = rawdata[0];
			accY_rawDataBuffer[i] = rawdata[1];
			accZ_rawDataBuffer[i] = rawdata[2];
		}
		dataBuff[0] = sum(accX_rawDataBuffer,smoothness)/smoothness;
     60c:	6a 85       	ldd	r22, Y+10	; 0x0a
     60e:	84 ec       	ldi	r24, 0xC4	; 196
     610:	91 e0       	ldi	r25, 0x01	; 1
     612:	0e 94 48 05 	call	0xa90	; 0xa90 <sum>
     616:	dc 01       	movw	r26, r24
     618:	cb 01       	movw	r24, r22
     61a:	2a 85       	ldd	r18, Y+10	; 0x0a
     61c:	22 2f       	mov	r18, r18
     61e:	30 e0       	ldi	r19, 0x00	; 0
     620:	40 e0       	ldi	r20, 0x00	; 0
     622:	50 e0       	ldi	r21, 0x00	; 0
     624:	bc 01       	movw	r22, r24
     626:	cd 01       	movw	r24, r26
     628:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <__divmodsi4>
     62c:	da 01       	movw	r26, r20
     62e:	c9 01       	movw	r24, r18
     630:	9c 01       	movw	r18, r24
     632:	88 85       	ldd	r24, Y+8	; 0x08
     634:	99 85       	ldd	r25, Y+9	; 0x09
     636:	fc 01       	movw	r30, r24
     638:	31 83       	std	Z+1, r19	; 0x01
     63a:	20 83       	st	Z, r18
		dataBuff[1] = sum(accY_rawDataBuffer,smoothness)/smoothness;
     63c:	88 85       	ldd	r24, Y+8	; 0x08
     63e:	99 85       	ldd	r25, Y+9	; 0x09
     640:	8c 01       	movw	r16, r24
     642:	0e 5f       	subi	r16, 0xFE	; 254
     644:	1f 4f       	sbci	r17, 0xFF	; 255
     646:	6a 85       	ldd	r22, Y+10	; 0x0a
     648:	80 eb       	ldi	r24, 0xB0	; 176
     64a:	91 e0       	ldi	r25, 0x01	; 1
     64c:	0e 94 48 05 	call	0xa90	; 0xa90 <sum>
     650:	dc 01       	movw	r26, r24
     652:	cb 01       	movw	r24, r22
     654:	2a 85       	ldd	r18, Y+10	; 0x0a
     656:	22 2f       	mov	r18, r18
     658:	30 e0       	ldi	r19, 0x00	; 0
     65a:	40 e0       	ldi	r20, 0x00	; 0
     65c:	50 e0       	ldi	r21, 0x00	; 0
     65e:	bc 01       	movw	r22, r24
     660:	cd 01       	movw	r24, r26
     662:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <__divmodsi4>
     666:	da 01       	movw	r26, r20
     668:	c9 01       	movw	r24, r18
     66a:	f8 01       	movw	r30, r16
     66c:	91 83       	std	Z+1, r25	; 0x01
     66e:	80 83       	st	Z, r24
		dataBuff[2] = sum(accZ_rawDataBuffer,smoothness)/smoothness;
     670:	88 85       	ldd	r24, Y+8	; 0x08
     672:	99 85       	ldd	r25, Y+9	; 0x09
     674:	8c 01       	movw	r16, r24
     676:	0c 5f       	subi	r16, 0xFC	; 252
     678:	1f 4f       	sbci	r17, 0xFF	; 255
     67a:	6a 85       	ldd	r22, Y+10	; 0x0a
     67c:	88 e8       	ldi	r24, 0x88	; 136
     67e:	91 e0       	ldi	r25, 0x01	; 1
     680:	0e 94 48 05 	call	0xa90	; 0xa90 <sum>
     684:	dc 01       	movw	r26, r24
     686:	cb 01       	movw	r24, r22
     688:	2a 85       	ldd	r18, Y+10	; 0x0a
     68a:	22 2f       	mov	r18, r18
     68c:	30 e0       	ldi	r19, 0x00	; 0
     68e:	40 e0       	ldi	r20, 0x00	; 0
     690:	50 e0       	ldi	r21, 0x00	; 0
     692:	bc 01       	movw	r22, r24
     694:	cd 01       	movw	r24, r26
     696:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <__divmodsi4>
     69a:	da 01       	movw	r26, r20
     69c:	c9 01       	movw	r24, r18
     69e:	f8 01       	movw	r30, r16
     6a0:	91 83       	std	Z+1, r25	; 0x01
     6a2:	80 83       	st	Z, r24

		accumulatingAcc = 0;
     6a4:	10 92 00 01 	sts	0x0100, r1
     6a8:	a5 c0       	rjmp	.+330    	; 0x7f4 <readAcc+0x272>
	}
	else{
		IMU_read_acc(rawdata);
     6aa:	ce 01       	movw	r24, r28
     6ac:	02 96       	adiw	r24, 0x02	; 2
     6ae:	0e 94 8d 05 	call	0xb1a	; 0xb1a <IMU_read_acc>
		accX_rawDataBuffer[accBufferIndexer] = rawdata[0];
     6b2:	80 91 78 01 	lds	r24, 0x0178
     6b6:	88 2f       	mov	r24, r24
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	2a 81       	ldd	r18, Y+2	; 0x02
     6bc:	3b 81       	ldd	r19, Y+3	; 0x03
     6be:	88 0f       	add	r24, r24
     6c0:	99 1f       	adc	r25, r25
     6c2:	8c 53       	subi	r24, 0x3C	; 60
     6c4:	9e 4f       	sbci	r25, 0xFE	; 254
     6c6:	fc 01       	movw	r30, r24
     6c8:	31 83       	std	Z+1, r19	; 0x01
     6ca:	20 83       	st	Z, r18
		accY_rawDataBuffer[accBufferIndexer] = rawdata[1];
     6cc:	80 91 78 01 	lds	r24, 0x0178
     6d0:	88 2f       	mov	r24, r24
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	2c 81       	ldd	r18, Y+4	; 0x04
     6d6:	3d 81       	ldd	r19, Y+5	; 0x05
     6d8:	88 0f       	add	r24, r24
     6da:	99 1f       	adc	r25, r25
     6dc:	80 55       	subi	r24, 0x50	; 80
     6de:	9e 4f       	sbci	r25, 0xFE	; 254
     6e0:	fc 01       	movw	r30, r24
     6e2:	31 83       	std	Z+1, r19	; 0x01
     6e4:	20 83       	st	Z, r18
		accZ_rawDataBuffer[accBufferIndexer] = rawdata[2];
     6e6:	80 91 78 01 	lds	r24, 0x0178
     6ea:	88 2f       	mov	r24, r24
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	2e 81       	ldd	r18, Y+6	; 0x06
     6f0:	3f 81       	ldd	r19, Y+7	; 0x07
     6f2:	88 0f       	add	r24, r24
     6f4:	99 1f       	adc	r25, r25
     6f6:	88 57       	subi	r24, 0x78	; 120
     6f8:	9e 4f       	sbci	r25, 0xFE	; 254
     6fa:	fc 01       	movw	r30, r24
     6fc:	31 83       	std	Z+1, r19	; 0x01
     6fe:	20 83       	st	Z, r18
		accBufferIndexer = accBufferIndexer + 1;
     700:	80 91 78 01 	lds	r24, 0x0178
     704:	8f 5f       	subi	r24, 0xFF	; 255
     706:	80 93 78 01 	sts	0x0178, r24
		if (accBufferIndexer == (smoothness - 1)){accBufferIndexer = 0;} // Reset the bufferIndexer
     70a:	80 91 78 01 	lds	r24, 0x0178
     70e:	28 2f       	mov	r18, r24
     710:	30 e0       	ldi	r19, 0x00	; 0
     712:	8a 85       	ldd	r24, Y+10	; 0x0a
     714:	88 2f       	mov	r24, r24
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	01 97       	sbiw	r24, 0x01	; 1
     71a:	28 17       	cp	r18, r24
     71c:	39 07       	cpc	r19, r25
     71e:	11 f4       	brne	.+4      	; 0x724 <readAcc+0x1a2>
     720:	10 92 78 01 	sts	0x0178, r1

		dataBuff[0] = sum(accX_rawDataBuffer,smoothness)/smoothness - accCalibration[0];
     724:	6a 85       	ldd	r22, Y+10	; 0x0a
     726:	84 ec       	ldi	r24, 0xC4	; 196
     728:	91 e0       	ldi	r25, 0x01	; 1
     72a:	0e 94 48 05 	call	0xa90	; 0xa90 <sum>
     72e:	dc 01       	movw	r26, r24
     730:	cb 01       	movw	r24, r22
     732:	2a 85       	ldd	r18, Y+10	; 0x0a
     734:	22 2f       	mov	r18, r18
     736:	30 e0       	ldi	r19, 0x00	; 0
     738:	40 e0       	ldi	r20, 0x00	; 0
     73a:	50 e0       	ldi	r21, 0x00	; 0
     73c:	bc 01       	movw	r22, r24
     73e:	cd 01       	movw	r24, r26
     740:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <__divmodsi4>
     744:	da 01       	movw	r26, r20
     746:	c9 01       	movw	r24, r18
     748:	9c 01       	movw	r18, r24
     74a:	80 91 7a 01 	lds	r24, 0x017A
     74e:	90 91 7b 01 	lds	r25, 0x017B
     752:	a9 01       	movw	r20, r18
     754:	48 1b       	sub	r20, r24
     756:	59 0b       	sbc	r21, r25
     758:	ca 01       	movw	r24, r20
     75a:	9c 01       	movw	r18, r24
     75c:	88 85       	ldd	r24, Y+8	; 0x08
     75e:	99 85       	ldd	r25, Y+9	; 0x09
     760:	fc 01       	movw	r30, r24
     762:	31 83       	std	Z+1, r19	; 0x01
     764:	20 83       	st	Z, r18
		dataBuff[1] = sum(accY_rawDataBuffer,smoothness)/smoothness - accCalibration[1];
     766:	88 85       	ldd	r24, Y+8	; 0x08
     768:	99 85       	ldd	r25, Y+9	; 0x09
     76a:	8c 01       	movw	r16, r24
     76c:	0e 5f       	subi	r16, 0xFE	; 254
     76e:	1f 4f       	sbci	r17, 0xFF	; 255
     770:	6a 85       	ldd	r22, Y+10	; 0x0a
     772:	80 eb       	ldi	r24, 0xB0	; 176
     774:	91 e0       	ldi	r25, 0x01	; 1
     776:	0e 94 48 05 	call	0xa90	; 0xa90 <sum>
     77a:	dc 01       	movw	r26, r24
     77c:	cb 01       	movw	r24, r22
     77e:	2a 85       	ldd	r18, Y+10	; 0x0a
     780:	22 2f       	mov	r18, r18
     782:	30 e0       	ldi	r19, 0x00	; 0
     784:	40 e0       	ldi	r20, 0x00	; 0
     786:	50 e0       	ldi	r21, 0x00	; 0
     788:	bc 01       	movw	r22, r24
     78a:	cd 01       	movw	r24, r26
     78c:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <__divmodsi4>
     790:	da 01       	movw	r26, r20
     792:	c9 01       	movw	r24, r18
     794:	9c 01       	movw	r18, r24
     796:	80 91 7c 01 	lds	r24, 0x017C
     79a:	90 91 7d 01 	lds	r25, 0x017D
     79e:	a9 01       	movw	r20, r18
     7a0:	48 1b       	sub	r20, r24
     7a2:	59 0b       	sbc	r21, r25
     7a4:	ca 01       	movw	r24, r20
     7a6:	f8 01       	movw	r30, r16
     7a8:	91 83       	std	Z+1, r25	; 0x01
     7aa:	80 83       	st	Z, r24
		dataBuff[2] = sum(accZ_rawDataBuffer,smoothness)/smoothness - (accCalibration[2] - 16384);
     7ac:	88 85       	ldd	r24, Y+8	; 0x08
     7ae:	99 85       	ldd	r25, Y+9	; 0x09
     7b0:	8c 01       	movw	r16, r24
     7b2:	0c 5f       	subi	r16, 0xFC	; 252
     7b4:	1f 4f       	sbci	r17, 0xFF	; 255
     7b6:	6a 85       	ldd	r22, Y+10	; 0x0a
     7b8:	88 e8       	ldi	r24, 0x88	; 136
     7ba:	91 e0       	ldi	r25, 0x01	; 1
     7bc:	0e 94 48 05 	call	0xa90	; 0xa90 <sum>
     7c0:	dc 01       	movw	r26, r24
     7c2:	cb 01       	movw	r24, r22
     7c4:	2a 85       	ldd	r18, Y+10	; 0x0a
     7c6:	22 2f       	mov	r18, r18
     7c8:	30 e0       	ldi	r19, 0x00	; 0
     7ca:	40 e0       	ldi	r20, 0x00	; 0
     7cc:	50 e0       	ldi	r21, 0x00	; 0
     7ce:	bc 01       	movw	r22, r24
     7d0:	cd 01       	movw	r24, r26
     7d2:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <__divmodsi4>
     7d6:	da 01       	movw	r26, r20
     7d8:	c9 01       	movw	r24, r18
     7da:	9c 01       	movw	r18, r24
     7dc:	80 91 7e 01 	lds	r24, 0x017E
     7e0:	90 91 7f 01 	lds	r25, 0x017F
     7e4:	a9 01       	movw	r20, r18
     7e6:	48 1b       	sub	r20, r24
     7e8:	59 0b       	sbc	r21, r25
     7ea:	ca 01       	movw	r24, r20
     7ec:	90 5c       	subi	r25, 0xC0	; 192
     7ee:	f8 01       	movw	r30, r16
     7f0:	91 83       	std	Z+1, r25	; 0x01
     7f2:	80 83       	st	Z, r24
	}
}
     7f4:	a2 96       	adiw	r28, 0x22	; 34
     7f6:	0f b6       	in	r0, 0x3f	; 63
     7f8:	f8 94       	cli
     7fa:	de bf       	out	0x3e, r29	; 62
     7fc:	0f be       	out	0x3f, r0	; 63
     7fe:	cd bf       	out	0x3d, r28	; 61
     800:	df 91       	pop	r29
     802:	cf 91       	pop	r28
     804:	1f 91       	pop	r17
     806:	0f 91       	pop	r16
     808:	08 95       	ret

0000080a <readGyro>:


/*
 * This function serves as a get function for angular rate data with built in 10 point moving average
 */
void readGyro(int *dataBuff,char smoothness){
     80a:	0f 93       	push	r16
     80c:	1f 93       	push	r17
     80e:	cf 93       	push	r28
     810:	df 93       	push	r29
     812:	cd b7       	in	r28, 0x3d	; 61
     814:	de b7       	in	r29, 0x3e	; 62
     816:	a2 97       	sbiw	r28, 0x22	; 34
     818:	0f b6       	in	r0, 0x3f	; 63
     81a:	f8 94       	cli
     81c:	de bf       	out	0x3e, r29	; 62
     81e:	0f be       	out	0x3f, r0	; 63
     820:	cd bf       	out	0x3d, r28	; 61
     822:	99 87       	std	Y+9, r25	; 0x09
     824:	88 87       	std	Y+8, r24	; 0x08
     826:	6a 87       	std	Y+10, r22	; 0x0a
	int rawdata[3];

	if(accumulatingGyro){
     828:	80 91 01 01 	lds	r24, 0x0101
     82c:	88 23       	and	r24, r24
     82e:	09 f4       	brne	.+2      	; 0x832 <readGyro+0x28>
     830:	80 c0       	rjmp	.+256    	; 0x932 <__stack+0x33>
		for(unsigned char i = 0; i < smoothness; i++){
     832:	19 82       	std	Y+1, r1	; 0x01
     834:	2b c0       	rjmp	.+86     	; 0x88c <readGyro+0x82>
			IMU_read_gyro(rawdata);
     836:	ce 01       	movw	r24, r28
     838:	02 96       	adiw	r24, 0x02	; 2
     83a:	0e 94 03 06 	call	0xc06	; 0xc06 <IMU_read_gyro>
			gyroX_rawDataBuffer[i] = rawdata[0];
     83e:	89 81       	ldd	r24, Y+1	; 0x01
     840:	88 2f       	mov	r24, r24
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	2a 81       	ldd	r18, Y+2	; 0x02
     846:	3b 81       	ldd	r19, Y+3	; 0x03
     848:	88 0f       	add	r24, r24
     84a:	99 1f       	adc	r25, r25
     84c:	81 51       	subi	r24, 0x11	; 17
     84e:	9e 4f       	sbci	r25, 0xFE	; 254
     850:	fc 01       	movw	r30, r24
     852:	31 83       	std	Z+1, r19	; 0x01
     854:	20 83       	st	Z, r18
			gyroY_rawDataBuffer[i] = rawdata[1];
     856:	89 81       	ldd	r24, Y+1	; 0x01
     858:	88 2f       	mov	r24, r24
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	2c 81       	ldd	r18, Y+4	; 0x04
     85e:	3d 81       	ldd	r19, Y+5	; 0x05
     860:	88 0f       	add	r24, r24
     862:	99 1f       	adc	r25, r25
     864:	86 52       	subi	r24, 0x26	; 38
     866:	9e 4f       	sbci	r25, 0xFE	; 254
     868:	fc 01       	movw	r30, r24
     86a:	31 83       	std	Z+1, r19	; 0x01
     86c:	20 83       	st	Z, r18
			gyroZ_rawDataBuffer[i] = rawdata[2];
     86e:	89 81       	ldd	r24, Y+1	; 0x01
     870:	88 2f       	mov	r24, r24
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	2e 81       	ldd	r18, Y+6	; 0x06
     876:	3f 81       	ldd	r19, Y+7	; 0x07
     878:	88 0f       	add	r24, r24
     87a:	99 1f       	adc	r25, r25
     87c:	84 56       	subi	r24, 0x64	; 100
     87e:	9e 4f       	sbci	r25, 0xFE	; 254
     880:	fc 01       	movw	r30, r24
     882:	31 83       	std	Z+1, r19	; 0x01
     884:	20 83       	st	Z, r18
 */
void readGyro(int *dataBuff,char smoothness){
	int rawdata[3];

	if(accumulatingGyro){
		for(unsigned char i = 0; i < smoothness; i++){
     886:	89 81       	ldd	r24, Y+1	; 0x01
     888:	8f 5f       	subi	r24, 0xFF	; 255
     88a:	89 83       	std	Y+1, r24	; 0x01
     88c:	99 81       	ldd	r25, Y+1	; 0x01
     88e:	8a 85       	ldd	r24, Y+10	; 0x0a
     890:	98 17       	cp	r25, r24
     892:	88 f2       	brcs	.-94     	; 0x836 <readGyro+0x2c>
			IMU_read_gyro(rawdata);
			gyroX_rawDataBuffer[i] = rawdata[0];
			gyroY_rawDataBuffer[i] = rawdata[1];
			gyroZ_rawDataBuffer[i] = rawdata[2];
		}
		dataBuff[0] = sum(gyroX_rawDataBuffer,smoothness)/smoothness;
     894:	6a 85       	ldd	r22, Y+10	; 0x0a
     896:	8f ee       	ldi	r24, 0xEF	; 239
     898:	91 e0       	ldi	r25, 0x01	; 1
     89a:	0e 94 48 05 	call	0xa90	; 0xa90 <sum>
     89e:	dc 01       	movw	r26, r24
     8a0:	cb 01       	movw	r24, r22
     8a2:	2a 85       	ldd	r18, Y+10	; 0x0a
     8a4:	22 2f       	mov	r18, r18
     8a6:	30 e0       	ldi	r19, 0x00	; 0
     8a8:	40 e0       	ldi	r20, 0x00	; 0
     8aa:	50 e0       	ldi	r21, 0x00	; 0
     8ac:	bc 01       	movw	r22, r24
     8ae:	cd 01       	movw	r24, r26
     8b0:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <__divmodsi4>
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	9c 01       	movw	r18, r24
     8ba:	88 85       	ldd	r24, Y+8	; 0x08
     8bc:	99 85       	ldd	r25, Y+9	; 0x09
     8be:	fc 01       	movw	r30, r24
     8c0:	31 83       	std	Z+1, r19	; 0x01
     8c2:	20 83       	st	Z, r18
		dataBuff[1] = sum(gyroY_rawDataBuffer,smoothness)/smoothness;
     8c4:	88 85       	ldd	r24, Y+8	; 0x08
     8c6:	99 85       	ldd	r25, Y+9	; 0x09
     8c8:	8c 01       	movw	r16, r24
     8ca:	0e 5f       	subi	r16, 0xFE	; 254
     8cc:	1f 4f       	sbci	r17, 0xFF	; 255
     8ce:	6a 85       	ldd	r22, Y+10	; 0x0a
     8d0:	8a ed       	ldi	r24, 0xDA	; 218
     8d2:	91 e0       	ldi	r25, 0x01	; 1
     8d4:	0e 94 48 05 	call	0xa90	; 0xa90 <sum>
     8d8:	dc 01       	movw	r26, r24
     8da:	cb 01       	movw	r24, r22
     8dc:	2a 85       	ldd	r18, Y+10	; 0x0a
     8de:	22 2f       	mov	r18, r18
     8e0:	30 e0       	ldi	r19, 0x00	; 0
     8e2:	40 e0       	ldi	r20, 0x00	; 0
     8e4:	50 e0       	ldi	r21, 0x00	; 0
     8e6:	bc 01       	movw	r22, r24
     8e8:	cd 01       	movw	r24, r26
     8ea:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <__divmodsi4>
     8ee:	da 01       	movw	r26, r20
     8f0:	c9 01       	movw	r24, r18
     8f2:	f8 01       	movw	r30, r16
     8f4:	91 83       	std	Z+1, r25	; 0x01
     8f6:	80 83       	st	Z, r24
		dataBuff[2] = sum(gyroZ_rawDataBuffer,smoothness)/smoothness;
     8f8:	88 85       	ldd	r24, Y+8	; 0x08
     8fa:	99 85       	ldd	r25, Y+9	; 0x09
     8fc:	8c 01       	movw	r16, r24
     8fe:	0c 5f       	subi	r16, 0xFC	; 252
     900:	1f 4f       	sbci	r17, 0xFF	; 255
     902:	6a 85       	ldd	r22, Y+10	; 0x0a
     904:	8c e9       	ldi	r24, 0x9C	; 156
     906:	91 e0       	ldi	r25, 0x01	; 1
     908:	0e 94 48 05 	call	0xa90	; 0xa90 <sum>
     90c:	dc 01       	movw	r26, r24
     90e:	cb 01       	movw	r24, r22
     910:	2a 85       	ldd	r18, Y+10	; 0x0a
     912:	22 2f       	mov	r18, r18
     914:	30 e0       	ldi	r19, 0x00	; 0
     916:	40 e0       	ldi	r20, 0x00	; 0
     918:	50 e0       	ldi	r21, 0x00	; 0
     91a:	bc 01       	movw	r22, r24
     91c:	cd 01       	movw	r24, r26
     91e:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <__divmodsi4>
     922:	da 01       	movw	r26, r20
     924:	c9 01       	movw	r24, r18
     926:	f8 01       	movw	r30, r16
     928:	91 83       	std	Z+1, r25	; 0x01
     92a:	80 83       	st	Z, r24
		accumulatingGyro = 0;
     92c:	10 92 01 01 	sts	0x0101, r1
     930:	a4 c0       	rjmp	.+328    	; 0xa7a <__stack+0x17b>
	}
	else{
		IMU_read_gyro(rawdata);
     932:	ce 01       	movw	r24, r28
     934:	02 96       	adiw	r24, 0x02	; 2
     936:	0e 94 03 06 	call	0xc06	; 0xc06 <IMU_read_gyro>
		gyroX_rawDataBuffer[gyroBufferIndexer] = rawdata[0];
     93a:	80 91 79 01 	lds	r24, 0x0179
     93e:	88 2f       	mov	r24, r24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	2a 81       	ldd	r18, Y+2	; 0x02
     944:	3b 81       	ldd	r19, Y+3	; 0x03
     946:	88 0f       	add	r24, r24
     948:	99 1f       	adc	r25, r25
     94a:	81 51       	subi	r24, 0x11	; 17
     94c:	9e 4f       	sbci	r25, 0xFE	; 254
     94e:	fc 01       	movw	r30, r24
     950:	31 83       	std	Z+1, r19	; 0x01
     952:	20 83       	st	Z, r18
		gyroY_rawDataBuffer[gyroBufferIndexer] = rawdata[1];
     954:	80 91 79 01 	lds	r24, 0x0179
     958:	88 2f       	mov	r24, r24
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	2c 81       	ldd	r18, Y+4	; 0x04
     95e:	3d 81       	ldd	r19, Y+5	; 0x05
     960:	88 0f       	add	r24, r24
     962:	99 1f       	adc	r25, r25
     964:	86 52       	subi	r24, 0x26	; 38
     966:	9e 4f       	sbci	r25, 0xFE	; 254
     968:	fc 01       	movw	r30, r24
     96a:	31 83       	std	Z+1, r19	; 0x01
     96c:	20 83       	st	Z, r18
		gyroZ_rawDataBuffer[gyroBufferIndexer] = rawdata[2];
     96e:	80 91 79 01 	lds	r24, 0x0179
     972:	88 2f       	mov	r24, r24
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	2e 81       	ldd	r18, Y+6	; 0x06
     978:	3f 81       	ldd	r19, Y+7	; 0x07
     97a:	88 0f       	add	r24, r24
     97c:	99 1f       	adc	r25, r25
     97e:	84 56       	subi	r24, 0x64	; 100
     980:	9e 4f       	sbci	r25, 0xFE	; 254
     982:	fc 01       	movw	r30, r24
     984:	31 83       	std	Z+1, r19	; 0x01
     986:	20 83       	st	Z, r18
		gyroBufferIndexer = gyroBufferIndexer + 1;
     988:	80 91 79 01 	lds	r24, 0x0179
     98c:	8f 5f       	subi	r24, 0xFF	; 255
     98e:	80 93 79 01 	sts	0x0179, r24
		if (gyroBufferIndexer == (smoothness - 1)){gyroBufferIndexer = 0;} // Reset the bufferIndexer
     992:	80 91 79 01 	lds	r24, 0x0179
     996:	28 2f       	mov	r18, r24
     998:	30 e0       	ldi	r19, 0x00	; 0
     99a:	8a 85       	ldd	r24, Y+10	; 0x0a
     99c:	88 2f       	mov	r24, r24
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	01 97       	sbiw	r24, 0x01	; 1
     9a2:	28 17       	cp	r18, r24
     9a4:	39 07       	cpc	r19, r25
     9a6:	11 f4       	brne	.+4      	; 0x9ac <__stack+0xad>
     9a8:	10 92 79 01 	sts	0x0179, r1

		dataBuff[0] = sum(gyroX_rawDataBuffer,smoothness)/smoothness - gyroCalibration[0];
     9ac:	6a 85       	ldd	r22, Y+10	; 0x0a
     9ae:	8f ee       	ldi	r24, 0xEF	; 239
     9b0:	91 e0       	ldi	r25, 0x01	; 1
     9b2:	0e 94 48 05 	call	0xa90	; 0xa90 <sum>
     9b6:	dc 01       	movw	r26, r24
     9b8:	cb 01       	movw	r24, r22
     9ba:	2a 85       	ldd	r18, Y+10	; 0x0a
     9bc:	22 2f       	mov	r18, r18
     9be:	30 e0       	ldi	r19, 0x00	; 0
     9c0:	40 e0       	ldi	r20, 0x00	; 0
     9c2:	50 e0       	ldi	r21, 0x00	; 0
     9c4:	bc 01       	movw	r22, r24
     9c6:	cd 01       	movw	r24, r26
     9c8:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <__divmodsi4>
     9cc:	da 01       	movw	r26, r20
     9ce:	c9 01       	movw	r24, r18
     9d0:	9c 01       	movw	r18, r24
     9d2:	80 91 80 01 	lds	r24, 0x0180
     9d6:	90 91 81 01 	lds	r25, 0x0181
     9da:	a9 01       	movw	r20, r18
     9dc:	48 1b       	sub	r20, r24
     9de:	59 0b       	sbc	r21, r25
     9e0:	ca 01       	movw	r24, r20
     9e2:	9c 01       	movw	r18, r24
     9e4:	88 85       	ldd	r24, Y+8	; 0x08
     9e6:	99 85       	ldd	r25, Y+9	; 0x09
     9e8:	fc 01       	movw	r30, r24
     9ea:	31 83       	std	Z+1, r19	; 0x01
     9ec:	20 83       	st	Z, r18
		dataBuff[1] = sum(gyroY_rawDataBuffer,smoothness)/smoothness - gyroCalibration[1];
     9ee:	88 85       	ldd	r24, Y+8	; 0x08
     9f0:	99 85       	ldd	r25, Y+9	; 0x09
     9f2:	8c 01       	movw	r16, r24
     9f4:	0e 5f       	subi	r16, 0xFE	; 254
     9f6:	1f 4f       	sbci	r17, 0xFF	; 255
     9f8:	6a 85       	ldd	r22, Y+10	; 0x0a
     9fa:	8a ed       	ldi	r24, 0xDA	; 218
     9fc:	91 e0       	ldi	r25, 0x01	; 1
     9fe:	0e 94 48 05 	call	0xa90	; 0xa90 <sum>
     a02:	dc 01       	movw	r26, r24
     a04:	cb 01       	movw	r24, r22
     a06:	2a 85       	ldd	r18, Y+10	; 0x0a
     a08:	22 2f       	mov	r18, r18
     a0a:	30 e0       	ldi	r19, 0x00	; 0
     a0c:	40 e0       	ldi	r20, 0x00	; 0
     a0e:	50 e0       	ldi	r21, 0x00	; 0
     a10:	bc 01       	movw	r22, r24
     a12:	cd 01       	movw	r24, r26
     a14:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <__divmodsi4>
     a18:	da 01       	movw	r26, r20
     a1a:	c9 01       	movw	r24, r18
     a1c:	9c 01       	movw	r18, r24
     a1e:	80 91 82 01 	lds	r24, 0x0182
     a22:	90 91 83 01 	lds	r25, 0x0183
     a26:	a9 01       	movw	r20, r18
     a28:	48 1b       	sub	r20, r24
     a2a:	59 0b       	sbc	r21, r25
     a2c:	ca 01       	movw	r24, r20
     a2e:	f8 01       	movw	r30, r16
     a30:	91 83       	std	Z+1, r25	; 0x01
     a32:	80 83       	st	Z, r24
		dataBuff[2] = sum(gyroZ_rawDataBuffer,smoothness)/smoothness - gyroCalibration[2];
     a34:	88 85       	ldd	r24, Y+8	; 0x08
     a36:	99 85       	ldd	r25, Y+9	; 0x09
     a38:	8c 01       	movw	r16, r24
     a3a:	0c 5f       	subi	r16, 0xFC	; 252
     a3c:	1f 4f       	sbci	r17, 0xFF	; 255
     a3e:	6a 85       	ldd	r22, Y+10	; 0x0a
     a40:	8c e9       	ldi	r24, 0x9C	; 156
     a42:	91 e0       	ldi	r25, 0x01	; 1
     a44:	0e 94 48 05 	call	0xa90	; 0xa90 <sum>
     a48:	dc 01       	movw	r26, r24
     a4a:	cb 01       	movw	r24, r22
     a4c:	2a 85       	ldd	r18, Y+10	; 0x0a
     a4e:	22 2f       	mov	r18, r18
     a50:	30 e0       	ldi	r19, 0x00	; 0
     a52:	40 e0       	ldi	r20, 0x00	; 0
     a54:	50 e0       	ldi	r21, 0x00	; 0
     a56:	bc 01       	movw	r22, r24
     a58:	cd 01       	movw	r24, r26
     a5a:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <__divmodsi4>
     a5e:	da 01       	movw	r26, r20
     a60:	c9 01       	movw	r24, r18
     a62:	9c 01       	movw	r18, r24
     a64:	80 91 84 01 	lds	r24, 0x0184
     a68:	90 91 85 01 	lds	r25, 0x0185
     a6c:	a9 01       	movw	r20, r18
     a6e:	48 1b       	sub	r20, r24
     a70:	59 0b       	sbc	r21, r25
     a72:	ca 01       	movw	r24, r20
     a74:	f8 01       	movw	r30, r16
     a76:	91 83       	std	Z+1, r25	; 0x01
     a78:	80 83       	st	Z, r24
	}
}
     a7a:	a2 96       	adiw	r28, 0x22	; 34
     a7c:	0f b6       	in	r0, 0x3f	; 63
     a7e:	f8 94       	cli
     a80:	de bf       	out	0x3e, r29	; 62
     a82:	0f be       	out	0x3f, r0	; 63
     a84:	cd bf       	out	0x3d, r28	; 61
     a86:	df 91       	pop	r29
     a88:	cf 91       	pop	r28
     a8a:	1f 91       	pop	r17
     a8c:	0f 91       	pop	r16
     a8e:	08 95       	ret

00000a90 <sum>:

long sum(int *array,char size){
     a90:	cf 93       	push	r28
     a92:	df 93       	push	r29
     a94:	cd b7       	in	r28, 0x3d	; 61
     a96:	de b7       	in	r29, 0x3e	; 62
     a98:	28 97       	sbiw	r28, 0x08	; 8
     a9a:	0f b6       	in	r0, 0x3f	; 63
     a9c:	f8 94       	cli
     a9e:	de bf       	out	0x3e, r29	; 62
     aa0:	0f be       	out	0x3f, r0	; 63
     aa2:	cd bf       	out	0x3d, r28	; 61
     aa4:	9f 83       	std	Y+7, r25	; 0x07
     aa6:	8e 83       	std	Y+6, r24	; 0x06
     aa8:	68 87       	std	Y+8, r22	; 0x08
	long output = 0;
     aaa:	19 82       	std	Y+1, r1	; 0x01
     aac:	1a 82       	std	Y+2, r1	; 0x02
     aae:	1b 82       	std	Y+3, r1	; 0x03
     ab0:	1c 82       	std	Y+4, r1	; 0x04
	for(unsigned char i = 0; i < size; i++){
     ab2:	1d 82       	std	Y+5, r1	; 0x05
     ab4:	1f c0       	rjmp	.+62     	; 0xaf4 <sum+0x64>
		output = output + (long)array[i];
     ab6:	8d 81       	ldd	r24, Y+5	; 0x05
     ab8:	88 2f       	mov	r24, r24
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	88 0f       	add	r24, r24
     abe:	99 1f       	adc	r25, r25
     ac0:	2e 81       	ldd	r18, Y+6	; 0x06
     ac2:	3f 81       	ldd	r19, Y+7	; 0x07
     ac4:	82 0f       	add	r24, r18
     ac6:	93 1f       	adc	r25, r19
     ac8:	fc 01       	movw	r30, r24
     aca:	80 81       	ld	r24, Z
     acc:	91 81       	ldd	r25, Z+1	; 0x01
     ace:	aa 27       	eor	r26, r26
     ad0:	97 fd       	sbrc	r25, 7
     ad2:	a0 95       	com	r26
     ad4:	ba 2f       	mov	r27, r26
     ad6:	29 81       	ldd	r18, Y+1	; 0x01
     ad8:	3a 81       	ldd	r19, Y+2	; 0x02
     ada:	4b 81       	ldd	r20, Y+3	; 0x03
     adc:	5c 81       	ldd	r21, Y+4	; 0x04
     ade:	82 0f       	add	r24, r18
     ae0:	93 1f       	adc	r25, r19
     ae2:	a4 1f       	adc	r26, r20
     ae4:	b5 1f       	adc	r27, r21
     ae6:	89 83       	std	Y+1, r24	; 0x01
     ae8:	9a 83       	std	Y+2, r25	; 0x02
     aea:	ab 83       	std	Y+3, r26	; 0x03
     aec:	bc 83       	std	Y+4, r27	; 0x04
	}
}

long sum(int *array,char size){
	long output = 0;
	for(unsigned char i = 0; i < size; i++){
     aee:	8d 81       	ldd	r24, Y+5	; 0x05
     af0:	8f 5f       	subi	r24, 0xFF	; 255
     af2:	8d 83       	std	Y+5, r24	; 0x05
     af4:	9d 81       	ldd	r25, Y+5	; 0x05
     af6:	88 85       	ldd	r24, Y+8	; 0x08
     af8:	98 17       	cp	r25, r24
     afa:	e8 f2       	brcs	.-70     	; 0xab6 <sum+0x26>
		output = output + (long)array[i];
	}
	return output;
     afc:	89 81       	ldd	r24, Y+1	; 0x01
     afe:	9a 81       	ldd	r25, Y+2	; 0x02
     b00:	ab 81       	ldd	r26, Y+3	; 0x03
     b02:	bc 81       	ldd	r27, Y+4	; 0x04
}
     b04:	bc 01       	movw	r22, r24
     b06:	cd 01       	movw	r24, r26
     b08:	28 96       	adiw	r28, 0x08	; 8
     b0a:	0f b6       	in	r0, 0x3f	; 63
     b0c:	f8 94       	cli
     b0e:	de bf       	out	0x3e, r29	; 62
     b10:	0f be       	out	0x3f, r0	; 63
     b12:	cd bf       	out	0x3d, r28	; 61
     b14:	df 91       	pop	r29
     b16:	cf 91       	pop	r28
     b18:	08 95       	ret

00000b1a <IMU_read_acc>:

void IMU_read_acc(int *accBuffer){
     b1a:	0f 93       	push	r16
     b1c:	1f 93       	push	r17
     b1e:	cf 93       	push	r28
     b20:	df 93       	push	r29
     b22:	cd b7       	in	r28, 0x3d	; 61
     b24:	de b7       	in	r29, 0x3e	; 62
     b26:	2b 97       	sbiw	r28, 0x0b	; 11
     b28:	0f b6       	in	r0, 0x3f	; 63
     b2a:	f8 94       	cli
     b2c:	de bf       	out	0x3e, r29	; 62
     b2e:	0f be       	out	0x3f, r0	; 63
     b30:	cd bf       	out	0x3d, r28	; 61
     b32:	9b 87       	std	Y+11, r25	; 0x0b
     b34:	8a 87       	std	Y+10, r24	; 0x0a
	// char sendingRequest[27] = "Now sending request to IMU\n";
	// char readingFromSPDR[18] = "Reading from SPDR\n";

	char spiBuffer[6];
	int *acc = accBuffer;
     b36:	8a 85       	ldd	r24, Y+10	; 0x0a
     b38:	9b 85       	ldd	r25, Y+11	; 0x0b
     b3a:	9b 83       	std	Y+3, r25	; 0x03
     b3c:	8a 83       	std	Y+2, r24	; 0x02

	// Select the IMU as an SPI Slave

	SPI_Initiate_Transmission();
     b3e:	85 e2       	ldi	r24, 0x25	; 37
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	25 e2       	ldi	r18, 0x25	; 37
     b44:	30 e0       	ldi	r19, 0x00	; 0
     b46:	f9 01       	movw	r30, r18
     b48:	20 81       	ld	r18, Z
     b4a:	2b 7f       	andi	r18, 0xFB	; 251
     b4c:	fc 01       	movw	r30, r24
     b4e:	20 83       	st	Z, r18


	// Send "read from acceleration output register" signal
	SPI_MasterTransmit( READ | OUT_X_XL );
     b50:	88 ea       	ldi	r24, 0xA8	; 168
     b52:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <SPI_MasterTransmit>
	for (unsigned char i = 0; i < 6; i++){
     b56:	19 82       	std	Y+1, r1	; 0x01
     b58:	10 c0       	rjmp	.+32     	; 0xb7a <IMU_read_acc+0x60>
			spiBuffer[i] = SPI_MasterTransmit(0x00);
     b5a:	89 81       	ldd	r24, Y+1	; 0x01
     b5c:	08 2f       	mov	r16, r24
     b5e:	10 e0       	ldi	r17, 0x00	; 0
     b60:	80 e0       	ldi	r24, 0x00	; 0
     b62:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <SPI_MasterTransmit>
     b66:	28 2f       	mov	r18, r24
     b68:	ce 01       	movw	r24, r28
     b6a:	04 96       	adiw	r24, 0x04	; 4
     b6c:	80 0f       	add	r24, r16
     b6e:	91 1f       	adc	r25, r17
     b70:	fc 01       	movw	r30, r24
     b72:	20 83       	st	Z, r18
	SPI_Initiate_Transmission();


	// Send "read from acceleration output register" signal
	SPI_MasterTransmit( READ | OUT_X_XL );
	for (unsigned char i = 0; i < 6; i++){
     b74:	89 81       	ldd	r24, Y+1	; 0x01
     b76:	8f 5f       	subi	r24, 0xFF	; 255
     b78:	89 83       	std	Y+1, r24	; 0x01
     b7a:	89 81       	ldd	r24, Y+1	; 0x01
     b7c:	86 30       	cpi	r24, 0x06	; 6
     b7e:	68 f3       	brcs	.-38     	; 0xb5a <IMU_read_acc+0x40>
			spiBuffer[i] = SPI_MasterTransmit(0x00);
	}
	SPI_End_Transmission();
     b80:	85 e2       	ldi	r24, 0x25	; 37
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	25 e2       	ldi	r18, 0x25	; 37
     b86:	30 e0       	ldi	r19, 0x00	; 0
     b88:	f9 01       	movw	r30, r18
     b8a:	20 81       	ld	r18, Z
     b8c:	24 60       	ori	r18, 0x04	; 4
     b8e:	fc 01       	movw	r30, r24
     b90:	20 83       	st	Z, r18

	acc[0] = (spiBuffer[1] << 8 | spiBuffer[0]);
     b92:	8d 81       	ldd	r24, Y+5	; 0x05
     b94:	88 2f       	mov	r24, r24
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	38 2f       	mov	r19, r24
     b9a:	22 27       	eor	r18, r18
     b9c:	8c 81       	ldd	r24, Y+4	; 0x04
     b9e:	88 2f       	mov	r24, r24
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	28 2b       	or	r18, r24
     ba4:	39 2b       	or	r19, r25
     ba6:	8a 81       	ldd	r24, Y+2	; 0x02
     ba8:	9b 81       	ldd	r25, Y+3	; 0x03
     baa:	fc 01       	movw	r30, r24
     bac:	31 83       	std	Z+1, r19	; 0x01
     bae:	20 83       	st	Z, r18
	acc[1] = (spiBuffer[3] << 8 | spiBuffer[2]);
     bb0:	8a 81       	ldd	r24, Y+2	; 0x02
     bb2:	9b 81       	ldd	r25, Y+3	; 0x03
     bb4:	02 96       	adiw	r24, 0x02	; 2
     bb6:	2f 81       	ldd	r18, Y+7	; 0x07
     bb8:	22 2f       	mov	r18, r18
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	52 2f       	mov	r21, r18
     bbe:	44 27       	eor	r20, r20
     bc0:	2e 81       	ldd	r18, Y+6	; 0x06
     bc2:	22 2f       	mov	r18, r18
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	24 2b       	or	r18, r20
     bc8:	35 2b       	or	r19, r21
     bca:	fc 01       	movw	r30, r24
     bcc:	31 83       	std	Z+1, r19	; 0x01
     bce:	20 83       	st	Z, r18
	acc[2] = (spiBuffer[5] << 8 | spiBuffer[4]);
     bd0:	8a 81       	ldd	r24, Y+2	; 0x02
     bd2:	9b 81       	ldd	r25, Y+3	; 0x03
     bd4:	04 96       	adiw	r24, 0x04	; 4
     bd6:	29 85       	ldd	r18, Y+9	; 0x09
     bd8:	22 2f       	mov	r18, r18
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	52 2f       	mov	r21, r18
     bde:	44 27       	eor	r20, r20
     be0:	28 85       	ldd	r18, Y+8	; 0x08
     be2:	22 2f       	mov	r18, r18
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	24 2b       	or	r18, r20
     be8:	35 2b       	or	r19, r21
     bea:	fc 01       	movw	r30, r24
     bec:	31 83       	std	Z+1, r19	; 0x01
     bee:	20 83       	st	Z, r18
}
     bf0:	2b 96       	adiw	r28, 0x0b	; 11
     bf2:	0f b6       	in	r0, 0x3f	; 63
     bf4:	f8 94       	cli
     bf6:	de bf       	out	0x3e, r29	; 62
     bf8:	0f be       	out	0x3f, r0	; 63
     bfa:	cd bf       	out	0x3d, r28	; 61
     bfc:	df 91       	pop	r29
     bfe:	cf 91       	pop	r28
     c00:	1f 91       	pop	r17
     c02:	0f 91       	pop	r16
     c04:	08 95       	ret

00000c06 <IMU_read_gyro>:

void IMU_read_gyro(int *gyroBuffer){
     c06:	0f 93       	push	r16
     c08:	1f 93       	push	r17
     c0a:	cf 93       	push	r28
     c0c:	df 93       	push	r29
     c0e:	cd b7       	in	r28, 0x3d	; 61
     c10:	de b7       	in	r29, 0x3e	; 62
     c12:	2b 97       	sbiw	r28, 0x0b	; 11
     c14:	0f b6       	in	r0, 0x3f	; 63
     c16:	f8 94       	cli
     c18:	de bf       	out	0x3e, r29	; 62
     c1a:	0f be       	out	0x3f, r0	; 63
     c1c:	cd bf       	out	0x3d, r28	; 61
     c1e:	9b 87       	std	Y+11, r25	; 0x0b
     c20:	8a 87       	std	Y+10, r24	; 0x0a
	// char sendingRequest[27] = "Now sending request to IMU\n";
	// char readingFromSPDR[18] = "Reading from SPDR\n";

	char spiBuffer[6];
	int *ang_rate = gyroBuffer;
     c22:	8a 85       	ldd	r24, Y+10	; 0x0a
     c24:	9b 85       	ldd	r25, Y+11	; 0x0b
     c26:	9b 83       	std	Y+3, r25	; 0x03
     c28:	8a 83       	std	Y+2, r24	; 0x02

	// Select the IMU as an SPI Slave

	SPI_Initiate_Transmission();
     c2a:	85 e2       	ldi	r24, 0x25	; 37
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	25 e2       	ldi	r18, 0x25	; 37
     c30:	30 e0       	ldi	r19, 0x00	; 0
     c32:	f9 01       	movw	r30, r18
     c34:	20 81       	ld	r18, Z
     c36:	2b 7f       	andi	r18, 0xFB	; 251
     c38:	fc 01       	movw	r30, r24
     c3a:	20 83       	st	Z, r18


	// Send "read from acceleration output register" signal
	SPI_MasterTransmit( READ | OUT_X_G );
     c3c:	88 e9       	ldi	r24, 0x98	; 152
     c3e:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <SPI_MasterTransmit>
	for (unsigned char i = 0; i < 6; i++){
     c42:	19 82       	std	Y+1, r1	; 0x01
     c44:	10 c0       	rjmp	.+32     	; 0xc66 <IMU_read_gyro+0x60>
			spiBuffer[i] = SPI_MasterTransmit(0x00);
     c46:	89 81       	ldd	r24, Y+1	; 0x01
     c48:	08 2f       	mov	r16, r24
     c4a:	10 e0       	ldi	r17, 0x00	; 0
     c4c:	80 e0       	ldi	r24, 0x00	; 0
     c4e:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <SPI_MasterTransmit>
     c52:	28 2f       	mov	r18, r24
     c54:	ce 01       	movw	r24, r28
     c56:	04 96       	adiw	r24, 0x04	; 4
     c58:	80 0f       	add	r24, r16
     c5a:	91 1f       	adc	r25, r17
     c5c:	fc 01       	movw	r30, r24
     c5e:	20 83       	st	Z, r18
	SPI_Initiate_Transmission();


	// Send "read from acceleration output register" signal
	SPI_MasterTransmit( READ | OUT_X_G );
	for (unsigned char i = 0; i < 6; i++){
     c60:	89 81       	ldd	r24, Y+1	; 0x01
     c62:	8f 5f       	subi	r24, 0xFF	; 255
     c64:	89 83       	std	Y+1, r24	; 0x01
     c66:	89 81       	ldd	r24, Y+1	; 0x01
     c68:	86 30       	cpi	r24, 0x06	; 6
     c6a:	68 f3       	brcs	.-38     	; 0xc46 <IMU_read_gyro+0x40>
			spiBuffer[i] = SPI_MasterTransmit(0x00);
	}
	SPI_End_Transmission();
     c6c:	85 e2       	ldi	r24, 0x25	; 37
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	25 e2       	ldi	r18, 0x25	; 37
     c72:	30 e0       	ldi	r19, 0x00	; 0
     c74:	f9 01       	movw	r30, r18
     c76:	20 81       	ld	r18, Z
     c78:	24 60       	ori	r18, 0x04	; 4
     c7a:	fc 01       	movw	r30, r24
     c7c:	20 83       	st	Z, r18

	ang_rate[0] = (spiBuffer[1] << 8 | spiBuffer[0]);
     c7e:	8d 81       	ldd	r24, Y+5	; 0x05
     c80:	88 2f       	mov	r24, r24
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	38 2f       	mov	r19, r24
     c86:	22 27       	eor	r18, r18
     c88:	8c 81       	ldd	r24, Y+4	; 0x04
     c8a:	88 2f       	mov	r24, r24
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	28 2b       	or	r18, r24
     c90:	39 2b       	or	r19, r25
     c92:	8a 81       	ldd	r24, Y+2	; 0x02
     c94:	9b 81       	ldd	r25, Y+3	; 0x03
     c96:	fc 01       	movw	r30, r24
     c98:	31 83       	std	Z+1, r19	; 0x01
     c9a:	20 83       	st	Z, r18
	ang_rate[1] = (spiBuffer[3] << 8 | spiBuffer[2]);
     c9c:	8a 81       	ldd	r24, Y+2	; 0x02
     c9e:	9b 81       	ldd	r25, Y+3	; 0x03
     ca0:	02 96       	adiw	r24, 0x02	; 2
     ca2:	2f 81       	ldd	r18, Y+7	; 0x07
     ca4:	22 2f       	mov	r18, r18
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	52 2f       	mov	r21, r18
     caa:	44 27       	eor	r20, r20
     cac:	2e 81       	ldd	r18, Y+6	; 0x06
     cae:	22 2f       	mov	r18, r18
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	24 2b       	or	r18, r20
     cb4:	35 2b       	or	r19, r21
     cb6:	fc 01       	movw	r30, r24
     cb8:	31 83       	std	Z+1, r19	; 0x01
     cba:	20 83       	st	Z, r18
	ang_rate[2] = (spiBuffer[5] << 8 | spiBuffer[4]);
     cbc:	8a 81       	ldd	r24, Y+2	; 0x02
     cbe:	9b 81       	ldd	r25, Y+3	; 0x03
     cc0:	04 96       	adiw	r24, 0x04	; 4
     cc2:	29 85       	ldd	r18, Y+9	; 0x09
     cc4:	22 2f       	mov	r18, r18
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	52 2f       	mov	r21, r18
     cca:	44 27       	eor	r20, r20
     ccc:	28 85       	ldd	r18, Y+8	; 0x08
     cce:	22 2f       	mov	r18, r18
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	24 2b       	or	r18, r20
     cd4:	35 2b       	or	r19, r21
     cd6:	fc 01       	movw	r30, r24
     cd8:	31 83       	std	Z+1, r19	; 0x01
     cda:	20 83       	st	Z, r18
}
     cdc:	2b 96       	adiw	r28, 0x0b	; 11
     cde:	0f b6       	in	r0, 0x3f	; 63
     ce0:	f8 94       	cli
     ce2:	de bf       	out	0x3e, r29	; 62
     ce4:	0f be       	out	0x3f, r0	; 63
     ce6:	cd bf       	out	0x3d, r28	; 61
     ce8:	df 91       	pop	r29
     cea:	cf 91       	pop	r28
     cec:	1f 91       	pop	r17
     cee:	0f 91       	pop	r16
     cf0:	08 95       	ret

00000cf2 <whoami>:



char whoami(void){
     cf2:	cf 93       	push	r28
     cf4:	df 93       	push	r29
     cf6:	1f 92       	push	r1
     cf8:	cd b7       	in	r28, 0x3d	; 61
     cfa:	de b7       	in	r29, 0x3e	; 62
	char buff;
	SPI_Initiate_Transmission();
     cfc:	85 e2       	ldi	r24, 0x25	; 37
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	25 e2       	ldi	r18, 0x25	; 37
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	f9 01       	movw	r30, r18
     d06:	20 81       	ld	r18, Z
     d08:	2b 7f       	andi	r18, 0xFB	; 251
     d0a:	fc 01       	movw	r30, r24
     d0c:	20 83       	st	Z, r18
	SPI_MasterTransmit( READ | WHO_AM_I );	// Request Identification
     d0e:	8f e8       	ldi	r24, 0x8F	; 143
     d10:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <SPI_MasterTransmit>
	buff = SPI_MasterTransmit(0x00);	// Store Identification
     d14:	80 e0       	ldi	r24, 0x00	; 0
     d16:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <SPI_MasterTransmit>
     d1a:	89 83       	std	Y+1, r24	; 0x01
	SPI_End_Transmission();
     d1c:	85 e2       	ldi	r24, 0x25	; 37
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	25 e2       	ldi	r18, 0x25	; 37
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	f9 01       	movw	r30, r18
     d26:	20 81       	ld	r18, Z
     d28:	24 60       	ori	r18, 0x04	; 4
     d2a:	fc 01       	movw	r30, r24
     d2c:	20 83       	st	Z, r18

	return buff;
     d2e:	89 81       	ldd	r24, Y+1	; 0x01
}
     d30:	0f 90       	pop	r0
     d32:	df 91       	pop	r29
     d34:	cf 91       	pop	r28
     d36:	08 95       	ret

00000d38 <__vector_15>:

ISR(TIMER0_COMPB_vect){
     d38:	1f 92       	push	r1
     d3a:	0f 92       	push	r0
     d3c:	00 90 5f 00 	lds	r0, 0x005F
     d40:	0f 92       	push	r0
     d42:	11 24       	eor	r1, r1
     d44:	2f 93       	push	r18
     d46:	3f 93       	push	r19
     d48:	8f 93       	push	r24
     d4a:	9f 93       	push	r25
     d4c:	ef 93       	push	r30
     d4e:	ff 93       	push	r31
     d50:	cf 93       	push	r28
     d52:	df 93       	push	r29
     d54:	cd b7       	in	r28, 0x3d	; 61
     d56:	de b7       	in	r29, 0x3e	; 62
	PORTD ^= ( 1 << PD3 );
     d58:	8b e2       	ldi	r24, 0x2B	; 43
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	2b e2       	ldi	r18, 0x2B	; 43
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	f9 01       	movw	r30, r18
     d62:	30 81       	ld	r19, Z
     d64:	28 e0       	ldi	r18, 0x08	; 8
     d66:	23 27       	eor	r18, r19
     d68:	fc 01       	movw	r30, r24
     d6a:	20 83       	st	Z, r18
//
//	if (debounceCounter > 49){
//		calibrationFlag = 1;
//		debounceCounter = 0;
//	}
}
     d6c:	df 91       	pop	r29
     d6e:	cf 91       	pop	r28
     d70:	ff 91       	pop	r31
     d72:	ef 91       	pop	r30
     d74:	9f 91       	pop	r25
     d76:	8f 91       	pop	r24
     d78:	3f 91       	pop	r19
     d7a:	2f 91       	pop	r18
     d7c:	0f 90       	pop	r0
     d7e:	00 92 5f 00 	sts	0x005F, r0
     d82:	0f 90       	pop	r0
     d84:	1f 90       	pop	r1
     d86:	18 95       	reti

00000d88 <usart_putchar_printf>:
#include <util/delay.h>

#define BAUD 9600

//USART function for outputting floats to stdout
int usart_putchar_printf(char var, FILE *stream){
     d88:	cf 93       	push	r28
     d8a:	df 93       	push	r29
     d8c:	00 d0       	rcall	.+0      	; 0xd8e <usart_putchar_printf+0x6>
     d8e:	1f 92       	push	r1
     d90:	cd b7       	in	r28, 0x3d	; 61
     d92:	de b7       	in	r29, 0x3e	; 62
     d94:	89 83       	std	Y+1, r24	; 0x01
     d96:	7b 83       	std	Y+3, r23	; 0x03
     d98:	6a 83       	std	Y+2, r22	; 0x02
	if(var == 'n'){USART_Transmit('\r');}
     d9a:	89 81       	ldd	r24, Y+1	; 0x01
     d9c:	8e 36       	cpi	r24, 0x6E	; 110
     d9e:	19 f4       	brne	.+6      	; 0xda6 <usart_putchar_printf+0x1e>
     da0:	8d e0       	ldi	r24, 0x0D	; 13
     da2:	0e 94 b2 08 	call	0x1164	; 0x1164 <USART_Transmit>
	USART_Transmit(var);
     da6:	89 81       	ldd	r24, Y+1	; 0x01
     da8:	0e 94 b2 08 	call	0x1164	; 0x1164 <USART_Transmit>
	return 0;
     dac:	80 e0       	ldi	r24, 0x00	; 0
     dae:	90 e0       	ldi	r25, 0x00	; 0
}
     db0:	0f 90       	pop	r0
     db2:	0f 90       	pop	r0
     db4:	0f 90       	pop	r0
     db6:	df 91       	pop	r29
     db8:	cf 91       	pop	r28
     dba:	08 95       	ret

00000dbc <main>:

// OSTREAM to use for floats
static FILE mystdout = FDEV_SETUP_STREAM(usart_putchar_printf, NULL, _FDEV_SETUP_WRITE);


int main(){
     dbc:	cf 93       	push	r28
     dbe:	df 93       	push	r29
     dc0:	cd b7       	in	r28, 0x3d	; 61
     dc2:	de b7       	in	r29, 0x3e	; 62
     dc4:	6c 97       	sbiw	r28, 0x1c	; 28
     dc6:	0f b6       	in	r0, 0x3f	; 63
     dc8:	f8 94       	cli
     dca:	de bf       	out	0x3e, r29	; 62
     dcc:	0f be       	out	0x3f, r0	; 63
     dce:	cd bf       	out	0x3d, r28	; 61
	stdout = &mystdout;
     dd0:	82 e0       	ldi	r24, 0x02	; 2
     dd2:	91 e0       	ldi	r25, 0x01	; 1
     dd4:	90 93 06 02 	sts	0x0206, r25
     dd8:	80 93 05 02 	sts	0x0205, r24
	asm("sei");
     ddc:	78 94       	sei
	USART_init(BAUD);
     dde:	80 e8       	ldi	r24, 0x80	; 128
     de0:	95 e2       	ldi	r25, 0x25	; 37
     de2:	0e 94 cc 08 	call	0x1198	; 0x1198 <USART_init>
	IMU_init();
     de6:	0e 94 53 00 	call	0xa6	; 0xa6 <IMU_init>
	motorInit(right,3);	// Pin 5
     dea:	63 e0       	ldi	r22, 0x03	; 3
     dec:	85 e0       	ldi	r24, 0x05	; 5
     dee:	0e 94 b1 07 	call	0xf62	; 0xf62 <motorInit>
	motorInit(left,4);	// Pin 6
     df2:	64 e0       	ldi	r22, 0x04	; 4
     df4:	86 e0       	ldi	r24, 0x06	; 6
     df6:	0e 94 b1 07 	call	0xf62	; 0xf62 <motorInit>

	int acc_data[3];
	int angularRate[3];
	float acc_res = 4.0/65536.0;
     dfa:	80 e0       	ldi	r24, 0x00	; 0
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	a0 e8       	ldi	r26, 0x80	; 128
     e00:	b8 e3       	ldi	r27, 0x38	; 56
     e02:	8d 83       	std	Y+5, r24	; 0x05
     e04:	9e 83       	std	Y+6, r25	; 0x06
     e06:	af 83       	std	Y+7, r26	; 0x07
     e08:	b8 87       	std	Y+8, r27	; 0x08
	float gyro_res = 245.0/32768.0;
     e0a:	80 e0       	ldi	r24, 0x00	; 0
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	a5 ef       	ldi	r26, 0xF5	; 245
     e10:	bb e3       	ldi	r27, 0x3B	; 59
     e12:	89 87       	std	Y+9, r24	; 0x09
     e14:	9a 87       	std	Y+10, r25	; 0x0a
     e16:	ab 87       	std	Y+11, r26	; 0x0b
     e18:	bc 87       	std	Y+12, r27	; 0x0c
	float samplingTime = 0.02520;	// Time between reads, as measured on a scope
     e1a:	8b e3       	ldi	r24, 0x3B	; 59
     e1c:	90 e7       	ldi	r25, 0x70	; 112
     e1e:	ae ec       	ldi	r26, 0xCE	; 206
     e20:	bc e3       	ldi	r27, 0x3C	; 60
     e22:	8d 87       	std	Y+13, r24	; 0x0d
     e24:	9e 87       	std	Y+14, r25	; 0x0e
     e26:	af 87       	std	Y+15, r26	; 0x0f
     e28:	b8 8b       	std	Y+16, r27	; 0x10

	//setMotorSpeed(50,right);
	//setMotorSpeed(50,left);

	DDRD |= ( 1 << PD3) ;
     e2a:	8a e2       	ldi	r24, 0x2A	; 42
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	2a e2       	ldi	r18, 0x2A	; 42
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	f9 01       	movw	r30, r18
     e34:	20 81       	ld	r18, Z
     e36:	28 60       	ori	r18, 0x08	; 8
     e38:	fc 01       	movw	r30, r24
     e3a:	20 83       	st	Z, r18
	float angularPos = 0;
     e3c:	19 82       	std	Y+1, r1	; 0x01
     e3e:	1a 82       	std	Y+2, r1	; 0x02
     e40:	1b 82       	std	Y+3, r1	; 0x03
     e42:	1c 82       	std	Y+4, r1	; 0x04
	while(1){
		if(dataReceived){
     e44:	80 91 d8 01 	lds	r24, 0x01D8
     e48:	88 23       	and	r24, r24
     e4a:	09 f4       	brne	.+2      	; 0xe4e <main+0x92>
     e4c:	89 c0       	rjmp	.+274    	; 0xf60 <main+0x1a4>
			if(calibrationFlag){calibrateIMU();}
     e4e:	80 91 d9 01 	lds	r24, 0x01D9
     e52:	88 23       	and	r24, r24
     e54:	11 f0       	breq	.+4      	; 0xe5a <main+0x9e>
     e56:	0e 94 35 01 	call	0x26a	; 0x26a <calibrateIMU>

			//readAcc(acc_data,10);
			readGyro(angularRate,10);
     e5a:	ce 01       	movw	r24, r28
     e5c:	47 96       	adiw	r24, 0x17	; 23
     e5e:	6a e0       	ldi	r22, 0x0A	; 10
     e60:	0e 94 05 04 	call	0x80a	; 0x80a <readGyro>
			angularPos = angularPos + (float)angularRate[1]*gyro_res*samplingTime;
     e64:	89 8d       	ldd	r24, Y+25	; 0x19
     e66:	9a 8d       	ldd	r25, Y+26	; 0x1a
     e68:	aa 27       	eor	r26, r26
     e6a:	97 fd       	sbrc	r25, 7
     e6c:	a0 95       	com	r26
     e6e:	ba 2f       	mov	r27, r26
     e70:	bc 01       	movw	r22, r24
     e72:	cd 01       	movw	r24, r26
     e74:	0e 94 33 10 	call	0x2066	; 0x2066 <__floatsisf>
     e78:	dc 01       	movw	r26, r24
     e7a:	cb 01       	movw	r24, r22
     e7c:	29 85       	ldd	r18, Y+9	; 0x09
     e7e:	3a 85       	ldd	r19, Y+10	; 0x0a
     e80:	4b 85       	ldd	r20, Y+11	; 0x0b
     e82:	5c 85       	ldd	r21, Y+12	; 0x0c
     e84:	bc 01       	movw	r22, r24
     e86:	cd 01       	movw	r24, r26
     e88:	0e 94 e7 10 	call	0x21ce	; 0x21ce <__mulsf3>
     e8c:	dc 01       	movw	r26, r24
     e8e:	cb 01       	movw	r24, r22
     e90:	2d 85       	ldd	r18, Y+13	; 0x0d
     e92:	3e 85       	ldd	r19, Y+14	; 0x0e
     e94:	4f 85       	ldd	r20, Y+15	; 0x0f
     e96:	58 89       	ldd	r21, Y+16	; 0x10
     e98:	bc 01       	movw	r22, r24
     e9a:	cd 01       	movw	r24, r26
     e9c:	0e 94 e7 10 	call	0x21ce	; 0x21ce <__mulsf3>
     ea0:	dc 01       	movw	r26, r24
     ea2:	cb 01       	movw	r24, r22
     ea4:	9c 01       	movw	r18, r24
     ea6:	ad 01       	movw	r20, r26
     ea8:	69 81       	ldd	r22, Y+1	; 0x01
     eaa:	7a 81       	ldd	r23, Y+2	; 0x02
     eac:	8b 81       	ldd	r24, Y+3	; 0x03
     eae:	9c 81       	ldd	r25, Y+4	; 0x04
     eb0:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <__addsf3>
     eb4:	dc 01       	movw	r26, r24
     eb6:	cb 01       	movw	r24, r22
     eb8:	89 83       	std	Y+1, r24	; 0x01
     eba:	9a 83       	std	Y+2, r25	; 0x02
     ebc:	ab 83       	std	Y+3, r26	; 0x03
     ebe:	bc 83       	std	Y+4, r27	; 0x04
			printf("%f", angularPos);
     ec0:	8c 81       	ldd	r24, Y+4	; 0x04
     ec2:	8f 93       	push	r24
     ec4:	8b 81       	ldd	r24, Y+3	; 0x03
     ec6:	8f 93       	push	r24
     ec8:	8a 81       	ldd	r24, Y+2	; 0x02
     eca:	8f 93       	push	r24
     ecc:	89 81       	ldd	r24, Y+1	; 0x01
     ece:	8f 93       	push	r24
     ed0:	8e e2       	ldi	r24, 0x2E	; 46
     ed2:	91 e0       	ldi	r25, 0x01	; 1
     ed4:	89 2f       	mov	r24, r25
     ed6:	8f 93       	push	r24
     ed8:	8e e2       	ldi	r24, 0x2E	; 46
     eda:	91 e0       	ldi	r25, 0x01	; 1
     edc:	8f 93       	push	r24
     ede:	0e 94 4a 11 	call	0x2294	; 0x2294 <printf>
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	0f 90       	pop	r0
			USART_Transmit(0x0A);
     eee:	8a e0       	ldi	r24, 0x0A	; 10
     ef0:	0e 94 b2 08 	call	0x1164	; 0x1164 <USART_Transmit>
			if(angularPos < -0.5){
     ef4:	20 e0       	ldi	r18, 0x00	; 0
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	40 e0       	ldi	r20, 0x00	; 0
     efa:	5f eb       	ldi	r21, 0xBF	; 191
     efc:	69 81       	ldd	r22, Y+1	; 0x01
     efe:	7a 81       	ldd	r23, Y+2	; 0x02
     f00:	8b 81       	ldd	r24, Y+3	; 0x03
     f02:	9c 81       	ldd	r25, Y+4	; 0x04
     f04:	0e 94 01 10 	call	0x2002	; 0x2002 <__cmpsf2>
     f08:	88 23       	and	r24, r24
     f0a:	74 f4       	brge	.+28     	; 0xf28 <main+0x16c>
				angularPos = -angularPos;
     f0c:	89 81       	ldd	r24, Y+1	; 0x01
     f0e:	9a 81       	ldd	r25, Y+2	; 0x02
     f10:	ab 81       	ldd	r26, Y+3	; 0x03
     f12:	bc 81       	ldd	r27, Y+4	; 0x04
     f14:	b0 58       	subi	r27, 0x80	; 128
     f16:	89 83       	std	Y+1, r24	; 0x01
     f18:	9a 83       	std	Y+2, r25	; 0x02
     f1a:	ab 83       	std	Y+3, r26	; 0x03
     f1c:	bc 83       	std	Y+4, r27	; 0x04
				setMotorDirection(right,cw);
     f1e:	60 e0       	ldi	r22, 0x00	; 0
     f20:	85 e0       	ldi	r24, 0x05	; 5
     f22:	0e 94 2b 08 	call	0x1056	; 0x1056 <setMotorDirection>
     f26:	10 c0       	rjmp	.+32     	; 0xf48 <main+0x18c>
			}
			else if(angularPos > 0.5){
     f28:	20 e0       	ldi	r18, 0x00	; 0
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	40 e0       	ldi	r20, 0x00	; 0
     f2e:	5f e3       	ldi	r21, 0x3F	; 63
     f30:	69 81       	ldd	r22, Y+1	; 0x01
     f32:	7a 81       	ldd	r23, Y+2	; 0x02
     f34:	8b 81       	ldd	r24, Y+3	; 0x03
     f36:	9c 81       	ldd	r25, Y+4	; 0x04
     f38:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <__gesf2>
     f3c:	18 16       	cp	r1, r24
     f3e:	24 f4       	brge	.+8      	; 0xf48 <main+0x18c>
				setMotorDirection(right,ccw);
     f40:	61 e0       	ldi	r22, 0x01	; 1
     f42:	85 e0       	ldi	r24, 0x05	; 5
     f44:	0e 94 2b 08 	call	0x1056	; 0x1056 <setMotorDirection>
			}
			setMotorSpeed((unsigned char)angularPos,right);
     f48:	69 81       	ldd	r22, Y+1	; 0x01
     f4a:	7a 81       	ldd	r23, Y+2	; 0x02
     f4c:	8b 81       	ldd	r24, Y+3	; 0x03
     f4e:	9c 81       	ldd	r25, Y+4	; 0x04
     f50:	0e 94 05 10 	call	0x200a	; 0x200a <__fixunssfsi>
     f54:	dc 01       	movw	r26, r24
     f56:	cb 01       	movw	r24, r22
     f58:	65 e0       	ldi	r22, 0x05	; 5
     f5a:	0e 94 66 08 	call	0x10cc	; 0x10cc <setMotorSpeed>
//			USART_Transmit_dec(timerval_left);
//			USART_Transmit(0x0A);
//			setMotorSpeed((char)(timerval_right),right);
//			setMotorSpeed((char)(timerval_left),left);
		}
	}
     f5e:	72 cf       	rjmp	.-284    	; 0xe44 <main+0x88>
     f60:	71 cf       	rjmp	.-286    	; 0xe44 <main+0x88>

00000f62 <motorInit>:
#include <avr/io.h>

unsigned char clockInitFlag = 0;


void motorInit(char outputPin, char direction){
     f62:	cf 93       	push	r28
     f64:	df 93       	push	r29
     f66:	00 d0       	rcall	.+0      	; 0xf68 <motorInit+0x6>
     f68:	00 d0       	rcall	.+0      	; 0xf6a <motorInit+0x8>
     f6a:	cd b7       	in	r28, 0x3d	; 61
     f6c:	de b7       	in	r29, 0x3e	; 62
     f6e:	8b 83       	std	Y+3, r24	; 0x03
     f70:	6c 83       	std	Y+4, r22	; 0x04
	setMotorSpeed(0,right);
     f72:	65 e0       	ldi	r22, 0x05	; 5
     f74:	80 e0       	ldi	r24, 0x00	; 0
     f76:	0e 94 66 08 	call	0x10cc	; 0x10cc <setMotorSpeed>
	setMotorSpeed(0,left);
     f7a:	66 e0       	ldi	r22, 0x06	; 6
     f7c:	80 e0       	ldi	r24, 0x00	; 0
     f7e:	0e 94 66 08 	call	0x10cc	; 0x10cc <setMotorSpeed>
	unsigned char directionPin = ( 1 << direction );
     f82:	8c 81       	ldd	r24, Y+4	; 0x04
     f84:	28 2f       	mov	r18, r24
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	02 c0       	rjmp	.+4      	; 0xf92 <motorInit+0x30>
     f8e:	88 0f       	add	r24, r24
     f90:	99 1f       	adc	r25, r25
     f92:	2a 95       	dec	r18
     f94:	e2 f7       	brpl	.-8      	; 0xf8e <motorInit+0x2c>
     f96:	89 83       	std	Y+1, r24	; 0x01
	unsigned char motorPin = ( 1 << outputPin);
     f98:	8b 81       	ldd	r24, Y+3	; 0x03
     f9a:	28 2f       	mov	r18, r24
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	02 c0       	rjmp	.+4      	; 0xfa8 <motorInit+0x46>
     fa4:	88 0f       	add	r24, r24
     fa6:	99 1f       	adc	r25, r25
     fa8:	2a 95       	dec	r18
     faa:	e2 f7       	brpl	.-8      	; 0xfa4 <motorInit+0x42>
     fac:	8a 83       	std	Y+2, r24	; 0x02
	DDRD |= ( directionPin | motorPin );
     fae:	8a e2       	ldi	r24, 0x2A	; 42
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	2a e2       	ldi	r18, 0x2A	; 42
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	f9 01       	movw	r30, r18
     fb8:	30 81       	ld	r19, Z
     fba:	49 81       	ldd	r20, Y+1	; 0x01
     fbc:	2a 81       	ldd	r18, Y+2	; 0x02
     fbe:	24 2b       	or	r18, r20
     fc0:	23 2b       	or	r18, r19
     fc2:	fc 01       	movw	r30, r24
     fc4:	20 83       	st	Z, r18
	if (!clockInitFlag){
     fc6:	80 91 87 01 	lds	r24, 0x0187
     fca:	88 23       	and	r24, r24
     fcc:	11 f4       	brne	.+4      	; 0xfd2 <motorInit+0x70>
		clock_init();
     fce:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <clock_init>
	}
}
     fd2:	0f 90       	pop	r0
     fd4:	0f 90       	pop	r0
     fd6:	0f 90       	pop	r0
     fd8:	0f 90       	pop	r0
     fda:	df 91       	pop	r29
     fdc:	cf 91       	pop	r28
     fde:	08 95       	ret

00000fe0 <clock_init>:


void clock_init(){
     fe0:	cf 93       	push	r28
     fe2:	df 93       	push	r29
     fe4:	cd b7       	in	r28, 0x3d	; 61
     fe6:	de b7       	in	r29, 0x3e	; 62
     fe8:	64 97       	sbiw	r28, 0x14	; 20
     fea:	0f b6       	in	r0, 0x3f	; 63
     fec:	f8 94       	cli
     fee:	de bf       	out	0x3e, r29	; 62
     ff0:	0f be       	out	0x3f, r0	; 63
     ff2:	cd bf       	out	0x3d, r28	; 61
	unsigned char message[20] = "Clock init\0";
     ff4:	2c e0       	ldi	r18, 0x0C	; 12
     ff6:	e1 e3       	ldi	r30, 0x31	; 49
     ff8:	f1 e0       	ldi	r31, 0x01	; 1
     ffa:	ce 01       	movw	r24, r28
     ffc:	01 96       	adiw	r24, 0x01	; 1
     ffe:	dc 01       	movw	r26, r24
    1000:	01 90       	ld	r0, Z+
    1002:	0d 92       	st	X+, r0
    1004:	2a 95       	dec	r18
    1006:	e1 f7       	brne	.-8      	; 0x1000 <clock_init+0x20>
    1008:	28 e0       	ldi	r18, 0x08	; 8
    100a:	ce 01       	movw	r24, r28
    100c:	0d 96       	adiw	r24, 0x0d	; 13
    100e:	fc 01       	movw	r30, r24
    1010:	32 2f       	mov	r19, r18
    1012:	11 92       	st	Z+, r1
    1014:	3a 95       	dec	r19
    1016:	e9 f7       	brne	.-6      	; 0x1012 <clock_init+0x32>
	myPrintNL(message,20);
    1018:	64 e1       	ldi	r22, 0x14	; 20
    101a:	ce 01       	movw	r24, r28
    101c:	01 96       	adiw	r24, 0x01	; 1
    101e:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <myPrintNL>
	// fastPWM mode, set OC0A and OC0B on compare match and clear at bottom
	TCCR0A = ( 1 << COM0A1 ) | ( 1 << COM0A0 ) | ( 1 << COM0B1 ) | ( 1 << COM0B0 ) | ( 1 << WGM01 ) | ( 1 << WGM00 );
    1022:	84 e4       	ldi	r24, 0x44	; 68
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	23 ef       	ldi	r18, 0xF3	; 243
    1028:	fc 01       	movw	r30, r24
    102a:	20 83       	st	Z, r18
	// Initialize a timer with no prescaling
	TCCR0B =  ( 1 << CS00 );
    102c:	85 e4       	ldi	r24, 0x45	; 69
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	21 e0       	ldi	r18, 0x01	; 1
    1032:	fc 01       	movw	r30, r24
    1034:	20 83       	st	Z, r18
	// Initialize the counter at 0
	TCNT0 = 0;
    1036:	86 e4       	ldi	r24, 0x46	; 70
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	fc 01       	movw	r30, r24
    103c:	10 82       	st	Z, r1
	/*// Enable Output Compare Match and Overflow interrupts
	TIMSK0 = ( 1 << OCIE0B ) | ( 1 << TOIE0 );
	// Clearing interrupt flags (writing 1 to them => clearing)
	TIFR0 = ( 1 << OCF0B ) | ( 1 << TOV0 );
	*/
	clockInitFlag = 1;
    103e:	81 e0       	ldi	r24, 0x01	; 1
    1040:	80 93 87 01 	sts	0x0187, r24
}
    1044:	64 96       	adiw	r28, 0x14	; 20
    1046:	0f b6       	in	r0, 0x3f	; 63
    1048:	f8 94       	cli
    104a:	de bf       	out	0x3e, r29	; 62
    104c:	0f be       	out	0x3f, r0	; 63
    104e:	cd bf       	out	0x3d, r28	; 61
    1050:	df 91       	pop	r29
    1052:	cf 91       	pop	r28
    1054:	08 95       	ret

00001056 <setMotorDirection>:

void setMotorDirection(enum motorID motor,enum direction spin){
    1056:	cf 93       	push	r28
    1058:	df 93       	push	r29
    105a:	00 d0       	rcall	.+0      	; 0x105c <setMotorDirection+0x6>
    105c:	cd b7       	in	r28, 0x3d	; 61
    105e:	de b7       	in	r29, 0x3e	; 62
    1060:	89 83       	std	Y+1, r24	; 0x01
    1062:	6a 83       	std	Y+2, r22	; 0x02
	if (spin == ccw){
    1064:	8a 81       	ldd	r24, Y+2	; 0x02
    1066:	81 30       	cpi	r24, 0x01	; 1
    1068:	b1 f4       	brne	.+44     	; 0x1096 <setMotorDirection+0x40>
		PORTD |= ( 1 << motor );
    106a:	8b e2       	ldi	r24, 0x2B	; 43
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	2b e2       	ldi	r18, 0x2B	; 43
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	f9 01       	movw	r30, r18
    1074:	20 81       	ld	r18, Z
    1076:	62 2f       	mov	r22, r18
    1078:	29 81       	ldd	r18, Y+1	; 0x01
    107a:	42 2f       	mov	r20, r18
    107c:	50 e0       	ldi	r21, 0x00	; 0
    107e:	21 e0       	ldi	r18, 0x01	; 1
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	04 2e       	mov	r0, r20
    1084:	02 c0       	rjmp	.+4      	; 0x108a <setMotorDirection+0x34>
    1086:	22 0f       	add	r18, r18
    1088:	33 1f       	adc	r19, r19
    108a:	0a 94       	dec	r0
    108c:	e2 f7       	brpl	.-8      	; 0x1086 <setMotorDirection+0x30>
    108e:	26 2b       	or	r18, r22
    1090:	fc 01       	movw	r30, r24
    1092:	20 83       	st	Z, r18
    1094:	16 c0       	rjmp	.+44     	; 0x10c2 <setMotorDirection+0x6c>
	}
	else{
		PORTD &= ~( 1 << motor );
    1096:	8b e2       	ldi	r24, 0x2B	; 43
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	2b e2       	ldi	r18, 0x2B	; 43
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	f9 01       	movw	r30, r18
    10a0:	20 81       	ld	r18, Z
    10a2:	62 2f       	mov	r22, r18
    10a4:	29 81       	ldd	r18, Y+1	; 0x01
    10a6:	42 2f       	mov	r20, r18
    10a8:	50 e0       	ldi	r21, 0x00	; 0
    10aa:	21 e0       	ldi	r18, 0x01	; 1
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	04 2e       	mov	r0, r20
    10b0:	02 c0       	rjmp	.+4      	; 0x10b6 <setMotorDirection+0x60>
    10b2:	22 0f       	add	r18, r18
    10b4:	33 1f       	adc	r19, r19
    10b6:	0a 94       	dec	r0
    10b8:	e2 f7       	brpl	.-8      	; 0x10b2 <setMotorDirection+0x5c>
    10ba:	20 95       	com	r18
    10bc:	26 23       	and	r18, r22
    10be:	fc 01       	movw	r30, r24
    10c0:	20 83       	st	Z, r18
	}
}
    10c2:	0f 90       	pop	r0
    10c4:	0f 90       	pop	r0
    10c6:	df 91       	pop	r29
    10c8:	cf 91       	pop	r28
    10ca:	08 95       	ret

000010cc <setMotorSpeed>:

void setMotorSpeed(unsigned char intensity, enum motorID motor){
    10cc:	cf 93       	push	r28
    10ce:	df 93       	push	r29
    10d0:	00 d0       	rcall	.+0      	; 0x10d2 <setMotorSpeed+0x6>
    10d2:	00 d0       	rcall	.+0      	; 0x10d4 <setMotorSpeed+0x8>
    10d4:	00 d0       	rcall	.+0      	; 0x10d6 <setMotorSpeed+0xa>
    10d6:	cd b7       	in	r28, 0x3d	; 61
    10d8:	de b7       	in	r29, 0x3e	; 62
    10da:	89 83       	std	Y+1, r24	; 0x01
    10dc:	6a 83       	std	Y+2, r22	; 0x02
	//unsigned char message[20] = "Set speed\0";
	//myPrintNL(message,20);
	if (intensity > 100){intensity = 100;};
    10de:	89 81       	ldd	r24, Y+1	; 0x01
    10e0:	85 36       	cpi	r24, 0x65	; 101
    10e2:	10 f0       	brcs	.+4      	; 0x10e8 <setMotorSpeed+0x1c>
    10e4:	84 e6       	ldi	r24, 0x64	; 100
    10e6:	89 83       	std	Y+1, r24	; 0x01
	if (intensity < 0){intensity = 0;};
	if (motor == right){
    10e8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ea:	85 30       	cpi	r24, 0x05	; 5
    10ec:	c1 f4       	brne	.+48     	; 0x111e <setMotorSpeed+0x52>
		OCR0B = ((100 - intensity)*255)/100;
    10ee:	28 e4       	ldi	r18, 0x48	; 72
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	89 81       	ldd	r24, Y+1	; 0x01
    10f4:	88 2f       	mov	r24, r24
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	44 e6       	ldi	r20, 0x64	; 100
    10fa:	50 e0       	ldi	r21, 0x00	; 0
    10fc:	48 1b       	sub	r20, r24
    10fe:	59 0b       	sbc	r21, r25
    1100:	6f ef       	ldi	r22, 0xFF	; 255
    1102:	64 9f       	mul	r22, r20
    1104:	c0 01       	movw	r24, r0
    1106:	65 9f       	mul	r22, r21
    1108:	90 0d       	add	r25, r0
    110a:	11 24       	eor	r1, r1
    110c:	44 e6       	ldi	r20, 0x64	; 100
    110e:	50 e0       	ldi	r21, 0x00	; 0
    1110:	ba 01       	movw	r22, r20
    1112:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <__divmodhi4>
    1116:	cb 01       	movw	r24, r22
    1118:	f9 01       	movw	r30, r18
    111a:	80 83       	st	Z, r24
    111c:	1a c0       	rjmp	.+52     	; 0x1152 <setMotorSpeed+0x86>
	}
	else if (motor == left){
    111e:	8a 81       	ldd	r24, Y+2	; 0x02
    1120:	86 30       	cpi	r24, 0x06	; 6
    1122:	b9 f4       	brne	.+46     	; 0x1152 <setMotorSpeed+0x86>
		OCR0A = ((100 - intensity)*255)/100;
    1124:	27 e4       	ldi	r18, 0x47	; 71
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	89 81       	ldd	r24, Y+1	; 0x01
    112a:	88 2f       	mov	r24, r24
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	44 e6       	ldi	r20, 0x64	; 100
    1130:	50 e0       	ldi	r21, 0x00	; 0
    1132:	48 1b       	sub	r20, r24
    1134:	59 0b       	sbc	r21, r25
    1136:	6f ef       	ldi	r22, 0xFF	; 255
    1138:	64 9f       	mul	r22, r20
    113a:	c0 01       	movw	r24, r0
    113c:	65 9f       	mul	r22, r21
    113e:	90 0d       	add	r25, r0
    1140:	11 24       	eor	r1, r1
    1142:	44 e6       	ldi	r20, 0x64	; 100
    1144:	50 e0       	ldi	r21, 0x00	; 0
    1146:	ba 01       	movw	r22, r20
    1148:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <__divmodhi4>
    114c:	cb 01       	movw	r24, r22
    114e:	f9 01       	movw	r30, r18
    1150:	80 83       	st	Z, r24
	}

}
    1152:	26 96       	adiw	r28, 0x06	; 6
    1154:	0f b6       	in	r0, 0x3f	; 63
    1156:	f8 94       	cli
    1158:	de bf       	out	0x3e, r29	; 62
    115a:	0f be       	out	0x3f, r0	; 63
    115c:	cd bf       	out	0x3d, r28	; 61
    115e:	df 91       	pop	r29
    1160:	cf 91       	pop	r28
    1162:	08 95       	ret

00001164 <USART_Transmit>:
#define convert2ASCII_hex(byte){	\
	if(byte <= 0x09){byte += 0x30;}			\
	else if(byte <= 0x0F){byte += 0x37;};	\
}

void USART_Transmit(unsigned char data){
    1164:	cf 93       	push	r28
    1166:	df 93       	push	r29
    1168:	1f 92       	push	r1
    116a:	cd b7       	in	r28, 0x3d	; 61
    116c:	de b7       	in	r29, 0x3e	; 62
    116e:	89 83       	std	Y+1, r24	; 0x01
	/* While the transmit buffer is not empty (UDRE0 flag in UCSR0A)	*/
	while( !(UCSR0A & (1 << UDRE0)) ){};
    1170:	00 00       	nop
    1172:	80 ec       	ldi	r24, 0xC0	; 192
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	fc 01       	movw	r30, r24
    1178:	80 81       	ld	r24, Z
    117a:	88 2f       	mov	r24, r24
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	80 72       	andi	r24, 0x20	; 32
    1180:	99 27       	eor	r25, r25
    1182:	00 97       	sbiw	r24, 0x00	; 0
    1184:	b1 f3       	breq	.-20     	; 0x1172 <USART_Transmit+0xe>
	/* Write the data into the USART Data I/O register	*/
	UDR0 = data;
    1186:	86 ec       	ldi	r24, 0xC6	; 198
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	29 81       	ldd	r18, Y+1	; 0x01
    118c:	fc 01       	movw	r30, r24
    118e:	20 83       	st	Z, r18
}
    1190:	0f 90       	pop	r0
    1192:	df 91       	pop	r29
    1194:	cf 91       	pop	r28
    1196:	08 95       	ret

00001198 <USART_init>:


void USART_init(unsigned int br){
    1198:	cf 93       	push	r28
    119a:	df 93       	push	r29
    119c:	cd b7       	in	r28, 0x3d	; 61
    119e:	de b7       	in	r29, 0x3e	; 62
    11a0:	28 97       	sbiw	r28, 0x08	; 8
    11a2:	0f b6       	in	r0, 0x3f	; 63
    11a4:	f8 94       	cli
    11a6:	de bf       	out	0x3e, r29	; 62
    11a8:	0f be       	out	0x3f, r0	; 63
    11aa:	cd bf       	out	0x3d, r28	; 61
    11ac:	9c 83       	std	Y+4, r25	; 0x04
    11ae:	8b 83       	std	Y+3, r24	; 0x03
	unsigned int ubrr = 16000000/16/br - 1;
    11b0:	8b 81       	ldd	r24, Y+3	; 0x03
    11b2:	9c 81       	ldd	r25, Y+4	; 0x04
    11b4:	9c 01       	movw	r18, r24
    11b6:	40 e0       	ldi	r20, 0x00	; 0
    11b8:	50 e0       	ldi	r21, 0x00	; 0
    11ba:	80 e4       	ldi	r24, 0x40	; 64
    11bc:	92 e4       	ldi	r25, 0x42	; 66
    11be:	af e0       	ldi	r26, 0x0F	; 15
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	bc 01       	movw	r22, r24
    11c4:	cd 01       	movw	r24, r26
    11c6:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <__divmodsi4>
    11ca:	da 01       	movw	r26, r20
    11cc:	c9 01       	movw	r24, r18
    11ce:	01 97       	sbiw	r24, 0x01	; 1
    11d0:	9a 83       	std	Y+2, r25	; 0x02
    11d2:	89 83       	std	Y+1, r24	; 0x01
	// Settin Baud Rate to br
	UBRR0H = (unsigned char) (ubrr >> 8);
    11d4:	85 ec       	ldi	r24, 0xC5	; 197
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	29 81       	ldd	r18, Y+1	; 0x01
    11da:	3a 81       	ldd	r19, Y+2	; 0x02
    11dc:	23 2f       	mov	r18, r19
    11de:	33 27       	eor	r19, r19
    11e0:	fc 01       	movw	r30, r24
    11e2:	20 83       	st	Z, r18
	UBRR0L = (unsigned char) ubrr;
    11e4:	84 ec       	ldi	r24, 0xC4	; 196
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	29 81       	ldd	r18, Y+1	; 0x01
    11ea:	fc 01       	movw	r30, r24
    11ec:	20 83       	st	Z, r18

	// Enabling Receive (RXEN0) and transmit (TXEN0) and
	// the RX Complete Interrupt in the USART
	//Control and Status Register 0B
	UCSR0B = (1 << RXEN0) | ( 1 << TXEN0 ) | ( 1 << RXCIE0);
    11ee:	81 ec       	ldi	r24, 0xC1	; 193
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	28 e9       	ldi	r18, 0x98	; 152
    11f4:	fc 01       	movw	r30, r24
    11f6:	20 83       	st	Z, r18

	// Setting frame format:
			// 2 stop bits		8 bit
	UCSR0C = (1 << USBS0) | (3 << UCSZ00);
    11f8:	82 ec       	ldi	r24, 0xC2	; 194
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	2e e0       	ldi	r18, 0x0E	; 14
    11fe:	fc 01       	movw	r30, r24
    1200:	20 83       	st	Z, r18
}
    1202:	28 96       	adiw	r28, 0x08	; 8
    1204:	0f b6       	in	r0, 0x3f	; 63
    1206:	f8 94       	cli
    1208:	de bf       	out	0x3e, r29	; 62
    120a:	0f be       	out	0x3f, r0	; 63
    120c:	cd bf       	out	0x3d, r28	; 61
    120e:	df 91       	pop	r29
    1210:	cf 91       	pop	r28
    1212:	08 95       	ret

00001214 <USART_Transmit_32_hex>:


void USART_Transmit_32_hex(long data32bit){
    1214:	cf 93       	push	r28
    1216:	df 93       	push	r29
    1218:	cd b7       	in	r28, 0x3d	; 61
    121a:	de b7       	in	r29, 0x3e	; 62
    121c:	60 97       	sbiw	r28, 0x10	; 16
    121e:	0f b6       	in	r0, 0x3f	; 63
    1220:	f8 94       	cli
    1222:	de bf       	out	0x3e, r29	; 62
    1224:	0f be       	out	0x3f, r0	; 63
    1226:	cd bf       	out	0x3d, r28	; 61
    1228:	6d 87       	std	Y+13, r22	; 0x0d
    122a:	7e 87       	std	Y+14, r23	; 0x0e
    122c:	8f 87       	std	Y+15, r24	; 0x0f
    122e:	98 8b       	std	Y+16, r25	; 0x10
	unsigned char N[8];
	unsigned char *ptr = &N[0];
    1230:	ce 01       	movw	r24, r28
    1232:	05 96       	adiw	r24, 0x05	; 5
    1234:	9a 83       	std	Y+2, r25	; 0x02
    1236:	89 83       	std	Y+1, r24	; 0x01
	for (uint8_t i = 0; i < 8; i++){
    1238:	1b 82       	std	Y+3, r1	; 0x03
    123a:	21 c0       	rjmp	.+66     	; 0x127e <USART_Transmit_32_hex+0x6a>
		N[i] = ((data32bit >> 4*i) & 0xF);
    123c:	8b 81       	ldd	r24, Y+3	; 0x03
    123e:	28 2f       	mov	r18, r24
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	8b 81       	ldd	r24, Y+3	; 0x03
    1244:	88 2f       	mov	r24, r24
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	ac 01       	movw	r20, r24
    124a:	44 0f       	add	r20, r20
    124c:	55 1f       	adc	r21, r21
    124e:	44 0f       	add	r20, r20
    1250:	55 1f       	adc	r21, r21
    1252:	8d 85       	ldd	r24, Y+13	; 0x0d
    1254:	9e 85       	ldd	r25, Y+14	; 0x0e
    1256:	af 85       	ldd	r26, Y+15	; 0x0f
    1258:	b8 89       	ldd	r27, Y+16	; 0x10
    125a:	04 c0       	rjmp	.+8      	; 0x1264 <USART_Transmit_32_hex+0x50>
    125c:	b5 95       	asr	r27
    125e:	a7 95       	ror	r26
    1260:	97 95       	ror	r25
    1262:	87 95       	ror	r24
    1264:	4a 95       	dec	r20
    1266:	d2 f7       	brpl	.-12     	; 0x125c <USART_Transmit_32_hex+0x48>
    1268:	48 2f       	mov	r20, r24
    126a:	4f 70       	andi	r20, 0x0F	; 15
    126c:	ce 01       	movw	r24, r28
    126e:	05 96       	adiw	r24, 0x05	; 5
    1270:	82 0f       	add	r24, r18
    1272:	93 1f       	adc	r25, r19
    1274:	fc 01       	movw	r30, r24
    1276:	40 83       	st	Z, r20


void USART_Transmit_32_hex(long data32bit){
	unsigned char N[8];
	unsigned char *ptr = &N[0];
	for (uint8_t i = 0; i < 8; i++){
    1278:	8b 81       	ldd	r24, Y+3	; 0x03
    127a:	8f 5f       	subi	r24, 0xFF	; 255
    127c:	8b 83       	std	Y+3, r24	; 0x03
    127e:	8b 81       	ldd	r24, Y+3	; 0x03
    1280:	88 30       	cpi	r24, 0x08	; 8
    1282:	e0 f2       	brcs	.-72     	; 0x123c <USART_Transmit_32_hex+0x28>
		N[i] = ((data32bit >> 4*i) & 0xF);
	}
	for (unsigned char i = 0; i < 8; i++){
    1284:	1c 82       	std	Y+4, r1	; 0x04
    1286:	36 c0       	rjmp	.+108    	; 0x12f4 <USART_Transmit_32_hex+0xe0>
		convert2ASCII_hex(*(ptr+7))	// The MSN is last in the memory so we loop backwards
    1288:	89 81       	ldd	r24, Y+1	; 0x01
    128a:	9a 81       	ldd	r25, Y+2	; 0x02
    128c:	07 96       	adiw	r24, 0x07	; 7
    128e:	fc 01       	movw	r30, r24
    1290:	80 81       	ld	r24, Z
    1292:	8a 30       	cpi	r24, 0x0A	; 10
    1294:	68 f4       	brcc	.+26     	; 0x12b0 <USART_Transmit_32_hex+0x9c>
    1296:	89 81       	ldd	r24, Y+1	; 0x01
    1298:	9a 81       	ldd	r25, Y+2	; 0x02
    129a:	07 96       	adiw	r24, 0x07	; 7
    129c:	29 81       	ldd	r18, Y+1	; 0x01
    129e:	3a 81       	ldd	r19, Y+2	; 0x02
    12a0:	29 5f       	subi	r18, 0xF9	; 249
    12a2:	3f 4f       	sbci	r19, 0xFF	; 255
    12a4:	f9 01       	movw	r30, r18
    12a6:	20 81       	ld	r18, Z
    12a8:	20 5d       	subi	r18, 0xD0	; 208
    12aa:	fc 01       	movw	r30, r24
    12ac:	20 83       	st	Z, r18
    12ae:	13 c0       	rjmp	.+38     	; 0x12d6 <USART_Transmit_32_hex+0xc2>
    12b0:	89 81       	ldd	r24, Y+1	; 0x01
    12b2:	9a 81       	ldd	r25, Y+2	; 0x02
    12b4:	07 96       	adiw	r24, 0x07	; 7
    12b6:	fc 01       	movw	r30, r24
    12b8:	80 81       	ld	r24, Z
    12ba:	80 31       	cpi	r24, 0x10	; 16
    12bc:	60 f4       	brcc	.+24     	; 0x12d6 <USART_Transmit_32_hex+0xc2>
    12be:	89 81       	ldd	r24, Y+1	; 0x01
    12c0:	9a 81       	ldd	r25, Y+2	; 0x02
    12c2:	07 96       	adiw	r24, 0x07	; 7
    12c4:	29 81       	ldd	r18, Y+1	; 0x01
    12c6:	3a 81       	ldd	r19, Y+2	; 0x02
    12c8:	29 5f       	subi	r18, 0xF9	; 249
    12ca:	3f 4f       	sbci	r19, 0xFF	; 255
    12cc:	f9 01       	movw	r30, r18
    12ce:	20 81       	ld	r18, Z
    12d0:	29 5c       	subi	r18, 0xC9	; 201
    12d2:	fc 01       	movw	r30, r24
    12d4:	20 83       	st	Z, r18
		USART_Transmit(*(ptr+7));
    12d6:	89 81       	ldd	r24, Y+1	; 0x01
    12d8:	9a 81       	ldd	r25, Y+2	; 0x02
    12da:	07 96       	adiw	r24, 0x07	; 7
    12dc:	fc 01       	movw	r30, r24
    12de:	80 81       	ld	r24, Z
    12e0:	0e 94 b2 08 	call	0x1164	; 0x1164 <USART_Transmit>
		ptr--;
    12e4:	89 81       	ldd	r24, Y+1	; 0x01
    12e6:	9a 81       	ldd	r25, Y+2	; 0x02
    12e8:	01 97       	sbiw	r24, 0x01	; 1
    12ea:	9a 83       	std	Y+2, r25	; 0x02
    12ec:	89 83       	std	Y+1, r24	; 0x01
	unsigned char N[8];
	unsigned char *ptr = &N[0];
	for (uint8_t i = 0; i < 8; i++){
		N[i] = ((data32bit >> 4*i) & 0xF);
	}
	for (unsigned char i = 0; i < 8; i++){
    12ee:	8c 81       	ldd	r24, Y+4	; 0x04
    12f0:	8f 5f       	subi	r24, 0xFF	; 255
    12f2:	8c 83       	std	Y+4, r24	; 0x04
    12f4:	8c 81       	ldd	r24, Y+4	; 0x04
    12f6:	88 30       	cpi	r24, 0x08	; 8
    12f8:	38 f2       	brcs	.-114    	; 0x1288 <USART_Transmit_32_hex+0x74>
		convert2ASCII_hex(*(ptr+7))	// The MSN is last in the memory so we loop backwards
		USART_Transmit(*(ptr+7));
		ptr--;
	}
	USART_Transmit(0x0A);
    12fa:	8a e0       	ldi	r24, 0x0A	; 10
    12fc:	0e 94 b2 08 	call	0x1164	; 0x1164 <USART_Transmit>
}
    1300:	60 96       	adiw	r28, 0x10	; 16
    1302:	0f b6       	in	r0, 0x3f	; 63
    1304:	f8 94       	cli
    1306:	de bf       	out	0x3e, r29	; 62
    1308:	0f be       	out	0x3f, r0	; 63
    130a:	cd bf       	out	0x3d, r28	; 61
    130c:	df 91       	pop	r29
    130e:	cf 91       	pop	r28
    1310:	08 95       	ret

00001312 <USART_Transmit_16_hex>:


void USART_Transmit_16_hex(int data16bit){
    1312:	cf 93       	push	r28
    1314:	df 93       	push	r29
    1316:	00 d0       	rcall	.+0      	; 0x1318 <USART_Transmit_16_hex+0x6>
    1318:	00 d0       	rcall	.+0      	; 0x131a <USART_Transmit_16_hex+0x8>
    131a:	00 d0       	rcall	.+0      	; 0x131c <USART_Transmit_16_hex+0xa>
    131c:	cd b7       	in	r28, 0x3d	; 61
    131e:	de b7       	in	r29, 0x3e	; 62
    1320:	9e 83       	std	Y+6, r25	; 0x06
    1322:	8d 83       	std	Y+5, r24	; 0x05
	unsigned char N_1 = (data16bit & 0x000F);
    1324:	8d 81       	ldd	r24, Y+5	; 0x05
    1326:	8f 70       	andi	r24, 0x0F	; 15
    1328:	89 83       	std	Y+1, r24	; 0x01
	unsigned char N_2 = ((data16bit >> 4 ) & 0x000F);
    132a:	8d 81       	ldd	r24, Y+5	; 0x05
    132c:	9e 81       	ldd	r25, Y+6	; 0x06
    132e:	95 95       	asr	r25
    1330:	87 95       	ror	r24
    1332:	95 95       	asr	r25
    1334:	87 95       	ror	r24
    1336:	95 95       	asr	r25
    1338:	87 95       	ror	r24
    133a:	95 95       	asr	r25
    133c:	87 95       	ror	r24
    133e:	8f 70       	andi	r24, 0x0F	; 15
    1340:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char N_3 = ((data16bit >> 8 ) & 0x000F);
    1342:	8d 81       	ldd	r24, Y+5	; 0x05
    1344:	9e 81       	ldd	r25, Y+6	; 0x06
    1346:	89 2f       	mov	r24, r25
    1348:	99 0f       	add	r25, r25
    134a:	99 0b       	sbc	r25, r25
    134c:	8f 70       	andi	r24, 0x0F	; 15
    134e:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char N_4 = ((data16bit >> 12 ) & 0x000F);
    1350:	8d 81       	ldd	r24, Y+5	; 0x05
    1352:	9e 81       	ldd	r25, Y+6	; 0x06
    1354:	89 2f       	mov	r24, r25
    1356:	99 27       	eor	r25, r25
    1358:	82 95       	swap	r24
    135a:	8f 70       	andi	r24, 0x0F	; 15
    135c:	8c 83       	std	Y+4, r24	; 0x04

	convert2ASCII_hex(N_1);
    135e:	89 81       	ldd	r24, Y+1	; 0x01
    1360:	8a 30       	cpi	r24, 0x0A	; 10
    1362:	20 f4       	brcc	.+8      	; 0x136c <USART_Transmit_16_hex+0x5a>
    1364:	89 81       	ldd	r24, Y+1	; 0x01
    1366:	80 5d       	subi	r24, 0xD0	; 208
    1368:	89 83       	std	Y+1, r24	; 0x01
    136a:	06 c0       	rjmp	.+12     	; 0x1378 <USART_Transmit_16_hex+0x66>
    136c:	89 81       	ldd	r24, Y+1	; 0x01
    136e:	80 31       	cpi	r24, 0x10	; 16
    1370:	18 f4       	brcc	.+6      	; 0x1378 <USART_Transmit_16_hex+0x66>
    1372:	89 81       	ldd	r24, Y+1	; 0x01
    1374:	89 5c       	subi	r24, 0xC9	; 201
    1376:	89 83       	std	Y+1, r24	; 0x01
	convert2ASCII_hex(N_2);
    1378:	8a 81       	ldd	r24, Y+2	; 0x02
    137a:	8a 30       	cpi	r24, 0x0A	; 10
    137c:	20 f4       	brcc	.+8      	; 0x1386 <USART_Transmit_16_hex+0x74>
    137e:	8a 81       	ldd	r24, Y+2	; 0x02
    1380:	80 5d       	subi	r24, 0xD0	; 208
    1382:	8a 83       	std	Y+2, r24	; 0x02
    1384:	06 c0       	rjmp	.+12     	; 0x1392 <USART_Transmit_16_hex+0x80>
    1386:	8a 81       	ldd	r24, Y+2	; 0x02
    1388:	80 31       	cpi	r24, 0x10	; 16
    138a:	18 f4       	brcc	.+6      	; 0x1392 <USART_Transmit_16_hex+0x80>
    138c:	8a 81       	ldd	r24, Y+2	; 0x02
    138e:	89 5c       	subi	r24, 0xC9	; 201
    1390:	8a 83       	std	Y+2, r24	; 0x02
	convert2ASCII_hex(N_3);
    1392:	8b 81       	ldd	r24, Y+3	; 0x03
    1394:	8a 30       	cpi	r24, 0x0A	; 10
    1396:	20 f4       	brcc	.+8      	; 0x13a0 <USART_Transmit_16_hex+0x8e>
    1398:	8b 81       	ldd	r24, Y+3	; 0x03
    139a:	80 5d       	subi	r24, 0xD0	; 208
    139c:	8b 83       	std	Y+3, r24	; 0x03
    139e:	06 c0       	rjmp	.+12     	; 0x13ac <USART_Transmit_16_hex+0x9a>
    13a0:	8b 81       	ldd	r24, Y+3	; 0x03
    13a2:	80 31       	cpi	r24, 0x10	; 16
    13a4:	18 f4       	brcc	.+6      	; 0x13ac <USART_Transmit_16_hex+0x9a>
    13a6:	8b 81       	ldd	r24, Y+3	; 0x03
    13a8:	89 5c       	subi	r24, 0xC9	; 201
    13aa:	8b 83       	std	Y+3, r24	; 0x03
	convert2ASCII_hex(N_4);
    13ac:	8c 81       	ldd	r24, Y+4	; 0x04
    13ae:	8a 30       	cpi	r24, 0x0A	; 10
    13b0:	20 f4       	brcc	.+8      	; 0x13ba <USART_Transmit_16_hex+0xa8>
    13b2:	8c 81       	ldd	r24, Y+4	; 0x04
    13b4:	80 5d       	subi	r24, 0xD0	; 208
    13b6:	8c 83       	std	Y+4, r24	; 0x04
    13b8:	06 c0       	rjmp	.+12     	; 0x13c6 <USART_Transmit_16_hex+0xb4>
    13ba:	8c 81       	ldd	r24, Y+4	; 0x04
    13bc:	80 31       	cpi	r24, 0x10	; 16
    13be:	18 f4       	brcc	.+6      	; 0x13c6 <USART_Transmit_16_hex+0xb4>
    13c0:	8c 81       	ldd	r24, Y+4	; 0x04
    13c2:	89 5c       	subi	r24, 0xC9	; 201
    13c4:	8c 83       	std	Y+4, r24	; 0x04

	USART_Transmit('0');
    13c6:	80 e3       	ldi	r24, 0x30	; 48
    13c8:	0e 94 b2 08 	call	0x1164	; 0x1164 <USART_Transmit>
	USART_Transmit('x');
    13cc:	88 e7       	ldi	r24, 0x78	; 120
    13ce:	0e 94 b2 08 	call	0x1164	; 0x1164 <USART_Transmit>

	USART_Transmit(N_4);
    13d2:	8c 81       	ldd	r24, Y+4	; 0x04
    13d4:	0e 94 b2 08 	call	0x1164	; 0x1164 <USART_Transmit>
	USART_Transmit(N_3);
    13d8:	8b 81       	ldd	r24, Y+3	; 0x03
    13da:	0e 94 b2 08 	call	0x1164	; 0x1164 <USART_Transmit>
	USART_Transmit(N_2);
    13de:	8a 81       	ldd	r24, Y+2	; 0x02
    13e0:	0e 94 b2 08 	call	0x1164	; 0x1164 <USART_Transmit>
	USART_Transmit(N_1);
    13e4:	89 81       	ldd	r24, Y+1	; 0x01
    13e6:	0e 94 b2 08 	call	0x1164	; 0x1164 <USART_Transmit>
	USART_Transmit(0x0A);
    13ea:	8a e0       	ldi	r24, 0x0A	; 10
    13ec:	0e 94 b2 08 	call	0x1164	; 0x1164 <USART_Transmit>
}
    13f0:	26 96       	adiw	r28, 0x06	; 6
    13f2:	0f b6       	in	r0, 0x3f	; 63
    13f4:	f8 94       	cli
    13f6:	de bf       	out	0x3e, r29	; 62
    13f8:	0f be       	out	0x3f, r0	; 63
    13fa:	cd bf       	out	0x3d, r28	; 61
    13fc:	df 91       	pop	r29
    13fe:	cf 91       	pop	r28
    1400:	08 95       	ret

00001402 <USART_Transmit_8_hex>:



void USART_Transmit_8_hex(unsigned char byte){
    1402:	cf 93       	push	r28
    1404:	df 93       	push	r29
    1406:	00 d0       	rcall	.+0      	; 0x1408 <USART_Transmit_8_hex+0x6>
    1408:	1f 92       	push	r1
    140a:	cd b7       	in	r28, 0x3d	; 61
    140c:	de b7       	in	r29, 0x3e	; 62
    140e:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char LSN = (byte & 0x0F);
    1410:	8b 81       	ldd	r24, Y+3	; 0x03
    1412:	8f 70       	andi	r24, 0x0F	; 15
    1414:	89 83       	std	Y+1, r24	; 0x01
	unsigned char MSN = ((byte >> 4) & 0x0F);
    1416:	8b 81       	ldd	r24, Y+3	; 0x03
    1418:	82 95       	swap	r24
    141a:	8f 70       	andi	r24, 0x0F	; 15
    141c:	8a 83       	std	Y+2, r24	; 0x02

	convert2ASCII_hex(LSN);
    141e:	89 81       	ldd	r24, Y+1	; 0x01
    1420:	8a 30       	cpi	r24, 0x0A	; 10
    1422:	20 f4       	brcc	.+8      	; 0x142c <USART_Transmit_8_hex+0x2a>
    1424:	89 81       	ldd	r24, Y+1	; 0x01
    1426:	80 5d       	subi	r24, 0xD0	; 208
    1428:	89 83       	std	Y+1, r24	; 0x01
    142a:	06 c0       	rjmp	.+12     	; 0x1438 <USART_Transmit_8_hex+0x36>
    142c:	89 81       	ldd	r24, Y+1	; 0x01
    142e:	80 31       	cpi	r24, 0x10	; 16
    1430:	18 f4       	brcc	.+6      	; 0x1438 <USART_Transmit_8_hex+0x36>
    1432:	89 81       	ldd	r24, Y+1	; 0x01
    1434:	89 5c       	subi	r24, 0xC9	; 201
    1436:	89 83       	std	Y+1, r24	; 0x01
	convert2ASCII_hex(MSN);
    1438:	8a 81       	ldd	r24, Y+2	; 0x02
    143a:	8a 30       	cpi	r24, 0x0A	; 10
    143c:	20 f4       	brcc	.+8      	; 0x1446 <USART_Transmit_8_hex+0x44>
    143e:	8a 81       	ldd	r24, Y+2	; 0x02
    1440:	80 5d       	subi	r24, 0xD0	; 208
    1442:	8a 83       	std	Y+2, r24	; 0x02
    1444:	06 c0       	rjmp	.+12     	; 0x1452 <USART_Transmit_8_hex+0x50>
    1446:	8a 81       	ldd	r24, Y+2	; 0x02
    1448:	80 31       	cpi	r24, 0x10	; 16
    144a:	18 f4       	brcc	.+6      	; 0x1452 <USART_Transmit_8_hex+0x50>
    144c:	8a 81       	ldd	r24, Y+2	; 0x02
    144e:	89 5c       	subi	r24, 0xC9	; 201
    1450:	8a 83       	std	Y+2, r24	; 0x02

	USART_Transmit('0');
    1452:	80 e3       	ldi	r24, 0x30	; 48
    1454:	0e 94 b2 08 	call	0x1164	; 0x1164 <USART_Transmit>
	USART_Transmit('x');
    1458:	88 e7       	ldi	r24, 0x78	; 120
    145a:	0e 94 b2 08 	call	0x1164	; 0x1164 <USART_Transmit>
	USART_Transmit(MSN);
    145e:	8a 81       	ldd	r24, Y+2	; 0x02
    1460:	0e 94 b2 08 	call	0x1164	; 0x1164 <USART_Transmit>
	USART_Transmit(LSN);
    1464:	89 81       	ldd	r24, Y+1	; 0x01
    1466:	0e 94 b2 08 	call	0x1164	; 0x1164 <USART_Transmit>
	USART_Transmit(0x0A);
    146a:	8a e0       	ldi	r24, 0x0A	; 10
    146c:	0e 94 b2 08 	call	0x1164	; 0x1164 <USART_Transmit>
}
    1470:	0f 90       	pop	r0
    1472:	0f 90       	pop	r0
    1474:	0f 90       	pop	r0
    1476:	df 91       	pop	r29
    1478:	cf 91       	pop	r28
    147a:	08 95       	ret

0000147c <USART_Transmit_8_dec>:

void USART_Transmit_8_dec(unsigned char byte){
    147c:	cf 93       	push	r28
    147e:	df 93       	push	r29
    1480:	00 d0       	rcall	.+0      	; 0x1482 <USART_Transmit_8_dec+0x6>
    1482:	00 d0       	rcall	.+0      	; 0x1484 <USART_Transmit_8_dec+0x8>
    1484:	1f 92       	push	r1
    1486:	cd b7       	in	r28, 0x3d	; 61
    1488:	de b7       	in	r29, 0x3e	; 62
    148a:	89 83       	std	Y+1, r24	; 0x01
	if(byte < 10){
    148c:	89 81       	ldd	r24, Y+1	; 0x01
    148e:	8a 30       	cpi	r24, 0x0A	; 10
    1490:	40 f4       	brcc	.+16     	; 0x14a2 <USART_Transmit_8_dec+0x26>
		USART_Transmit(byte + 48);
    1492:	89 81       	ldd	r24, Y+1	; 0x01
    1494:	80 5d       	subi	r24, 0xD0	; 208
    1496:	0e 94 b2 08 	call	0x1164	; 0x1164 <USART_Transmit>
		USART_Transmit(0x0A);
    149a:	8a e0       	ldi	r24, 0x0A	; 10
    149c:	0e 94 b2 08 	call	0x1164	; 0x1164 <USART_Transmit>
    14a0:	6f c0       	rjmp	.+222    	; 0x1580 <USART_Transmit_8_dec+0x104>
	}
	else if(byte < 100){
    14a2:	89 81       	ldd	r24, Y+1	; 0x01
    14a4:	84 36       	cpi	r24, 0x64	; 100
    14a6:	10 f5       	brcc	.+68     	; 0x14ec <USART_Transmit_8_dec+0x70>
		USART_Transmit((byte / 10) + 48);
    14a8:	99 81       	ldd	r25, Y+1	; 0x01
    14aa:	8d ec       	ldi	r24, 0xCD	; 205
    14ac:	98 9f       	mul	r25, r24
    14ae:	81 2d       	mov	r24, r1
    14b0:	11 24       	eor	r1, r1
    14b2:	86 95       	lsr	r24
    14b4:	86 95       	lsr	r24
    14b6:	86 95       	lsr	r24
    14b8:	80 5d       	subi	r24, 0xD0	; 208
    14ba:	0e 94 b2 08 	call	0x1164	; 0x1164 <USART_Transmit>
		USART_Transmit((byte % 10) + 48);
    14be:	99 81       	ldd	r25, Y+1	; 0x01
    14c0:	8d ec       	ldi	r24, 0xCD	; 205
    14c2:	98 9f       	mul	r25, r24
    14c4:	81 2d       	mov	r24, r1
    14c6:	11 24       	eor	r1, r1
    14c8:	86 95       	lsr	r24
    14ca:	86 95       	lsr	r24
    14cc:	86 95       	lsr	r24
    14ce:	88 0f       	add	r24, r24
    14d0:	28 2f       	mov	r18, r24
    14d2:	22 0f       	add	r18, r18
    14d4:	22 0f       	add	r18, r18
    14d6:	82 0f       	add	r24, r18
    14d8:	29 2f       	mov	r18, r25
    14da:	28 1b       	sub	r18, r24
    14dc:	82 2f       	mov	r24, r18
    14de:	80 5d       	subi	r24, 0xD0	; 208
    14e0:	0e 94 b2 08 	call	0x1164	; 0x1164 <USART_Transmit>
		USART_Transmit(0x0A);
    14e4:	8a e0       	ldi	r24, 0x0A	; 10
    14e6:	0e 94 b2 08 	call	0x1164	; 0x1164 <USART_Transmit>
    14ea:	4a c0       	rjmp	.+148    	; 0x1580 <USART_Transmit_8_dec+0x104>
	}
	else if(byte >= 100){
    14ec:	89 81       	ldd	r24, Y+1	; 0x01
    14ee:	84 36       	cpi	r24, 0x64	; 100
    14f0:	08 f4       	brcc	.+2      	; 0x14f4 <USART_Transmit_8_dec+0x78>
    14f2:	46 c0       	rjmp	.+140    	; 0x1580 <USART_Transmit_8_dec+0x104>
		USART_Transmit((byte / 100) + 48);
    14f4:	99 81       	ldd	r25, Y+1	; 0x01
    14f6:	89 e2       	ldi	r24, 0x29	; 41
    14f8:	98 9f       	mul	r25, r24
    14fa:	81 2d       	mov	r24, r1
    14fc:	11 24       	eor	r1, r1
    14fe:	82 95       	swap	r24
    1500:	8f 70       	andi	r24, 0x0F	; 15
    1502:	80 5d       	subi	r24, 0xD0	; 208
    1504:	0e 94 b2 08 	call	0x1164	; 0x1164 <USART_Transmit>
		USART_Transmit(((byte - (byte/100)*100) / 10) + 48);
    1508:	89 81       	ldd	r24, Y+1	; 0x01
    150a:	28 2f       	mov	r18, r24
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	99 81       	ldd	r25, Y+1	; 0x01
    1510:	89 e2       	ldi	r24, 0x29	; 41
    1512:	98 9f       	mul	r25, r24
    1514:	81 2d       	mov	r24, r1
    1516:	11 24       	eor	r1, r1
    1518:	82 95       	swap	r24
    151a:	8f 70       	andi	r24, 0x0F	; 15
    151c:	48 2f       	mov	r20, r24
    151e:	50 e0       	ldi	r21, 0x00	; 0
    1520:	6c e9       	ldi	r22, 0x9C	; 156
    1522:	64 03       	mulsu	r22, r20
    1524:	c0 01       	movw	r24, r0
    1526:	65 9f       	mul	r22, r21
    1528:	90 0d       	add	r25, r0
    152a:	11 24       	eor	r1, r1
    152c:	82 0f       	add	r24, r18
    152e:	93 1f       	adc	r25, r19
    1530:	2a e0       	ldi	r18, 0x0A	; 10
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	b9 01       	movw	r22, r18
    1536:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <__divmodhi4>
    153a:	cb 01       	movw	r24, r22
    153c:	80 5d       	subi	r24, 0xD0	; 208
    153e:	0e 94 b2 08 	call	0x1164	; 0x1164 <USART_Transmit>
		USART_Transmit(((byte - (byte/100)*100) % 10) + 48);
    1542:	89 81       	ldd	r24, Y+1	; 0x01
    1544:	28 2f       	mov	r18, r24
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	99 81       	ldd	r25, Y+1	; 0x01
    154a:	89 e2       	ldi	r24, 0x29	; 41
    154c:	98 9f       	mul	r25, r24
    154e:	81 2d       	mov	r24, r1
    1550:	11 24       	eor	r1, r1
    1552:	82 95       	swap	r24
    1554:	8f 70       	andi	r24, 0x0F	; 15
    1556:	48 2f       	mov	r20, r24
    1558:	50 e0       	ldi	r21, 0x00	; 0
    155a:	6c e9       	ldi	r22, 0x9C	; 156
    155c:	64 03       	mulsu	r22, r20
    155e:	c0 01       	movw	r24, r0
    1560:	65 9f       	mul	r22, r21
    1562:	90 0d       	add	r25, r0
    1564:	11 24       	eor	r1, r1
    1566:	82 0f       	add	r24, r18
    1568:	93 1f       	adc	r25, r19
    156a:	2a e0       	ldi	r18, 0x0A	; 10
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	b9 01       	movw	r22, r18
    1570:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <__divmodhi4>
    1574:	80 5d       	subi	r24, 0xD0	; 208
    1576:	0e 94 b2 08 	call	0x1164	; 0x1164 <USART_Transmit>
		USART_Transmit(0x0A);
    157a:	8a e0       	ldi	r24, 0x0A	; 10
    157c:	0e 94 b2 08 	call	0x1164	; 0x1164 <USART_Transmit>
	}
}
    1580:	0f 90       	pop	r0
    1582:	0f 90       	pop	r0
    1584:	0f 90       	pop	r0
    1586:	0f 90       	pop	r0
    1588:	0f 90       	pop	r0
    158a:	df 91       	pop	r29
    158c:	cf 91       	pop	r28
    158e:	08 95       	ret

00001590 <USART_Transmit_16_dec>:

void USART_Transmit_16_dec(unsigned int word){
    1590:	cf 93       	push	r28
    1592:	df 93       	push	r29
    1594:	00 d0       	rcall	.+0      	; 0x1596 <USART_Transmit_16_dec+0x6>
    1596:	cd b7       	in	r28, 0x3d	; 61
    1598:	de b7       	in	r29, 0x3e	; 62
    159a:	9a 83       	std	Y+2, r25	; 0x02
    159c:	89 83       	std	Y+1, r24	; 0x01
	if(word < 10){
    159e:	89 81       	ldd	r24, Y+1	; 0x01
    15a0:	9a 81       	ldd	r25, Y+2	; 0x02
    15a2:	8a 30       	cpi	r24, 0x0A	; 10
    15a4:	91 05       	cpc	r25, r1
    15a6:	40 f4       	brcc	.+16     	; 0x15b8 <USART_Transmit_16_dec+0x28>
		USART_Transmit(word + 48);
    15a8:	89 81       	ldd	r24, Y+1	; 0x01
    15aa:	80 5d       	subi	r24, 0xD0	; 208
    15ac:	0e 94 b2 08 	call	0x1164	; 0x1164 <USART_Transmit>
		USART_Transmit(0x0A);
    15b0:	8a e0       	ldi	r24, 0x0A	; 10
    15b2:	0e 94 b2 08 	call	0x1164	; 0x1164 <USART_Transmit>
    15b6:	c5 c1       	rjmp	.+906    	; 0x1942 <USART_Transmit_16_dec+0x3b2>
	}
	else if(word < 100){
    15b8:	89 81       	ldd	r24, Y+1	; 0x01
    15ba:	9a 81       	ldd	r25, Y+2	; 0x02
    15bc:	84 36       	cpi	r24, 0x64	; 100
    15be:	91 05       	cpc	r25, r1
    15c0:	88 f5       	brcc	.+98     	; 0x1624 <USART_Transmit_16_dec+0x94>
		USART_Transmit((word / 10) + 48);
    15c2:	89 81       	ldd	r24, Y+1	; 0x01
    15c4:	9a 81       	ldd	r25, Y+2	; 0x02
    15c6:	9c 01       	movw	r18, r24
    15c8:	ad ec       	ldi	r26, 0xCD	; 205
    15ca:	bc ec       	ldi	r27, 0xCC	; 204
    15cc:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <__umulhisi3>
    15d0:	96 95       	lsr	r25
    15d2:	87 95       	ror	r24
    15d4:	96 95       	lsr	r25
    15d6:	87 95       	ror	r24
    15d8:	96 95       	lsr	r25
    15da:	87 95       	ror	r24
    15dc:	80 5d       	subi	r24, 0xD0	; 208
    15de:	0e 94 b2 08 	call	0x1164	; 0x1164 <USART_Transmit>
		USART_Transmit((word % 10) + 48);
    15e2:	49 81       	ldd	r20, Y+1	; 0x01
    15e4:	5a 81       	ldd	r21, Y+2	; 0x02
    15e6:	9a 01       	movw	r18, r20
    15e8:	ad ec       	ldi	r26, 0xCD	; 205
    15ea:	bc ec       	ldi	r27, 0xCC	; 204
    15ec:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <__umulhisi3>
    15f0:	96 95       	lsr	r25
    15f2:	87 95       	ror	r24
    15f4:	96 95       	lsr	r25
    15f6:	87 95       	ror	r24
    15f8:	96 95       	lsr	r25
    15fa:	87 95       	ror	r24
    15fc:	88 0f       	add	r24, r24
    15fe:	99 1f       	adc	r25, r25
    1600:	9c 01       	movw	r18, r24
    1602:	22 0f       	add	r18, r18
    1604:	33 1f       	adc	r19, r19
    1606:	22 0f       	add	r18, r18
    1608:	33 1f       	adc	r19, r19
    160a:	82 0f       	add	r24, r18
    160c:	93 1f       	adc	r25, r19
    160e:	9a 01       	movw	r18, r20
    1610:	28 1b       	sub	r18, r24
    1612:	39 0b       	sbc	r19, r25
    1614:	c9 01       	movw	r24, r18
    1616:	80 5d       	subi	r24, 0xD0	; 208
    1618:	0e 94 b2 08 	call	0x1164	; 0x1164 <USART_Transmit>
		USART_Transmit(0x0A);
    161c:	8a e0       	ldi	r24, 0x0A	; 10
    161e:	0e 94 b2 08 	call	0x1164	; 0x1164 <USART_Transmit>
    1622:	8f c1       	rjmp	.+798    	; 0x1942 <USART_Transmit_16_dec+0x3b2>
	}
	else if(word < 1000){
    1624:	89 81       	ldd	r24, Y+1	; 0x01
    1626:	9a 81       	ldd	r25, Y+2	; 0x02
    1628:	88 3e       	cpi	r24, 0xE8	; 232
    162a:	33 e0       	ldi	r19, 0x03	; 3
    162c:	93 07       	cpc	r25, r19
    162e:	08 f0       	brcs	.+2      	; 0x1632 <USART_Transmit_16_dec+0xa2>
    1630:	6c c0       	rjmp	.+216    	; 0x170a <USART_Transmit_16_dec+0x17a>
		USART_Transmit((word / 100) + 48);
    1632:	89 81       	ldd	r24, Y+1	; 0x01
    1634:	9a 81       	ldd	r25, Y+2	; 0x02
    1636:	96 95       	lsr	r25
    1638:	87 95       	ror	r24
    163a:	96 95       	lsr	r25
    163c:	87 95       	ror	r24
    163e:	9c 01       	movw	r18, r24
    1640:	ab e7       	ldi	r26, 0x7B	; 123
    1642:	b4 e1       	ldi	r27, 0x14	; 20
    1644:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <__umulhisi3>
    1648:	96 95       	lsr	r25
    164a:	87 95       	ror	r24
    164c:	80 5d       	subi	r24, 0xD0	; 208
    164e:	0e 94 b2 08 	call	0x1164	; 0x1164 <USART_Transmit>
		USART_Transmit(((word - (word/100)*100) / 10) + 48);
    1652:	49 81       	ldd	r20, Y+1	; 0x01
    1654:	5a 81       	ldd	r21, Y+2	; 0x02
    1656:	ca 01       	movw	r24, r20
    1658:	96 95       	lsr	r25
    165a:	87 95       	ror	r24
    165c:	96 95       	lsr	r25
    165e:	87 95       	ror	r24
    1660:	9c 01       	movw	r18, r24
    1662:	ab e7       	ldi	r26, 0x7B	; 123
    1664:	b4 e1       	ldi	r27, 0x14	; 20
    1666:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <__umulhisi3>
    166a:	96 95       	lsr	r25
    166c:	87 95       	ror	r24
    166e:	64 e6       	ldi	r22, 0x64	; 100
    1670:	68 9f       	mul	r22, r24
    1672:	90 01       	movw	r18, r0
    1674:	69 9f       	mul	r22, r25
    1676:	30 0d       	add	r19, r0
    1678:	11 24       	eor	r1, r1
    167a:	ca 01       	movw	r24, r20
    167c:	82 1b       	sub	r24, r18
    167e:	93 0b       	sbc	r25, r19
    1680:	9c 01       	movw	r18, r24
    1682:	ad ec       	ldi	r26, 0xCD	; 205
    1684:	bc ec       	ldi	r27, 0xCC	; 204
    1686:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <__umulhisi3>
    168a:	96 95       	lsr	r25
    168c:	87 95       	ror	r24
    168e:	96 95       	lsr	r25
    1690:	87 95       	ror	r24
    1692:	96 95       	lsr	r25
    1694:	87 95       	ror	r24
    1696:	80 5d       	subi	r24, 0xD0	; 208
    1698:	0e 94 b2 08 	call	0x1164	; 0x1164 <USART_Transmit>
		USART_Transmit(((word - (word/100)*100) % 10) + 48);
    169c:	e9 81       	ldd	r30, Y+1	; 0x01
    169e:	fa 81       	ldd	r31, Y+2	; 0x02
    16a0:	cf 01       	movw	r24, r30
    16a2:	96 95       	lsr	r25
    16a4:	87 95       	ror	r24
    16a6:	96 95       	lsr	r25
    16a8:	87 95       	ror	r24
    16aa:	9c 01       	movw	r18, r24
    16ac:	ab e7       	ldi	r26, 0x7B	; 123
    16ae:	b4 e1       	ldi	r27, 0x14	; 20
    16b0:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <__umulhisi3>
    16b4:	ac 01       	movw	r20, r24
    16b6:	56 95       	lsr	r21
    16b8:	47 95       	ror	r20
    16ba:	24 e6       	ldi	r18, 0x64	; 100
    16bc:	24 9f       	mul	r18, r20
    16be:	c0 01       	movw	r24, r0
    16c0:	25 9f       	mul	r18, r21
    16c2:	90 0d       	add	r25, r0
    16c4:	11 24       	eor	r1, r1
    16c6:	af 01       	movw	r20, r30
    16c8:	48 1b       	sub	r20, r24
    16ca:	59 0b       	sbc	r21, r25
    16cc:	9a 01       	movw	r18, r20
    16ce:	ad ec       	ldi	r26, 0xCD	; 205
    16d0:	bc ec       	ldi	r27, 0xCC	; 204
    16d2:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <__umulhisi3>
    16d6:	96 95       	lsr	r25
    16d8:	87 95       	ror	r24
    16da:	96 95       	lsr	r25
    16dc:	87 95       	ror	r24
    16de:	96 95       	lsr	r25
    16e0:	87 95       	ror	r24
    16e2:	88 0f       	add	r24, r24
    16e4:	99 1f       	adc	r25, r25
    16e6:	9c 01       	movw	r18, r24
    16e8:	22 0f       	add	r18, r18
    16ea:	33 1f       	adc	r19, r19
    16ec:	22 0f       	add	r18, r18
    16ee:	33 1f       	adc	r19, r19
    16f0:	82 0f       	add	r24, r18
    16f2:	93 1f       	adc	r25, r19
    16f4:	9a 01       	movw	r18, r20
    16f6:	28 1b       	sub	r18, r24
    16f8:	39 0b       	sbc	r19, r25
    16fa:	c9 01       	movw	r24, r18
    16fc:	80 5d       	subi	r24, 0xD0	; 208
    16fe:	0e 94 b2 08 	call	0x1164	; 0x1164 <USART_Transmit>
		USART_Transmit(0x0A);
    1702:	8a e0       	ldi	r24, 0x0A	; 10
    1704:	0e 94 b2 08 	call	0x1164	; 0x1164 <USART_Transmit>
    1708:	1c c1       	rjmp	.+568    	; 0x1942 <USART_Transmit_16_dec+0x3b2>
	}
	else if(word < 10000){
    170a:	89 81       	ldd	r24, Y+1	; 0x01
    170c:	9a 81       	ldd	r25, Y+2	; 0x02
    170e:	80 31       	cpi	r24, 0x10	; 16
    1710:	37 e2       	ldi	r19, 0x27	; 39
    1712:	93 07       	cpc	r25, r19
    1714:	08 f0       	brcs	.+2      	; 0x1718 <USART_Transmit_16_dec+0x188>
    1716:	12 c1       	rjmp	.+548    	; 0x193c <USART_Transmit_16_dec+0x3ac>
		USART_Transmit((word / 1000) + 48);
    1718:	89 81       	ldd	r24, Y+1	; 0x01
    171a:	9a 81       	ldd	r25, Y+2	; 0x02
    171c:	96 95       	lsr	r25
    171e:	87 95       	ror	r24
    1720:	96 95       	lsr	r25
    1722:	87 95       	ror	r24
    1724:	96 95       	lsr	r25
    1726:	87 95       	ror	r24
    1728:	9c 01       	movw	r18, r24
    172a:	a5 ec       	ldi	r26, 0xC5	; 197
    172c:	b0 e2       	ldi	r27, 0x20	; 32
    172e:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <__umulhisi3>
    1732:	92 95       	swap	r25
    1734:	82 95       	swap	r24
    1736:	8f 70       	andi	r24, 0x0F	; 15
    1738:	89 27       	eor	r24, r25
    173a:	9f 70       	andi	r25, 0x0F	; 15
    173c:	89 27       	eor	r24, r25
    173e:	80 5d       	subi	r24, 0xD0	; 208
    1740:	0e 94 b2 08 	call	0x1164	; 0x1164 <USART_Transmit>
		USART_Transmit(((word - (word/1000)*1000) / 100) + 48);
    1744:	49 81       	ldd	r20, Y+1	; 0x01
    1746:	5a 81       	ldd	r21, Y+2	; 0x02
    1748:	ca 01       	movw	r24, r20
    174a:	96 95       	lsr	r25
    174c:	87 95       	ror	r24
    174e:	96 95       	lsr	r25
    1750:	87 95       	ror	r24
    1752:	96 95       	lsr	r25
    1754:	87 95       	ror	r24
    1756:	9c 01       	movw	r18, r24
    1758:	a5 ec       	ldi	r26, 0xC5	; 197
    175a:	b0 e2       	ldi	r27, 0x20	; 32
    175c:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <__umulhisi3>
    1760:	92 95       	swap	r25
    1762:	82 95       	swap	r24
    1764:	8f 70       	andi	r24, 0x0F	; 15
    1766:	89 27       	eor	r24, r25
    1768:	9f 70       	andi	r25, 0x0F	; 15
    176a:	89 27       	eor	r24, r25
    176c:	68 ee       	ldi	r22, 0xE8	; 232
    176e:	73 e0       	ldi	r23, 0x03	; 3
    1770:	86 9f       	mul	r24, r22
    1772:	90 01       	movw	r18, r0
    1774:	87 9f       	mul	r24, r23
    1776:	30 0d       	add	r19, r0
    1778:	96 9f       	mul	r25, r22
    177a:	30 0d       	add	r19, r0
    177c:	11 24       	eor	r1, r1
    177e:	ca 01       	movw	r24, r20
    1780:	82 1b       	sub	r24, r18
    1782:	93 0b       	sbc	r25, r19
    1784:	96 95       	lsr	r25
    1786:	87 95       	ror	r24
    1788:	96 95       	lsr	r25
    178a:	87 95       	ror	r24
    178c:	9c 01       	movw	r18, r24
    178e:	ab e7       	ldi	r26, 0x7B	; 123
    1790:	b4 e1       	ldi	r27, 0x14	; 20
    1792:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <__umulhisi3>
    1796:	96 95       	lsr	r25
    1798:	87 95       	ror	r24
    179a:	80 5d       	subi	r24, 0xD0	; 208
    179c:	0e 94 b2 08 	call	0x1164	; 0x1164 <USART_Transmit>
		USART_Transmit((((word - (word/1000)*1000) % 100) / 10) + 48);
    17a0:	e9 81       	ldd	r30, Y+1	; 0x01
    17a2:	fa 81       	ldd	r31, Y+2	; 0x02
    17a4:	cf 01       	movw	r24, r30
    17a6:	96 95       	lsr	r25
    17a8:	87 95       	ror	r24
    17aa:	96 95       	lsr	r25
    17ac:	87 95       	ror	r24
    17ae:	96 95       	lsr	r25
    17b0:	87 95       	ror	r24
    17b2:	9c 01       	movw	r18, r24
    17b4:	a5 ec       	ldi	r26, 0xC5	; 197
    17b6:	b0 e2       	ldi	r27, 0x20	; 32
    17b8:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <__umulhisi3>
    17bc:	ac 01       	movw	r20, r24
    17be:	52 95       	swap	r21
    17c0:	42 95       	swap	r20
    17c2:	4f 70       	andi	r20, 0x0F	; 15
    17c4:	45 27       	eor	r20, r21
    17c6:	5f 70       	andi	r21, 0x0F	; 15
    17c8:	45 27       	eor	r20, r21
    17ca:	28 ee       	ldi	r18, 0xE8	; 232
    17cc:	33 e0       	ldi	r19, 0x03	; 3
    17ce:	42 9f       	mul	r20, r18
    17d0:	c0 01       	movw	r24, r0
    17d2:	43 9f       	mul	r20, r19
    17d4:	90 0d       	add	r25, r0
    17d6:	52 9f       	mul	r21, r18
    17d8:	90 0d       	add	r25, r0
    17da:	11 24       	eor	r1, r1
    17dc:	af 01       	movw	r20, r30
    17de:	48 1b       	sub	r20, r24
    17e0:	59 0b       	sbc	r21, r25
    17e2:	ca 01       	movw	r24, r20
    17e4:	96 95       	lsr	r25
    17e6:	87 95       	ror	r24
    17e8:	96 95       	lsr	r25
    17ea:	87 95       	ror	r24
    17ec:	9c 01       	movw	r18, r24
    17ee:	ab e7       	ldi	r26, 0x7B	; 123
    17f0:	b4 e1       	ldi	r27, 0x14	; 20
    17f2:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <__umulhisi3>
    17f6:	96 95       	lsr	r25
    17f8:	87 95       	ror	r24
    17fa:	64 e6       	ldi	r22, 0x64	; 100
    17fc:	68 9f       	mul	r22, r24
    17fe:	90 01       	movw	r18, r0
    1800:	69 9f       	mul	r22, r25
    1802:	30 0d       	add	r19, r0
    1804:	11 24       	eor	r1, r1
    1806:	ca 01       	movw	r24, r20
    1808:	82 1b       	sub	r24, r18
    180a:	93 0b       	sbc	r25, r19
    180c:	9c 01       	movw	r18, r24
    180e:	ad ec       	ldi	r26, 0xCD	; 205
    1810:	bc ec       	ldi	r27, 0xCC	; 204
    1812:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <__umulhisi3>
    1816:	96 95       	lsr	r25
    1818:	87 95       	ror	r24
    181a:	96 95       	lsr	r25
    181c:	87 95       	ror	r24
    181e:	96 95       	lsr	r25
    1820:	87 95       	ror	r24
    1822:	80 5d       	subi	r24, 0xD0	; 208
    1824:	0e 94 b2 08 	call	0x1164	; 0x1164 <USART_Transmit>
		USART_Transmit((( (word - (word/1000)*1000) % 100) - (word - ((word/1000)*1000) % 100)/10)*10 +48);
    1828:	e9 81       	ldd	r30, Y+1	; 0x01
    182a:	fa 81       	ldd	r31, Y+2	; 0x02
    182c:	cf 01       	movw	r24, r30
    182e:	96 95       	lsr	r25
    1830:	87 95       	ror	r24
    1832:	96 95       	lsr	r25
    1834:	87 95       	ror	r24
    1836:	96 95       	lsr	r25
    1838:	87 95       	ror	r24
    183a:	9c 01       	movw	r18, r24
    183c:	a5 ec       	ldi	r26, 0xC5	; 197
    183e:	b0 e2       	ldi	r27, 0x20	; 32
    1840:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <__umulhisi3>
    1844:	ac 01       	movw	r20, r24
    1846:	52 95       	swap	r21
    1848:	42 95       	swap	r20
    184a:	4f 70       	andi	r20, 0x0F	; 15
    184c:	45 27       	eor	r20, r21
    184e:	5f 70       	andi	r21, 0x0F	; 15
    1850:	45 27       	eor	r20, r21
    1852:	28 ee       	ldi	r18, 0xE8	; 232
    1854:	33 e0       	ldi	r19, 0x03	; 3
    1856:	42 9f       	mul	r20, r18
    1858:	c0 01       	movw	r24, r0
    185a:	43 9f       	mul	r20, r19
    185c:	90 0d       	add	r25, r0
    185e:	52 9f       	mul	r21, r18
    1860:	90 0d       	add	r25, r0
    1862:	11 24       	eor	r1, r1
    1864:	af 01       	movw	r20, r30
    1866:	48 1b       	sub	r20, r24
    1868:	59 0b       	sbc	r21, r25
    186a:	ca 01       	movw	r24, r20
    186c:	96 95       	lsr	r25
    186e:	87 95       	ror	r24
    1870:	96 95       	lsr	r25
    1872:	87 95       	ror	r24
    1874:	9c 01       	movw	r18, r24
    1876:	ab e7       	ldi	r26, 0x7B	; 123
    1878:	b4 e1       	ldi	r27, 0x14	; 20
    187a:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <__umulhisi3>
    187e:	fc 01       	movw	r30, r24
    1880:	f6 95       	lsr	r31
    1882:	e7 95       	ror	r30
    1884:	24 e6       	ldi	r18, 0x64	; 100
    1886:	2e 9f       	mul	r18, r30
    1888:	c0 01       	movw	r24, r0
    188a:	2f 9f       	mul	r18, r31
    188c:	90 0d       	add	r25, r0
    188e:	11 24       	eor	r1, r1
    1890:	fa 01       	movw	r30, r20
    1892:	e8 1b       	sub	r30, r24
    1894:	f9 0b       	sbc	r31, r25
    1896:	89 81       	ldd	r24, Y+1	; 0x01
    1898:	9a 81       	ldd	r25, Y+2	; 0x02
    189a:	96 95       	lsr	r25
    189c:	87 95       	ror	r24
    189e:	96 95       	lsr	r25
    18a0:	87 95       	ror	r24
    18a2:	96 95       	lsr	r25
    18a4:	87 95       	ror	r24
    18a6:	9c 01       	movw	r18, r24
    18a8:	a5 ec       	ldi	r26, 0xC5	; 197
    18aa:	b0 e2       	ldi	r27, 0x20	; 32
    18ac:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <__umulhisi3>
    18b0:	9c 01       	movw	r18, r24
    18b2:	32 95       	swap	r19
    18b4:	22 95       	swap	r18
    18b6:	2f 70       	andi	r18, 0x0F	; 15
    18b8:	23 27       	eor	r18, r19
    18ba:	3f 70       	andi	r19, 0x0F	; 15
    18bc:	23 27       	eor	r18, r19
    18be:	88 ee       	ldi	r24, 0xE8	; 232
    18c0:	93 e0       	ldi	r25, 0x03	; 3
    18c2:	28 9f       	mul	r18, r24
    18c4:	a0 01       	movw	r20, r0
    18c6:	29 9f       	mul	r18, r25
    18c8:	50 0d       	add	r21, r0
    18ca:	38 9f       	mul	r19, r24
    18cc:	50 0d       	add	r21, r0
    18ce:	11 24       	eor	r1, r1
    18d0:	ca 01       	movw	r24, r20
    18d2:	96 95       	lsr	r25
    18d4:	87 95       	ror	r24
    18d6:	96 95       	lsr	r25
    18d8:	87 95       	ror	r24
    18da:	9c 01       	movw	r18, r24
    18dc:	ab e7       	ldi	r26, 0x7B	; 123
    18de:	b4 e1       	ldi	r27, 0x14	; 20
    18e0:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <__umulhisi3>
    18e4:	96 95       	lsr	r25
    18e6:	87 95       	ror	r24
    18e8:	64 e6       	ldi	r22, 0x64	; 100
    18ea:	68 9f       	mul	r22, r24
    18ec:	90 01       	movw	r18, r0
    18ee:	69 9f       	mul	r22, r25
    18f0:	30 0d       	add	r19, r0
    18f2:	11 24       	eor	r1, r1
    18f4:	ca 01       	movw	r24, r20
    18f6:	82 1b       	sub	r24, r18
    18f8:	93 0b       	sbc	r25, r19
    18fa:	29 81       	ldd	r18, Y+1	; 0x01
    18fc:	3a 81       	ldd	r19, Y+2	; 0x02
    18fe:	a9 01       	movw	r20, r18
    1900:	48 1b       	sub	r20, r24
    1902:	59 0b       	sbc	r21, r25
    1904:	ca 01       	movw	r24, r20
    1906:	9c 01       	movw	r18, r24
    1908:	ad ec       	ldi	r26, 0xCD	; 205
    190a:	bc ec       	ldi	r27, 0xCC	; 204
    190c:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <__umulhisi3>
    1910:	96 95       	lsr	r25
    1912:	87 95       	ror	r24
    1914:	96 95       	lsr	r25
    1916:	87 95       	ror	r24
    1918:	96 95       	lsr	r25
    191a:	87 95       	ror	r24
    191c:	9f 01       	movw	r18, r30
    191e:	28 1b       	sub	r18, r24
    1920:	39 0b       	sbc	r19, r25
    1922:	c9 01       	movw	r24, r18
    1924:	88 0f       	add	r24, r24
    1926:	98 2f       	mov	r25, r24
    1928:	99 0f       	add	r25, r25
    192a:	99 0f       	add	r25, r25
    192c:	89 0f       	add	r24, r25
    192e:	80 5d       	subi	r24, 0xD0	; 208
    1930:	0e 94 b2 08 	call	0x1164	; 0x1164 <USART_Transmit>
		USART_Transmit(0x0A);
    1934:	8a e0       	ldi	r24, 0x0A	; 10
    1936:	0e 94 b2 08 	call	0x1164	; 0x1164 <USART_Transmit>
    193a:	03 c0       	rjmp	.+6      	; 0x1942 <USART_Transmit_16_dec+0x3b2>
	}
	else{
		USART_Transmit('q');
    193c:	81 e7       	ldi	r24, 0x71	; 113
    193e:	0e 94 b2 08 	call	0x1164	; 0x1164 <USART_Transmit>
	}
}
    1942:	0f 90       	pop	r0
    1944:	0f 90       	pop	r0
    1946:	df 91       	pop	r29
    1948:	cf 91       	pop	r28
    194a:	08 95       	ret

0000194c <USART_Transmit_16_dec_signed>:


void USART_Transmit_16_dec_signed(int word){
    194c:	cf 93       	push	r28
    194e:	df 93       	push	r29
    1950:	cd b7       	in	r28, 0x3d	; 61
    1952:	de b7       	in	r29, 0x3e	; 62
    1954:	a6 97       	sbiw	r28, 0x26	; 38
    1956:	0f b6       	in	r0, 0x3f	; 63
    1958:	f8 94       	cli
    195a:	de bf       	out	0x3e, r29	; 62
    195c:	0f be       	out	0x3f, r0	; 63
    195e:	cd bf       	out	0x3d, r28	; 61
    1960:	9a 83       	std	Y+2, r25	; 0x02
    1962:	89 83       	std	Y+1, r24	; 0x01
		if (word < 0){
    1964:	89 81       	ldd	r24, Y+1	; 0x01
    1966:	9a 81       	ldd	r25, Y+2	; 0x02
    1968:	99 23       	and	r25, r25
    196a:	54 f4       	brge	.+20     	; 0x1980 <USART_Transmit_16_dec_signed+0x34>
			USART_Transmit(0x2D);	// Minus sign
    196c:	8d e2       	ldi	r24, 0x2D	; 45
    196e:	0e 94 b2 08 	call	0x1164	; 0x1164 <USART_Transmit>
			word = ~word + 1;
    1972:	89 81       	ldd	r24, Y+1	; 0x01
    1974:	9a 81       	ldd	r25, Y+2	; 0x02
    1976:	91 95       	neg	r25
    1978:	81 95       	neg	r24
    197a:	91 09       	sbc	r25, r1
    197c:	9a 83       	std	Y+2, r25	; 0x02
    197e:	89 83       	std	Y+1, r24	; 0x01
		}

		if(word < 10){
    1980:	89 81       	ldd	r24, Y+1	; 0x01
    1982:	9a 81       	ldd	r25, Y+2	; 0x02
    1984:	8a 30       	cpi	r24, 0x0A	; 10
    1986:	91 05       	cpc	r25, r1
    1988:	44 f4       	brge	.+16     	; 0x199a <USART_Transmit_16_dec_signed+0x4e>
			USART_Transmit(word + 48);
    198a:	89 81       	ldd	r24, Y+1	; 0x01
    198c:	80 5d       	subi	r24, 0xD0	; 208
    198e:	0e 94 b2 08 	call	0x1164	; 0x1164 <USART_Transmit>
			USART_Transmit(0x0A);
    1992:	8a e0       	ldi	r24, 0x0A	; 10
    1994:	0e 94 b2 08 	call	0x1164	; 0x1164 <USART_Transmit>
    1998:	cc c0       	rjmp	.+408    	; 0x1b32 <USART_Transmit_16_dec_signed+0x1e6>
		}
		else if(word < 100){
    199a:	89 81       	ldd	r24, Y+1	; 0x01
    199c:	9a 81       	ldd	r25, Y+2	; 0x02
    199e:	84 36       	cpi	r24, 0x64	; 100
    19a0:	91 05       	cpc	r25, r1
    19a2:	cc f4       	brge	.+50     	; 0x19d6 <USART_Transmit_16_dec_signed+0x8a>
			USART_Transmit((word / 10) + 48);
    19a4:	89 81       	ldd	r24, Y+1	; 0x01
    19a6:	9a 81       	ldd	r25, Y+2	; 0x02
    19a8:	2a e0       	ldi	r18, 0x0A	; 10
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	b9 01       	movw	r22, r18
    19ae:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <__divmodhi4>
    19b2:	cb 01       	movw	r24, r22
    19b4:	80 5d       	subi	r24, 0xD0	; 208
    19b6:	0e 94 b2 08 	call	0x1164	; 0x1164 <USART_Transmit>
			USART_Transmit((word % 10) + 48);
    19ba:	89 81       	ldd	r24, Y+1	; 0x01
    19bc:	9a 81       	ldd	r25, Y+2	; 0x02
    19be:	2a e0       	ldi	r18, 0x0A	; 10
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	b9 01       	movw	r22, r18
    19c4:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <__divmodhi4>
    19c8:	80 5d       	subi	r24, 0xD0	; 208
    19ca:	0e 94 b2 08 	call	0x1164	; 0x1164 <USART_Transmit>
			USART_Transmit(0x0A);
    19ce:	8a e0       	ldi	r24, 0x0A	; 10
    19d0:	0e 94 b2 08 	call	0x1164	; 0x1164 <USART_Transmit>
    19d4:	ae c0       	rjmp	.+348    	; 0x1b32 <USART_Transmit_16_dec_signed+0x1e6>
		}
		else if(word < 1000){
    19d6:	89 81       	ldd	r24, Y+1	; 0x01
    19d8:	9a 81       	ldd	r25, Y+2	; 0x02
    19da:	88 3e       	cpi	r24, 0xE8	; 232
    19dc:	23 e0       	ldi	r18, 0x03	; 3
    19de:	92 07       	cpc	r25, r18
    19e0:	74 f5       	brge	.+92     	; 0x1a3e <USART_Transmit_16_dec_signed+0xf2>
			USART_Transmit((word / 100) + 48);
    19e2:	89 81       	ldd	r24, Y+1	; 0x01
    19e4:	9a 81       	ldd	r25, Y+2	; 0x02
    19e6:	24 e6       	ldi	r18, 0x64	; 100
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	b9 01       	movw	r22, r18
    19ec:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <__divmodhi4>
    19f0:	cb 01       	movw	r24, r22
    19f2:	80 5d       	subi	r24, 0xD0	; 208
    19f4:	0e 94 b2 08 	call	0x1164	; 0x1164 <USART_Transmit>
			USART_Transmit(((word - (word/100)*100) / 10) + 48);
    19f8:	89 81       	ldd	r24, Y+1	; 0x01
    19fa:	9a 81       	ldd	r25, Y+2	; 0x02
    19fc:	24 e6       	ldi	r18, 0x64	; 100
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	b9 01       	movw	r22, r18
    1a02:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <__divmodhi4>
    1a06:	2a e0       	ldi	r18, 0x0A	; 10
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	b9 01       	movw	r22, r18
    1a0c:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <__divmodhi4>
    1a10:	cb 01       	movw	r24, r22
    1a12:	80 5d       	subi	r24, 0xD0	; 208
    1a14:	0e 94 b2 08 	call	0x1164	; 0x1164 <USART_Transmit>
			USART_Transmit(((word - (word/100)*100) % 10) + 48);
    1a18:	89 81       	ldd	r24, Y+1	; 0x01
    1a1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a1c:	24 e6       	ldi	r18, 0x64	; 100
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	b9 01       	movw	r22, r18
    1a22:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <__divmodhi4>
    1a26:	2a e0       	ldi	r18, 0x0A	; 10
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	b9 01       	movw	r22, r18
    1a2c:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <__divmodhi4>
    1a30:	80 5d       	subi	r24, 0xD0	; 208
    1a32:	0e 94 b2 08 	call	0x1164	; 0x1164 <USART_Transmit>
			USART_Transmit(0x0A);
    1a36:	8a e0       	ldi	r24, 0x0A	; 10
    1a38:	0e 94 b2 08 	call	0x1164	; 0x1164 <USART_Transmit>
    1a3c:	7a c0       	rjmp	.+244    	; 0x1b32 <USART_Transmit_16_dec_signed+0x1e6>
		}
		else if(word < 10000){
    1a3e:	89 81       	ldd	r24, Y+1	; 0x01
    1a40:	9a 81       	ldd	r25, Y+2	; 0x02
    1a42:	80 31       	cpi	r24, 0x10	; 16
    1a44:	47 e2       	ldi	r20, 0x27	; 39
    1a46:	94 07       	cpc	r25, r20
    1a48:	0c f0       	brlt	.+2      	; 0x1a4c <USART_Transmit_16_dec_signed+0x100>
    1a4a:	70 c0       	rjmp	.+224    	; 0x1b2c <USART_Transmit_16_dec_signed+0x1e0>
			USART_Transmit((word / 1000) + 48);
    1a4c:	89 81       	ldd	r24, Y+1	; 0x01
    1a4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a50:	28 ee       	ldi	r18, 0xE8	; 232
    1a52:	33 e0       	ldi	r19, 0x03	; 3
    1a54:	b9 01       	movw	r22, r18
    1a56:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <__divmodhi4>
    1a5a:	cb 01       	movw	r24, r22
    1a5c:	80 5d       	subi	r24, 0xD0	; 208
    1a5e:	0e 94 b2 08 	call	0x1164	; 0x1164 <USART_Transmit>
			USART_Transmit(((word - (word/1000)*1000) / 100) + 48);
    1a62:	89 81       	ldd	r24, Y+1	; 0x01
    1a64:	9a 81       	ldd	r25, Y+2	; 0x02
    1a66:	28 ee       	ldi	r18, 0xE8	; 232
    1a68:	33 e0       	ldi	r19, 0x03	; 3
    1a6a:	b9 01       	movw	r22, r18
    1a6c:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <__divmodhi4>
    1a70:	24 e6       	ldi	r18, 0x64	; 100
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	b9 01       	movw	r22, r18
    1a76:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <__divmodhi4>
    1a7a:	cb 01       	movw	r24, r22
    1a7c:	80 5d       	subi	r24, 0xD0	; 208
    1a7e:	0e 94 b2 08 	call	0x1164	; 0x1164 <USART_Transmit>
			USART_Transmit((((word - (word/1000)*1000) % 100) / 10) + 48);
    1a82:	89 81       	ldd	r24, Y+1	; 0x01
    1a84:	9a 81       	ldd	r25, Y+2	; 0x02
    1a86:	28 ee       	ldi	r18, 0xE8	; 232
    1a88:	33 e0       	ldi	r19, 0x03	; 3
    1a8a:	b9 01       	movw	r22, r18
    1a8c:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <__divmodhi4>
    1a90:	24 e6       	ldi	r18, 0x64	; 100
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	b9 01       	movw	r22, r18
    1a96:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <__divmodhi4>
    1a9a:	2a e0       	ldi	r18, 0x0A	; 10
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	b9 01       	movw	r22, r18
    1aa0:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <__divmodhi4>
    1aa4:	cb 01       	movw	r24, r22
    1aa6:	80 5d       	subi	r24, 0xD0	; 208
    1aa8:	0e 94 b2 08 	call	0x1164	; 0x1164 <USART_Transmit>
			USART_Transmit((( (word - (word/1000)*1000) % 100) - (word - ((word/1000)*1000) % 100)/10)*10 +48);
    1aac:	89 81       	ldd	r24, Y+1	; 0x01
    1aae:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab0:	28 ee       	ldi	r18, 0xE8	; 232
    1ab2:	33 e0       	ldi	r19, 0x03	; 3
    1ab4:	b9 01       	movw	r22, r18
    1ab6:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <__divmodhi4>
    1aba:	24 e6       	ldi	r18, 0x64	; 100
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	b9 01       	movw	r22, r18
    1ac0:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <__divmodhi4>
    1ac4:	9c 01       	movw	r18, r24
    1ac6:	89 81       	ldd	r24, Y+1	; 0x01
    1ac8:	9a 81       	ldd	r25, Y+2	; 0x02
    1aca:	48 ee       	ldi	r20, 0xE8	; 232
    1acc:	53 e0       	ldi	r21, 0x03	; 3
    1ace:	ba 01       	movw	r22, r20
    1ad0:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <__divmodhi4>
    1ad4:	cb 01       	movw	r24, r22
    1ad6:	bc 01       	movw	r22, r24
    1ad8:	48 ee       	ldi	r20, 0xE8	; 232
    1ada:	53 e0       	ldi	r21, 0x03	; 3
    1adc:	64 9f       	mul	r22, r20
    1ade:	c0 01       	movw	r24, r0
    1ae0:	65 9f       	mul	r22, r21
    1ae2:	90 0d       	add	r25, r0
    1ae4:	74 9f       	mul	r23, r20
    1ae6:	90 0d       	add	r25, r0
    1ae8:	11 24       	eor	r1, r1
    1aea:	44 e6       	ldi	r20, 0x64	; 100
    1aec:	50 e0       	ldi	r21, 0x00	; 0
    1aee:	ba 01       	movw	r22, r20
    1af0:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <__divmodhi4>
    1af4:	49 81       	ldd	r20, Y+1	; 0x01
    1af6:	5a 81       	ldd	r21, Y+2	; 0x02
    1af8:	ba 01       	movw	r22, r20
    1afa:	68 1b       	sub	r22, r24
    1afc:	79 0b       	sbc	r23, r25
    1afe:	cb 01       	movw	r24, r22
    1b00:	4a e0       	ldi	r20, 0x0A	; 10
    1b02:	50 e0       	ldi	r21, 0x00	; 0
    1b04:	ba 01       	movw	r22, r20
    1b06:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <__divmodhi4>
    1b0a:	cb 01       	movw	r24, r22
    1b0c:	a9 01       	movw	r20, r18
    1b0e:	48 1b       	sub	r20, r24
    1b10:	59 0b       	sbc	r21, r25
    1b12:	ca 01       	movw	r24, r20
    1b14:	88 0f       	add	r24, r24
    1b16:	98 2f       	mov	r25, r24
    1b18:	99 0f       	add	r25, r25
    1b1a:	99 0f       	add	r25, r25
    1b1c:	89 0f       	add	r24, r25
    1b1e:	80 5d       	subi	r24, 0xD0	; 208
    1b20:	0e 94 b2 08 	call	0x1164	; 0x1164 <USART_Transmit>
			USART_Transmit(0x0A);
    1b24:	8a e0       	ldi	r24, 0x0A	; 10
    1b26:	0e 94 b2 08 	call	0x1164	; 0x1164 <USART_Transmit>
    1b2a:	03 c0       	rjmp	.+6      	; 0x1b32 <USART_Transmit_16_dec_signed+0x1e6>
		}
		else{
			USART_Transmit('q');
    1b2c:	81 e7       	ldi	r24, 0x71	; 113
    1b2e:	0e 94 b2 08 	call	0x1164	; 0x1164 <USART_Transmit>
		}
	}
    1b32:	a6 96       	adiw	r28, 0x26	; 38
    1b34:	0f b6       	in	r0, 0x3f	; 63
    1b36:	f8 94       	cli
    1b38:	de bf       	out	0x3e, r29	; 62
    1b3a:	0f be       	out	0x3f, r0	; 63
    1b3c:	cd bf       	out	0x3d, r28	; 61
    1b3e:	df 91       	pop	r29
    1b40:	cf 91       	pop	r28
    1b42:	08 95       	ret

00001b44 <USART_Transmit_dec>:

void USART_Transmit_dec(int word){
    1b44:	cf 93       	push	r28
    1b46:	df 93       	push	r29
    1b48:	cd b7       	in	r28, 0x3d	; 61
    1b4a:	de b7       	in	r29, 0x3e	; 62
    1b4c:	6d 97       	sbiw	r28, 0x1d	; 29
    1b4e:	0f b6       	in	r0, 0x3f	; 63
    1b50:	f8 94       	cli
    1b52:	de bf       	out	0x3e, r29	; 62
    1b54:	0f be       	out	0x3f, r0	; 63
    1b56:	cd bf       	out	0x3d, r28	; 61
    1b58:	99 8f       	std	Y+25, r25	; 0x19
    1b5a:	88 8f       	std	Y+24, r24	; 0x18
	if (word < 0){
    1b5c:	88 8d       	ldd	r24, Y+24	; 0x18
    1b5e:	99 8d       	ldd	r25, Y+25	; 0x19
    1b60:	99 23       	and	r25, r25
    1b62:	54 f4       	brge	.+20     	; 0x1b78 <USART_Transmit_dec+0x34>
				USART_Transmit(0x2D);	// Minus sign
    1b64:	8d e2       	ldi	r24, 0x2D	; 45
    1b66:	0e 94 b2 08 	call	0x1164	; 0x1164 <USART_Transmit>
				word = ~word + 1;
    1b6a:	88 8d       	ldd	r24, Y+24	; 0x18
    1b6c:	99 8d       	ldd	r25, Y+25	; 0x19
    1b6e:	91 95       	neg	r25
    1b70:	81 95       	neg	r24
    1b72:	91 09       	sbc	r25, r1
    1b74:	99 8f       	std	Y+25, r25	; 0x19
    1b76:	88 8f       	std	Y+24, r24	; 0x18
	}

	char tmp[20];
	char count = 0;
    1b78:	19 82       	std	Y+1, r1	; 0x01
	while(word > 9){
    1b7a:	1e c0       	rjmp	.+60     	; 0x1bb8 <USART_Transmit_dec+0x74>
		tmp[count] = word%10;
    1b7c:	89 81       	ldd	r24, Y+1	; 0x01
    1b7e:	28 2f       	mov	r18, r24
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	88 8d       	ldd	r24, Y+24	; 0x18
    1b84:	99 8d       	ldd	r25, Y+25	; 0x19
    1b86:	4a e0       	ldi	r20, 0x0A	; 10
    1b88:	50 e0       	ldi	r21, 0x00	; 0
    1b8a:	ba 01       	movw	r22, r20
    1b8c:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <__divmodhi4>
    1b90:	48 2f       	mov	r20, r24
    1b92:	ce 01       	movw	r24, r28
    1b94:	04 96       	adiw	r24, 0x04	; 4
    1b96:	82 0f       	add	r24, r18
    1b98:	93 1f       	adc	r25, r19
    1b9a:	fc 01       	movw	r30, r24
    1b9c:	40 83       	st	Z, r20
		word = word/10;
    1b9e:	88 8d       	ldd	r24, Y+24	; 0x18
    1ba0:	99 8d       	ldd	r25, Y+25	; 0x19
    1ba2:	2a e0       	ldi	r18, 0x0A	; 10
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	b9 01       	movw	r22, r18
    1ba8:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <__divmodhi4>
    1bac:	cb 01       	movw	r24, r22
    1bae:	99 8f       	std	Y+25, r25	; 0x19
    1bb0:	88 8f       	std	Y+24, r24	; 0x18
		count++;
    1bb2:	89 81       	ldd	r24, Y+1	; 0x01
    1bb4:	8f 5f       	subi	r24, 0xFF	; 255
    1bb6:	89 83       	std	Y+1, r24	; 0x01
				word = ~word + 1;
	}

	char tmp[20];
	char count = 0;
	while(word > 9){
    1bb8:	88 8d       	ldd	r24, Y+24	; 0x18
    1bba:	99 8d       	ldd	r25, Y+25	; 0x19
    1bbc:	8a 30       	cpi	r24, 0x0A	; 10
    1bbe:	91 05       	cpc	r25, r1
    1bc0:	ec f6       	brge	.-70     	; 0x1b7c <USART_Transmit_dec+0x38>
		tmp[count] = word%10;
		word = word/10;
		count++;
	}
	tmp[count] = word;
    1bc2:	89 81       	ldd	r24, Y+1	; 0x01
    1bc4:	88 2f       	mov	r24, r24
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	48 8d       	ldd	r20, Y+24	; 0x18
    1bca:	9e 01       	movw	r18, r28
    1bcc:	2c 5f       	subi	r18, 0xFC	; 252
    1bce:	3f 4f       	sbci	r19, 0xFF	; 255
    1bd0:	82 0f       	add	r24, r18
    1bd2:	93 1f       	adc	r25, r19
    1bd4:	fc 01       	movw	r30, r24
    1bd6:	40 83       	st	Z, r20
	for(int i = count; i >= 0; i--){
    1bd8:	89 81       	ldd	r24, Y+1	; 0x01
    1bda:	88 2f       	mov	r24, r24
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	9b 83       	std	Y+3, r25	; 0x03
    1be0:	8a 83       	std	Y+2, r24	; 0x02
    1be2:	11 c0       	rjmp	.+34     	; 0x1c06 <USART_Transmit_dec+0xc2>
		USART_Transmit(tmp[i] + 48);
    1be4:	9e 01       	movw	r18, r28
    1be6:	2c 5f       	subi	r18, 0xFC	; 252
    1be8:	3f 4f       	sbci	r19, 0xFF	; 255
    1bea:	8a 81       	ldd	r24, Y+2	; 0x02
    1bec:	9b 81       	ldd	r25, Y+3	; 0x03
    1bee:	82 0f       	add	r24, r18
    1bf0:	93 1f       	adc	r25, r19
    1bf2:	fc 01       	movw	r30, r24
    1bf4:	80 81       	ld	r24, Z
    1bf6:	80 5d       	subi	r24, 0xD0	; 208
    1bf8:	0e 94 b2 08 	call	0x1164	; 0x1164 <USART_Transmit>
		tmp[count] = word%10;
		word = word/10;
		count++;
	}
	tmp[count] = word;
	for(int i = count; i >= 0; i--){
    1bfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfe:	9b 81       	ldd	r25, Y+3	; 0x03
    1c00:	01 97       	sbiw	r24, 0x01	; 1
    1c02:	9b 83       	std	Y+3, r25	; 0x03
    1c04:	8a 83       	std	Y+2, r24	; 0x02
    1c06:	8a 81       	ldd	r24, Y+2	; 0x02
    1c08:	9b 81       	ldd	r25, Y+3	; 0x03
    1c0a:	99 23       	and	r25, r25
    1c0c:	5c f7       	brge	.-42     	; 0x1be4 <USART_Transmit_dec+0xa0>
		USART_Transmit(tmp[i] + 48);
	}
}
    1c0e:	6d 96       	adiw	r28, 0x1d	; 29
    1c10:	0f b6       	in	r0, 0x3f	; 63
    1c12:	f8 94       	cli
    1c14:	de bf       	out	0x3e, r29	; 62
    1c16:	0f be       	out	0x3f, r0	; 63
    1c18:	cd bf       	out	0x3d, r28	; 61
    1c1a:	df 91       	pop	r29
    1c1c:	cf 91       	pop	r28
    1c1e:	08 95       	ret

00001c20 <myPrintNL>:




void myPrintNL(unsigned char str[], unsigned char len){
    1c20:	cf 93       	push	r28
    1c22:	df 93       	push	r29
    1c24:	00 d0       	rcall	.+0      	; 0x1c26 <myPrintNL+0x6>
    1c26:	00 d0       	rcall	.+0      	; 0x1c28 <myPrintNL+0x8>
    1c28:	cd b7       	in	r28, 0x3d	; 61
    1c2a:	de b7       	in	r29, 0x3e	; 62
    1c2c:	9b 83       	std	Y+3, r25	; 0x03
    1c2e:	8a 83       	std	Y+2, r24	; 0x02
    1c30:	6c 83       	std	Y+4, r22	; 0x04
	for(unsigned char i = 0; i < len; i++){
    1c32:	19 82       	std	Y+1, r1	; 0x01
    1c34:	1a c0       	rjmp	.+52     	; 0x1c6a <myPrintNL+0x4a>
		if(str[i] == '\0'){
    1c36:	89 81       	ldd	r24, Y+1	; 0x01
    1c38:	88 2f       	mov	r24, r24
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	2a 81       	ldd	r18, Y+2	; 0x02
    1c3e:	3b 81       	ldd	r19, Y+3	; 0x03
    1c40:	82 0f       	add	r24, r18
    1c42:	93 1f       	adc	r25, r19
    1c44:	fc 01       	movw	r30, r24
    1c46:	80 81       	ld	r24, Z
    1c48:	88 23       	and	r24, r24
    1c4a:	09 f4       	brne	.+2      	; 0x1c4e <myPrintNL+0x2e>
			break;
    1c4c:	12 c0       	rjmp	.+36     	; 0x1c72 <myPrintNL+0x52>
		}
		USART_Transmit(str[i]);
    1c4e:	89 81       	ldd	r24, Y+1	; 0x01
    1c50:	88 2f       	mov	r24, r24
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	2a 81       	ldd	r18, Y+2	; 0x02
    1c56:	3b 81       	ldd	r19, Y+3	; 0x03
    1c58:	82 0f       	add	r24, r18
    1c5a:	93 1f       	adc	r25, r19
    1c5c:	fc 01       	movw	r30, r24
    1c5e:	80 81       	ld	r24, Z
    1c60:	0e 94 b2 08 	call	0x1164	; 0x1164 <USART_Transmit>




void myPrintNL(unsigned char str[], unsigned char len){
	for(unsigned char i = 0; i < len; i++){
    1c64:	89 81       	ldd	r24, Y+1	; 0x01
    1c66:	8f 5f       	subi	r24, 0xFF	; 255
    1c68:	89 83       	std	Y+1, r24	; 0x01
    1c6a:	99 81       	ldd	r25, Y+1	; 0x01
    1c6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c6e:	98 17       	cp	r25, r24
    1c70:	10 f3       	brcs	.-60     	; 0x1c36 <myPrintNL+0x16>
		if(str[i] == '\0'){
			break;
		}
		USART_Transmit(str[i]);
	}
	USART_Transmit(0x0A);
    1c72:	8a e0       	ldi	r24, 0x0A	; 10
    1c74:	0e 94 b2 08 	call	0x1164	; 0x1164 <USART_Transmit>
}
    1c78:	0f 90       	pop	r0
    1c7a:	0f 90       	pop	r0
    1c7c:	0f 90       	pop	r0
    1c7e:	0f 90       	pop	r0
    1c80:	df 91       	pop	r29
    1c82:	cf 91       	pop	r28
    1c84:	08 95       	ret

00001c86 <myPrint>:

void myPrint(unsigned char str[], unsigned char len){
    1c86:	cf 93       	push	r28
    1c88:	df 93       	push	r29
    1c8a:	00 d0       	rcall	.+0      	; 0x1c8c <myPrint+0x6>
    1c8c:	00 d0       	rcall	.+0      	; 0x1c8e <myPrint+0x8>
    1c8e:	cd b7       	in	r28, 0x3d	; 61
    1c90:	de b7       	in	r29, 0x3e	; 62
    1c92:	9b 83       	std	Y+3, r25	; 0x03
    1c94:	8a 83       	std	Y+2, r24	; 0x02
    1c96:	6c 83       	std	Y+4, r22	; 0x04
	for(unsigned char i = 0; i < len; i++){
    1c98:	19 82       	std	Y+1, r1	; 0x01
    1c9a:	1a c0       	rjmp	.+52     	; 0x1cd0 <myPrint+0x4a>
		if(str[i] == '\0'){
    1c9c:	89 81       	ldd	r24, Y+1	; 0x01
    1c9e:	88 2f       	mov	r24, r24
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	2a 81       	ldd	r18, Y+2	; 0x02
    1ca4:	3b 81       	ldd	r19, Y+3	; 0x03
    1ca6:	82 0f       	add	r24, r18
    1ca8:	93 1f       	adc	r25, r19
    1caa:	fc 01       	movw	r30, r24
    1cac:	80 81       	ld	r24, Z
    1cae:	88 23       	and	r24, r24
    1cb0:	09 f4       	brne	.+2      	; 0x1cb4 <myPrint+0x2e>
			break;
    1cb2:	12 c0       	rjmp	.+36     	; 0x1cd8 <myPrint+0x52>
		}
		USART_Transmit(str[i]);
    1cb4:	89 81       	ldd	r24, Y+1	; 0x01
    1cb6:	88 2f       	mov	r24, r24
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	2a 81       	ldd	r18, Y+2	; 0x02
    1cbc:	3b 81       	ldd	r19, Y+3	; 0x03
    1cbe:	82 0f       	add	r24, r18
    1cc0:	93 1f       	adc	r25, r19
    1cc2:	fc 01       	movw	r30, r24
    1cc4:	80 81       	ld	r24, Z
    1cc6:	0e 94 b2 08 	call	0x1164	; 0x1164 <USART_Transmit>
	}
	USART_Transmit(0x0A);
}

void myPrint(unsigned char str[], unsigned char len){
	for(unsigned char i = 0; i < len; i++){
    1cca:	89 81       	ldd	r24, Y+1	; 0x01
    1ccc:	8f 5f       	subi	r24, 0xFF	; 255
    1cce:	89 83       	std	Y+1, r24	; 0x01
    1cd0:	99 81       	ldd	r25, Y+1	; 0x01
    1cd2:	8c 81       	ldd	r24, Y+4	; 0x04
    1cd4:	98 17       	cp	r25, r24
    1cd6:	10 f3       	brcs	.-60     	; 0x1c9c <myPrint+0x16>
		if(str[i] == '\0'){
			break;
		}
		USART_Transmit(str[i]);
	}
}
    1cd8:	0f 90       	pop	r0
    1cda:	0f 90       	pop	r0
    1cdc:	0f 90       	pop	r0
    1cde:	0f 90       	pop	r0
    1ce0:	df 91       	pop	r29
    1ce2:	cf 91       	pop	r28
    1ce4:	08 95       	ret

00001ce6 <__vector_18>:


ISR(USART_RX_vect){
    1ce6:	1f 92       	push	r1
    1ce8:	0f 92       	push	r0
    1cea:	00 90 5f 00 	lds	r0, 0x005F
    1cee:	0f 92       	push	r0
    1cf0:	11 24       	eor	r1, r1
    1cf2:	8f 93       	push	r24
    1cf4:	9f 93       	push	r25
    1cf6:	ef 93       	push	r30
    1cf8:	ff 93       	push	r31
    1cfa:	cf 93       	push	r28
    1cfc:	df 93       	push	r29
    1cfe:	cd b7       	in	r28, 0x3d	; 61
    1d00:	de b7       	in	r29, 0x3e	; 62
	// dataReceived variable to allow the main function to know when new data is available
	dataReceived = 1;
    1d02:	81 e0       	ldi	r24, 0x01	; 1
    1d04:	80 93 d8 01 	sts	0x01D8, r24
	// Write the data from the USART I/O register to a buffer
	rxBuffer = UDR0;
    1d08:	86 ec       	ldi	r24, 0xC6	; 198
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	fc 01       	movw	r30, r24
    1d0e:	80 81       	ld	r24, Z
    1d10:	80 93 ee 01 	sts	0x01EE, r24
}
    1d14:	df 91       	pop	r29
    1d16:	cf 91       	pop	r28
    1d18:	ff 91       	pop	r31
    1d1a:	ef 91       	pop	r30
    1d1c:	9f 91       	pop	r25
    1d1e:	8f 91       	pop	r24
    1d20:	0f 90       	pop	r0
    1d22:	00 92 5f 00 	sts	0x005F, r0
    1d26:	0f 90       	pop	r0
    1d28:	1f 90       	pop	r1
    1d2a:	18 95       	reti

00001d2c <SPI_MasterInit>:


#include "spi_comm.h"
#include "myUSART.h"

void SPI_MasterInit(void){
    1d2c:	cf 93       	push	r28
    1d2e:	df 93       	push	r29
    1d30:	cd b7       	in	r28, 0x3d	; 61
    1d32:	de b7       	in	r29, 0x3e	; 62
    1d34:	e2 97       	sbiw	r28, 0x32	; 50
    1d36:	0f b6       	in	r0, 0x3f	; 63
    1d38:	f8 94       	cli
    1d3a:	de bf       	out	0x3e, r29	; 62
    1d3c:	0f be       	out	0x3f, r0	; 63
    1d3e:	cd bf       	out	0x3d, r28	; 61
	unsigned char initializingSPI[50] = "Initializing SPI now\0";
    1d40:	26 e1       	ldi	r18, 0x16	; 22
    1d42:	e5 e4       	ldi	r30, 0x45	; 69
    1d44:	f1 e0       	ldi	r31, 0x01	; 1
    1d46:	ce 01       	movw	r24, r28
    1d48:	01 96       	adiw	r24, 0x01	; 1
    1d4a:	dc 01       	movw	r26, r24
    1d4c:	01 90       	ld	r0, Z+
    1d4e:	0d 92       	st	X+, r0
    1d50:	2a 95       	dec	r18
    1d52:	e1 f7       	brne	.-8      	; 0x1d4c <SPI_MasterInit+0x20>
    1d54:	2c e1       	ldi	r18, 0x1C	; 28
    1d56:	ce 01       	movw	r24, r28
    1d58:	47 96       	adiw	r24, 0x17	; 23
    1d5a:	fc 01       	movw	r30, r24
    1d5c:	32 2f       	mov	r19, r18
    1d5e:	11 92       	st	Z+, r1
    1d60:	3a 95       	dec	r19
    1d62:	e9 f7       	brne	.-6      	; 0x1d5e <SPI_MasterInit+0x32>
	myPrint(initializingSPI,21);
    1d64:	65 e1       	ldi	r22, 0x15	; 21
    1d66:	ce 01       	movw	r24, r28
    1d68:	01 96       	adiw	r24, 0x01	; 1
    1d6a:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <myPrint>
	// set MOSI, SCK and SS as output, all others are inputs.
	DDR_SPI = ( 1 << SPI_MOSI ) | ( 1 << SPI_SCK ) | ( 1 << SPI_SS );
    1d6e:	84 e2       	ldi	r24, 0x24	; 36
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	2c e2       	ldi	r18, 0x2C	; 44
    1d74:	fc 01       	movw	r30, r24
    1d76:	20 83       	st	Z, r18

	// Ensure that the SS line is high (no transmission) when the initialization is finished
	SPI_PORT |= ( 1 << SPI_SS );
    1d78:	85 e2       	ldi	r24, 0x25	; 37
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	25 e2       	ldi	r18, 0x25	; 37
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	f9 01       	movw	r30, r18
    1d82:	20 81       	ld	r18, Z
    1d84:	24 60       	ori	r18, 0x04	; 4
    1d86:	fc 01       	movw	r30, r24
    1d88:	20 83       	st	Z, r18

	// SPI Control Register
	// SPE bit: SPI Enable
	// MSTR bit: Master select bit
	// SPR0 bit: Clock select bit, sets clock rate to Fosc/16
	SPCR = ( 1 << SPE ) | ( 1 << MSTR ) | ( 1 << SPR1 );// | ( 1 << SPR0 );
    1d8a:	8c e4       	ldi	r24, 0x4C	; 76
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	22 e5       	ldi	r18, 0x52	; 82
    1d90:	fc 01       	movw	r30, r24
    1d92:	20 83       	st	Z, r18

	// Set data sampling at the trailing edge of SCK, sets the clock polarity such that SCK is high when idle
	SPCR |= ( 1 << CPHA ) | ( 1 << CPOL );
    1d94:	8c e4       	ldi	r24, 0x4C	; 76
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	2c e4       	ldi	r18, 0x4C	; 76
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	f9 01       	movw	r30, r18
    1d9e:	20 81       	ld	r18, Z
    1da0:	2c 60       	ori	r18, 0x0C	; 12
    1da2:	fc 01       	movw	r30, r24
    1da4:	20 83       	st	Z, r18
}
    1da6:	e2 96       	adiw	r28, 0x32	; 50
    1da8:	0f b6       	in	r0, 0x3f	; 63
    1daa:	f8 94       	cli
    1dac:	de bf       	out	0x3e, r29	; 62
    1dae:	0f be       	out	0x3f, r0	; 63
    1db0:	cd bf       	out	0x3d, r28	; 61
    1db2:	df 91       	pop	r29
    1db4:	cf 91       	pop	r28
    1db6:	08 95       	ret

00001db8 <SPI_MasterTransmit>:

char SPI_MasterTransmit(char cData){
    1db8:	cf 93       	push	r28
    1dba:	df 93       	push	r29
    1dbc:	1f 92       	push	r1
    1dbe:	cd b7       	in	r28, 0x3d	; 61
    1dc0:	de b7       	in	r29, 0x3e	; 62
    1dc2:	89 83       	std	Y+1, r24	; 0x01
	//unsigned char transmitting[50] = "Transmitting over SPI now\0";
	//myPrint(transmitting,30);
	// SPI Data Register, transfers data between register file and the SPI shift register
	//USART_Transmit_8_hex(cData);
	SPDR = cData;
    1dc4:	8e e4       	ldi	r24, 0x4E	; 78
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	29 81       	ldd	r18, Y+1	; 0x01
    1dca:	fc 01       	movw	r30, r24
    1dcc:	20 83       	st	Z, r18
	//asm volatile("nop");	// This is supposed to help

	// Wait for transmission to complete
	// SPI Status Register
	// SPIF bit: SPI Interrupt Flag, it is set when a serial transfer is complete
	while ( !( SPSR & ( 1 << SPIF ) ) );
    1dce:	00 00       	nop
    1dd0:	8d e4       	ldi	r24, 0x4D	; 77
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	fc 01       	movw	r30, r24
    1dd6:	80 81       	ld	r24, Z
    1dd8:	88 23       	and	r24, r24
    1dda:	d4 f7       	brge	.-12     	; 0x1dd0 <SPI_MasterTransmit+0x18>
	if(!(SPCR & ( 1 << MSTR) ) ){SPCR |= ( 1 << MSTR);}
    1ddc:	8c e4       	ldi	r24, 0x4C	; 76
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	fc 01       	movw	r30, r24
    1de2:	80 81       	ld	r24, Z
    1de4:	88 2f       	mov	r24, r24
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	80 71       	andi	r24, 0x10	; 16
    1dea:	99 27       	eor	r25, r25
    1dec:	00 97       	sbiw	r24, 0x00	; 0
    1dee:	49 f4       	brne	.+18     	; 0x1e02 <SPI_MasterTransmit+0x4a>
    1df0:	8c e4       	ldi	r24, 0x4C	; 76
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	2c e4       	ldi	r18, 0x4C	; 76
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	f9 01       	movw	r30, r18
    1dfa:	20 81       	ld	r18, Z
    1dfc:	20 61       	ori	r18, 0x10	; 16
    1dfe:	fc 01       	movw	r30, r24
    1e00:	20 83       	st	Z, r18

	return SPDR;
    1e02:	8e e4       	ldi	r24, 0x4E	; 78
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	fc 01       	movw	r30, r24
    1e08:	80 81       	ld	r24, Z
}
    1e0a:	0f 90       	pop	r0
    1e0c:	df 91       	pop	r29
    1e0e:	cf 91       	pop	r28
    1e10:	08 95       	ret

00001e12 <__mulsi3>:
    1e12:	db 01       	movw	r26, r22
    1e14:	8f 93       	push	r24
    1e16:	9f 93       	push	r25
    1e18:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <__muluhisi3>
    1e1c:	bf 91       	pop	r27
    1e1e:	af 91       	pop	r26
    1e20:	a2 9f       	mul	r26, r18
    1e22:	80 0d       	add	r24, r0
    1e24:	91 1d       	adc	r25, r1
    1e26:	a3 9f       	mul	r26, r19
    1e28:	90 0d       	add	r25, r0
    1e2a:	b2 9f       	mul	r27, r18
    1e2c:	90 0d       	add	r25, r0
    1e2e:	11 24       	eor	r1, r1
    1e30:	08 95       	ret

00001e32 <__divmodhi4>:
    1e32:	97 fb       	bst	r25, 7
    1e34:	07 2e       	mov	r0, r23
    1e36:	16 f4       	brtc	.+4      	; 0x1e3c <__divmodhi4+0xa>
    1e38:	00 94       	com	r0
    1e3a:	07 d0       	rcall	.+14     	; 0x1e4a <__divmodhi4_neg1>
    1e3c:	77 fd       	sbrc	r23, 7
    1e3e:	09 d0       	rcall	.+18     	; 0x1e52 <__divmodhi4_neg2>
    1e40:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <__udivmodhi4>
    1e44:	07 fc       	sbrc	r0, 7
    1e46:	05 d0       	rcall	.+10     	; 0x1e52 <__divmodhi4_neg2>
    1e48:	3e f4       	brtc	.+14     	; 0x1e58 <__divmodhi4_exit>

00001e4a <__divmodhi4_neg1>:
    1e4a:	90 95       	com	r25
    1e4c:	81 95       	neg	r24
    1e4e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e50:	08 95       	ret

00001e52 <__divmodhi4_neg2>:
    1e52:	70 95       	com	r23
    1e54:	61 95       	neg	r22
    1e56:	7f 4f       	sbci	r23, 0xFF	; 255

00001e58 <__divmodhi4_exit>:
    1e58:	08 95       	ret

00001e5a <__divmodsi4>:
    1e5a:	05 2e       	mov	r0, r21
    1e5c:	97 fb       	bst	r25, 7
    1e5e:	1e f4       	brtc	.+6      	; 0x1e66 <__divmodsi4+0xc>
    1e60:	00 94       	com	r0
    1e62:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <__negsi2>
    1e66:	57 fd       	sbrc	r21, 7
    1e68:	07 d0       	rcall	.+14     	; 0x1e78 <__divmodsi4_neg2>
    1e6a:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <__udivmodsi4>
    1e6e:	07 fc       	sbrc	r0, 7
    1e70:	03 d0       	rcall	.+6      	; 0x1e78 <__divmodsi4_neg2>
    1e72:	4e f4       	brtc	.+18     	; 0x1e86 <__divmodsi4_exit>
    1e74:	0c 94 44 0f 	jmp	0x1e88	; 0x1e88 <__negsi2>

00001e78 <__divmodsi4_neg2>:
    1e78:	50 95       	com	r21
    1e7a:	40 95       	com	r20
    1e7c:	30 95       	com	r19
    1e7e:	21 95       	neg	r18
    1e80:	3f 4f       	sbci	r19, 0xFF	; 255
    1e82:	4f 4f       	sbci	r20, 0xFF	; 255
    1e84:	5f 4f       	sbci	r21, 0xFF	; 255

00001e86 <__divmodsi4_exit>:
    1e86:	08 95       	ret

00001e88 <__negsi2>:
    1e88:	90 95       	com	r25
    1e8a:	80 95       	com	r24
    1e8c:	70 95       	com	r23
    1e8e:	61 95       	neg	r22
    1e90:	7f 4f       	sbci	r23, 0xFF	; 255
    1e92:	8f 4f       	sbci	r24, 0xFF	; 255
    1e94:	9f 4f       	sbci	r25, 0xFF	; 255
    1e96:	08 95       	ret

00001e98 <__umulhisi3>:
    1e98:	a2 9f       	mul	r26, r18
    1e9a:	b0 01       	movw	r22, r0
    1e9c:	b3 9f       	mul	r27, r19
    1e9e:	c0 01       	movw	r24, r0
    1ea0:	a3 9f       	mul	r26, r19
    1ea2:	70 0d       	add	r23, r0
    1ea4:	81 1d       	adc	r24, r1
    1ea6:	11 24       	eor	r1, r1
    1ea8:	91 1d       	adc	r25, r1
    1eaa:	b2 9f       	mul	r27, r18
    1eac:	70 0d       	add	r23, r0
    1eae:	81 1d       	adc	r24, r1
    1eb0:	11 24       	eor	r1, r1
    1eb2:	91 1d       	adc	r25, r1
    1eb4:	08 95       	ret

00001eb6 <__muluhisi3>:
    1eb6:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <__umulhisi3>
    1eba:	a5 9f       	mul	r26, r21
    1ebc:	90 0d       	add	r25, r0
    1ebe:	b4 9f       	mul	r27, r20
    1ec0:	90 0d       	add	r25, r0
    1ec2:	a4 9f       	mul	r26, r20
    1ec4:	80 0d       	add	r24, r0
    1ec6:	91 1d       	adc	r25, r1
    1ec8:	11 24       	eor	r1, r1
    1eca:	08 95       	ret

00001ecc <__udivmodhi4>:
    1ecc:	aa 1b       	sub	r26, r26
    1ece:	bb 1b       	sub	r27, r27
    1ed0:	51 e1       	ldi	r21, 0x11	; 17
    1ed2:	07 c0       	rjmp	.+14     	; 0x1ee2 <__udivmodhi4_ep>

00001ed4 <__udivmodhi4_loop>:
    1ed4:	aa 1f       	adc	r26, r26
    1ed6:	bb 1f       	adc	r27, r27
    1ed8:	a6 17       	cp	r26, r22
    1eda:	b7 07       	cpc	r27, r23
    1edc:	10 f0       	brcs	.+4      	; 0x1ee2 <__udivmodhi4_ep>
    1ede:	a6 1b       	sub	r26, r22
    1ee0:	b7 0b       	sbc	r27, r23

00001ee2 <__udivmodhi4_ep>:
    1ee2:	88 1f       	adc	r24, r24
    1ee4:	99 1f       	adc	r25, r25
    1ee6:	5a 95       	dec	r21
    1ee8:	a9 f7       	brne	.-22     	; 0x1ed4 <__udivmodhi4_loop>
    1eea:	80 95       	com	r24
    1eec:	90 95       	com	r25
    1eee:	bc 01       	movw	r22, r24
    1ef0:	cd 01       	movw	r24, r26
    1ef2:	08 95       	ret

00001ef4 <__udivmodsi4>:
    1ef4:	a1 e2       	ldi	r26, 0x21	; 33
    1ef6:	1a 2e       	mov	r1, r26
    1ef8:	aa 1b       	sub	r26, r26
    1efa:	bb 1b       	sub	r27, r27
    1efc:	fd 01       	movw	r30, r26
    1efe:	0d c0       	rjmp	.+26     	; 0x1f1a <__udivmodsi4_ep>

00001f00 <__udivmodsi4_loop>:
    1f00:	aa 1f       	adc	r26, r26
    1f02:	bb 1f       	adc	r27, r27
    1f04:	ee 1f       	adc	r30, r30
    1f06:	ff 1f       	adc	r31, r31
    1f08:	a2 17       	cp	r26, r18
    1f0a:	b3 07       	cpc	r27, r19
    1f0c:	e4 07       	cpc	r30, r20
    1f0e:	f5 07       	cpc	r31, r21
    1f10:	20 f0       	brcs	.+8      	; 0x1f1a <__udivmodsi4_ep>
    1f12:	a2 1b       	sub	r26, r18
    1f14:	b3 0b       	sbc	r27, r19
    1f16:	e4 0b       	sbc	r30, r20
    1f18:	f5 0b       	sbc	r31, r21

00001f1a <__udivmodsi4_ep>:
    1f1a:	66 1f       	adc	r22, r22
    1f1c:	77 1f       	adc	r23, r23
    1f1e:	88 1f       	adc	r24, r24
    1f20:	99 1f       	adc	r25, r25
    1f22:	1a 94       	dec	r1
    1f24:	69 f7       	brne	.-38     	; 0x1f00 <__udivmodsi4_loop>
    1f26:	60 95       	com	r22
    1f28:	70 95       	com	r23
    1f2a:	80 95       	com	r24
    1f2c:	90 95       	com	r25
    1f2e:	9b 01       	movw	r18, r22
    1f30:	ac 01       	movw	r20, r24
    1f32:	bd 01       	movw	r22, r26
    1f34:	cf 01       	movw	r24, r30
    1f36:	08 95       	ret

00001f38 <__subsf3>:
    1f38:	50 58       	subi	r21, 0x80	; 128

00001f3a <__addsf3>:
    1f3a:	bb 27       	eor	r27, r27
    1f3c:	aa 27       	eor	r26, r26
    1f3e:	0e d0       	rcall	.+28     	; 0x1f5c <__addsf3x>
    1f40:	08 c1       	rjmp	.+528    	; 0x2152 <__fp_round>
    1f42:	f9 d0       	rcall	.+498    	; 0x2136 <__fp_pscA>
    1f44:	30 f0       	brcs	.+12     	; 0x1f52 <__addsf3+0x18>
    1f46:	fe d0       	rcall	.+508    	; 0x2144 <__fp_pscB>
    1f48:	20 f0       	brcs	.+8      	; 0x1f52 <__addsf3+0x18>
    1f4a:	31 f4       	brne	.+12     	; 0x1f58 <__addsf3+0x1e>
    1f4c:	9f 3f       	cpi	r25, 0xFF	; 255
    1f4e:	11 f4       	brne	.+4      	; 0x1f54 <__addsf3+0x1a>
    1f50:	1e f4       	brtc	.+6      	; 0x1f58 <__addsf3+0x1e>
    1f52:	ee c0       	rjmp	.+476    	; 0x2130 <__fp_nan>
    1f54:	0e f4       	brtc	.+2      	; 0x1f58 <__addsf3+0x1e>
    1f56:	e0 95       	com	r30
    1f58:	e7 fb       	bst	r30, 7
    1f5a:	e4 c0       	rjmp	.+456    	; 0x2124 <__fp_inf>

00001f5c <__addsf3x>:
    1f5c:	e9 2f       	mov	r30, r25
    1f5e:	0a d1       	rcall	.+532    	; 0x2174 <__fp_split3>
    1f60:	80 f3       	brcs	.-32     	; 0x1f42 <__addsf3+0x8>
    1f62:	ba 17       	cp	r27, r26
    1f64:	62 07       	cpc	r22, r18
    1f66:	73 07       	cpc	r23, r19
    1f68:	84 07       	cpc	r24, r20
    1f6a:	95 07       	cpc	r25, r21
    1f6c:	18 f0       	brcs	.+6      	; 0x1f74 <__addsf3x+0x18>
    1f6e:	71 f4       	brne	.+28     	; 0x1f8c <__addsf3x+0x30>
    1f70:	9e f5       	brtc	.+102    	; 0x1fd8 <__addsf3x+0x7c>
    1f72:	22 c1       	rjmp	.+580    	; 0x21b8 <__fp_zero>
    1f74:	0e f4       	brtc	.+2      	; 0x1f78 <__addsf3x+0x1c>
    1f76:	e0 95       	com	r30
    1f78:	0b 2e       	mov	r0, r27
    1f7a:	ba 2f       	mov	r27, r26
    1f7c:	a0 2d       	mov	r26, r0
    1f7e:	0b 01       	movw	r0, r22
    1f80:	b9 01       	movw	r22, r18
    1f82:	90 01       	movw	r18, r0
    1f84:	0c 01       	movw	r0, r24
    1f86:	ca 01       	movw	r24, r20
    1f88:	a0 01       	movw	r20, r0
    1f8a:	11 24       	eor	r1, r1
    1f8c:	ff 27       	eor	r31, r31
    1f8e:	59 1b       	sub	r21, r25
    1f90:	99 f0       	breq	.+38     	; 0x1fb8 <__addsf3x+0x5c>
    1f92:	59 3f       	cpi	r21, 0xF9	; 249
    1f94:	50 f4       	brcc	.+20     	; 0x1faa <__addsf3x+0x4e>
    1f96:	50 3e       	cpi	r21, 0xE0	; 224
    1f98:	68 f1       	brcs	.+90     	; 0x1ff4 <__addsf3x+0x98>
    1f9a:	1a 16       	cp	r1, r26
    1f9c:	f0 40       	sbci	r31, 0x00	; 0
    1f9e:	a2 2f       	mov	r26, r18
    1fa0:	23 2f       	mov	r18, r19
    1fa2:	34 2f       	mov	r19, r20
    1fa4:	44 27       	eor	r20, r20
    1fa6:	58 5f       	subi	r21, 0xF8	; 248
    1fa8:	f3 cf       	rjmp	.-26     	; 0x1f90 <__addsf3x+0x34>
    1faa:	46 95       	lsr	r20
    1fac:	37 95       	ror	r19
    1fae:	27 95       	ror	r18
    1fb0:	a7 95       	ror	r26
    1fb2:	f0 40       	sbci	r31, 0x00	; 0
    1fb4:	53 95       	inc	r21
    1fb6:	c9 f7       	brne	.-14     	; 0x1faa <__addsf3x+0x4e>
    1fb8:	7e f4       	brtc	.+30     	; 0x1fd8 <__addsf3x+0x7c>
    1fba:	1f 16       	cp	r1, r31
    1fbc:	ba 0b       	sbc	r27, r26
    1fbe:	62 0b       	sbc	r22, r18
    1fc0:	73 0b       	sbc	r23, r19
    1fc2:	84 0b       	sbc	r24, r20
    1fc4:	ba f0       	brmi	.+46     	; 0x1ff4 <__addsf3x+0x98>
    1fc6:	91 50       	subi	r25, 0x01	; 1
    1fc8:	a1 f0       	breq	.+40     	; 0x1ff2 <__addsf3x+0x96>
    1fca:	ff 0f       	add	r31, r31
    1fcc:	bb 1f       	adc	r27, r27
    1fce:	66 1f       	adc	r22, r22
    1fd0:	77 1f       	adc	r23, r23
    1fd2:	88 1f       	adc	r24, r24
    1fd4:	c2 f7       	brpl	.-16     	; 0x1fc6 <__addsf3x+0x6a>
    1fd6:	0e c0       	rjmp	.+28     	; 0x1ff4 <__addsf3x+0x98>
    1fd8:	ba 0f       	add	r27, r26
    1fda:	62 1f       	adc	r22, r18
    1fdc:	73 1f       	adc	r23, r19
    1fde:	84 1f       	adc	r24, r20
    1fe0:	48 f4       	brcc	.+18     	; 0x1ff4 <__addsf3x+0x98>
    1fe2:	87 95       	ror	r24
    1fe4:	77 95       	ror	r23
    1fe6:	67 95       	ror	r22
    1fe8:	b7 95       	ror	r27
    1fea:	f7 95       	ror	r31
    1fec:	9e 3f       	cpi	r25, 0xFE	; 254
    1fee:	08 f0       	brcs	.+2      	; 0x1ff2 <__addsf3x+0x96>
    1ff0:	b3 cf       	rjmp	.-154    	; 0x1f58 <__addsf3+0x1e>
    1ff2:	93 95       	inc	r25
    1ff4:	88 0f       	add	r24, r24
    1ff6:	08 f0       	brcs	.+2      	; 0x1ffa <__addsf3x+0x9e>
    1ff8:	99 27       	eor	r25, r25
    1ffa:	ee 0f       	add	r30, r30
    1ffc:	97 95       	ror	r25
    1ffe:	87 95       	ror	r24
    2000:	08 95       	ret

00002002 <__cmpsf2>:
    2002:	6c d0       	rcall	.+216    	; 0x20dc <__fp_cmp>
    2004:	08 f4       	brcc	.+2      	; 0x2008 <__cmpsf2+0x6>
    2006:	81 e0       	ldi	r24, 0x01	; 1
    2008:	08 95       	ret

0000200a <__fixunssfsi>:
    200a:	bc d0       	rcall	.+376    	; 0x2184 <__fp_splitA>
    200c:	88 f0       	brcs	.+34     	; 0x2030 <__fixunssfsi+0x26>
    200e:	9f 57       	subi	r25, 0x7F	; 127
    2010:	90 f0       	brcs	.+36     	; 0x2036 <__fixunssfsi+0x2c>
    2012:	b9 2f       	mov	r27, r25
    2014:	99 27       	eor	r25, r25
    2016:	b7 51       	subi	r27, 0x17	; 23
    2018:	a0 f0       	brcs	.+40     	; 0x2042 <__fixunssfsi+0x38>
    201a:	d1 f0       	breq	.+52     	; 0x2050 <__fixunssfsi+0x46>
    201c:	66 0f       	add	r22, r22
    201e:	77 1f       	adc	r23, r23
    2020:	88 1f       	adc	r24, r24
    2022:	99 1f       	adc	r25, r25
    2024:	1a f0       	brmi	.+6      	; 0x202c <__fixunssfsi+0x22>
    2026:	ba 95       	dec	r27
    2028:	c9 f7       	brne	.-14     	; 0x201c <__fixunssfsi+0x12>
    202a:	12 c0       	rjmp	.+36     	; 0x2050 <__fixunssfsi+0x46>
    202c:	b1 30       	cpi	r27, 0x01	; 1
    202e:	81 f0       	breq	.+32     	; 0x2050 <__fixunssfsi+0x46>
    2030:	c3 d0       	rcall	.+390    	; 0x21b8 <__fp_zero>
    2032:	b1 e0       	ldi	r27, 0x01	; 1
    2034:	08 95       	ret
    2036:	c0 c0       	rjmp	.+384    	; 0x21b8 <__fp_zero>
    2038:	67 2f       	mov	r22, r23
    203a:	78 2f       	mov	r23, r24
    203c:	88 27       	eor	r24, r24
    203e:	b8 5f       	subi	r27, 0xF8	; 248
    2040:	39 f0       	breq	.+14     	; 0x2050 <__fixunssfsi+0x46>
    2042:	b9 3f       	cpi	r27, 0xF9	; 249
    2044:	cc f3       	brlt	.-14     	; 0x2038 <__fixunssfsi+0x2e>
    2046:	86 95       	lsr	r24
    2048:	77 95       	ror	r23
    204a:	67 95       	ror	r22
    204c:	b3 95       	inc	r27
    204e:	d9 f7       	brne	.-10     	; 0x2046 <__fixunssfsi+0x3c>
    2050:	3e f4       	brtc	.+14     	; 0x2060 <__fixunssfsi+0x56>
    2052:	90 95       	com	r25
    2054:	80 95       	com	r24
    2056:	70 95       	com	r23
    2058:	61 95       	neg	r22
    205a:	7f 4f       	sbci	r23, 0xFF	; 255
    205c:	8f 4f       	sbci	r24, 0xFF	; 255
    205e:	9f 4f       	sbci	r25, 0xFF	; 255
    2060:	08 95       	ret

00002062 <__floatunsisf>:
    2062:	e8 94       	clt
    2064:	09 c0       	rjmp	.+18     	; 0x2078 <__floatsisf+0x12>

00002066 <__floatsisf>:
    2066:	97 fb       	bst	r25, 7
    2068:	3e f4       	brtc	.+14     	; 0x2078 <__floatsisf+0x12>
    206a:	90 95       	com	r25
    206c:	80 95       	com	r24
    206e:	70 95       	com	r23
    2070:	61 95       	neg	r22
    2072:	7f 4f       	sbci	r23, 0xFF	; 255
    2074:	8f 4f       	sbci	r24, 0xFF	; 255
    2076:	9f 4f       	sbci	r25, 0xFF	; 255
    2078:	99 23       	and	r25, r25
    207a:	a9 f0       	breq	.+42     	; 0x20a6 <__floatsisf+0x40>
    207c:	f9 2f       	mov	r31, r25
    207e:	96 e9       	ldi	r25, 0x96	; 150
    2080:	bb 27       	eor	r27, r27
    2082:	93 95       	inc	r25
    2084:	f6 95       	lsr	r31
    2086:	87 95       	ror	r24
    2088:	77 95       	ror	r23
    208a:	67 95       	ror	r22
    208c:	b7 95       	ror	r27
    208e:	f1 11       	cpse	r31, r1
    2090:	f8 cf       	rjmp	.-16     	; 0x2082 <__floatsisf+0x1c>
    2092:	fa f4       	brpl	.+62     	; 0x20d2 <__floatsisf+0x6c>
    2094:	bb 0f       	add	r27, r27
    2096:	11 f4       	brne	.+4      	; 0x209c <__floatsisf+0x36>
    2098:	60 ff       	sbrs	r22, 0
    209a:	1b c0       	rjmp	.+54     	; 0x20d2 <__floatsisf+0x6c>
    209c:	6f 5f       	subi	r22, 0xFF	; 255
    209e:	7f 4f       	sbci	r23, 0xFF	; 255
    20a0:	8f 4f       	sbci	r24, 0xFF	; 255
    20a2:	9f 4f       	sbci	r25, 0xFF	; 255
    20a4:	16 c0       	rjmp	.+44     	; 0x20d2 <__floatsisf+0x6c>
    20a6:	88 23       	and	r24, r24
    20a8:	11 f0       	breq	.+4      	; 0x20ae <__floatsisf+0x48>
    20aa:	96 e9       	ldi	r25, 0x96	; 150
    20ac:	11 c0       	rjmp	.+34     	; 0x20d0 <__floatsisf+0x6a>
    20ae:	77 23       	and	r23, r23
    20b0:	21 f0       	breq	.+8      	; 0x20ba <__floatsisf+0x54>
    20b2:	9e e8       	ldi	r25, 0x8E	; 142
    20b4:	87 2f       	mov	r24, r23
    20b6:	76 2f       	mov	r23, r22
    20b8:	05 c0       	rjmp	.+10     	; 0x20c4 <__floatsisf+0x5e>
    20ba:	66 23       	and	r22, r22
    20bc:	71 f0       	breq	.+28     	; 0x20da <__floatsisf+0x74>
    20be:	96 e8       	ldi	r25, 0x86	; 134
    20c0:	86 2f       	mov	r24, r22
    20c2:	70 e0       	ldi	r23, 0x00	; 0
    20c4:	60 e0       	ldi	r22, 0x00	; 0
    20c6:	2a f0       	brmi	.+10     	; 0x20d2 <__floatsisf+0x6c>
    20c8:	9a 95       	dec	r25
    20ca:	66 0f       	add	r22, r22
    20cc:	77 1f       	adc	r23, r23
    20ce:	88 1f       	adc	r24, r24
    20d0:	da f7       	brpl	.-10     	; 0x20c8 <__floatsisf+0x62>
    20d2:	88 0f       	add	r24, r24
    20d4:	96 95       	lsr	r25
    20d6:	87 95       	ror	r24
    20d8:	97 f9       	bld	r25, 7
    20da:	08 95       	ret

000020dc <__fp_cmp>:
    20dc:	99 0f       	add	r25, r25
    20de:	00 08       	sbc	r0, r0
    20e0:	55 0f       	add	r21, r21
    20e2:	aa 0b       	sbc	r26, r26
    20e4:	e0 e8       	ldi	r30, 0x80	; 128
    20e6:	fe ef       	ldi	r31, 0xFE	; 254
    20e8:	16 16       	cp	r1, r22
    20ea:	17 06       	cpc	r1, r23
    20ec:	e8 07       	cpc	r30, r24
    20ee:	f9 07       	cpc	r31, r25
    20f0:	c0 f0       	brcs	.+48     	; 0x2122 <__fp_cmp+0x46>
    20f2:	12 16       	cp	r1, r18
    20f4:	13 06       	cpc	r1, r19
    20f6:	e4 07       	cpc	r30, r20
    20f8:	f5 07       	cpc	r31, r21
    20fa:	98 f0       	brcs	.+38     	; 0x2122 <__fp_cmp+0x46>
    20fc:	62 1b       	sub	r22, r18
    20fe:	73 0b       	sbc	r23, r19
    2100:	84 0b       	sbc	r24, r20
    2102:	95 0b       	sbc	r25, r21
    2104:	39 f4       	brne	.+14     	; 0x2114 <__fp_cmp+0x38>
    2106:	0a 26       	eor	r0, r26
    2108:	61 f0       	breq	.+24     	; 0x2122 <__fp_cmp+0x46>
    210a:	23 2b       	or	r18, r19
    210c:	24 2b       	or	r18, r20
    210e:	25 2b       	or	r18, r21
    2110:	21 f4       	brne	.+8      	; 0x211a <__fp_cmp+0x3e>
    2112:	08 95       	ret
    2114:	0a 26       	eor	r0, r26
    2116:	09 f4       	brne	.+2      	; 0x211a <__fp_cmp+0x3e>
    2118:	a1 40       	sbci	r26, 0x01	; 1
    211a:	a6 95       	lsr	r26
    211c:	8f ef       	ldi	r24, 0xFF	; 255
    211e:	81 1d       	adc	r24, r1
    2120:	81 1d       	adc	r24, r1
    2122:	08 95       	ret

00002124 <__fp_inf>:
    2124:	97 f9       	bld	r25, 7
    2126:	9f 67       	ori	r25, 0x7F	; 127
    2128:	80 e8       	ldi	r24, 0x80	; 128
    212a:	70 e0       	ldi	r23, 0x00	; 0
    212c:	60 e0       	ldi	r22, 0x00	; 0
    212e:	08 95       	ret

00002130 <__fp_nan>:
    2130:	9f ef       	ldi	r25, 0xFF	; 255
    2132:	80 ec       	ldi	r24, 0xC0	; 192
    2134:	08 95       	ret

00002136 <__fp_pscA>:
    2136:	00 24       	eor	r0, r0
    2138:	0a 94       	dec	r0
    213a:	16 16       	cp	r1, r22
    213c:	17 06       	cpc	r1, r23
    213e:	18 06       	cpc	r1, r24
    2140:	09 06       	cpc	r0, r25
    2142:	08 95       	ret

00002144 <__fp_pscB>:
    2144:	00 24       	eor	r0, r0
    2146:	0a 94       	dec	r0
    2148:	12 16       	cp	r1, r18
    214a:	13 06       	cpc	r1, r19
    214c:	14 06       	cpc	r1, r20
    214e:	05 06       	cpc	r0, r21
    2150:	08 95       	ret

00002152 <__fp_round>:
    2152:	09 2e       	mov	r0, r25
    2154:	03 94       	inc	r0
    2156:	00 0c       	add	r0, r0
    2158:	11 f4       	brne	.+4      	; 0x215e <__fp_round+0xc>
    215a:	88 23       	and	r24, r24
    215c:	52 f0       	brmi	.+20     	; 0x2172 <__fp_round+0x20>
    215e:	bb 0f       	add	r27, r27
    2160:	40 f4       	brcc	.+16     	; 0x2172 <__fp_round+0x20>
    2162:	bf 2b       	or	r27, r31
    2164:	11 f4       	brne	.+4      	; 0x216a <__fp_round+0x18>
    2166:	60 ff       	sbrs	r22, 0
    2168:	04 c0       	rjmp	.+8      	; 0x2172 <__fp_round+0x20>
    216a:	6f 5f       	subi	r22, 0xFF	; 255
    216c:	7f 4f       	sbci	r23, 0xFF	; 255
    216e:	8f 4f       	sbci	r24, 0xFF	; 255
    2170:	9f 4f       	sbci	r25, 0xFF	; 255
    2172:	08 95       	ret

00002174 <__fp_split3>:
    2174:	57 fd       	sbrc	r21, 7
    2176:	90 58       	subi	r25, 0x80	; 128
    2178:	44 0f       	add	r20, r20
    217a:	55 1f       	adc	r21, r21
    217c:	59 f0       	breq	.+22     	; 0x2194 <__fp_splitA+0x10>
    217e:	5f 3f       	cpi	r21, 0xFF	; 255
    2180:	71 f0       	breq	.+28     	; 0x219e <__fp_splitA+0x1a>
    2182:	47 95       	ror	r20

00002184 <__fp_splitA>:
    2184:	88 0f       	add	r24, r24
    2186:	97 fb       	bst	r25, 7
    2188:	99 1f       	adc	r25, r25
    218a:	61 f0       	breq	.+24     	; 0x21a4 <__fp_splitA+0x20>
    218c:	9f 3f       	cpi	r25, 0xFF	; 255
    218e:	79 f0       	breq	.+30     	; 0x21ae <__fp_splitA+0x2a>
    2190:	87 95       	ror	r24
    2192:	08 95       	ret
    2194:	12 16       	cp	r1, r18
    2196:	13 06       	cpc	r1, r19
    2198:	14 06       	cpc	r1, r20
    219a:	55 1f       	adc	r21, r21
    219c:	f2 cf       	rjmp	.-28     	; 0x2182 <__fp_split3+0xe>
    219e:	46 95       	lsr	r20
    21a0:	f1 df       	rcall	.-30     	; 0x2184 <__fp_splitA>
    21a2:	08 c0       	rjmp	.+16     	; 0x21b4 <__fp_splitA+0x30>
    21a4:	16 16       	cp	r1, r22
    21a6:	17 06       	cpc	r1, r23
    21a8:	18 06       	cpc	r1, r24
    21aa:	99 1f       	adc	r25, r25
    21ac:	f1 cf       	rjmp	.-30     	; 0x2190 <__fp_splitA+0xc>
    21ae:	86 95       	lsr	r24
    21b0:	71 05       	cpc	r23, r1
    21b2:	61 05       	cpc	r22, r1
    21b4:	08 94       	sec
    21b6:	08 95       	ret

000021b8 <__fp_zero>:
    21b8:	e8 94       	clt

000021ba <__fp_szero>:
    21ba:	bb 27       	eor	r27, r27
    21bc:	66 27       	eor	r22, r22
    21be:	77 27       	eor	r23, r23
    21c0:	cb 01       	movw	r24, r22
    21c2:	97 f9       	bld	r25, 7
    21c4:	08 95       	ret

000021c6 <__gesf2>:
    21c6:	8a df       	rcall	.-236    	; 0x20dc <__fp_cmp>
    21c8:	08 f4       	brcc	.+2      	; 0x21cc <__gesf2+0x6>
    21ca:	8f ef       	ldi	r24, 0xFF	; 255
    21cc:	08 95       	ret

000021ce <__mulsf3>:
    21ce:	0b d0       	rcall	.+22     	; 0x21e6 <__mulsf3x>
    21d0:	c0 cf       	rjmp	.-128    	; 0x2152 <__fp_round>
    21d2:	b1 df       	rcall	.-158    	; 0x2136 <__fp_pscA>
    21d4:	28 f0       	brcs	.+10     	; 0x21e0 <__mulsf3+0x12>
    21d6:	b6 df       	rcall	.-148    	; 0x2144 <__fp_pscB>
    21d8:	18 f0       	brcs	.+6      	; 0x21e0 <__mulsf3+0x12>
    21da:	95 23       	and	r25, r21
    21dc:	09 f0       	breq	.+2      	; 0x21e0 <__mulsf3+0x12>
    21de:	a2 cf       	rjmp	.-188    	; 0x2124 <__fp_inf>
    21e0:	a7 cf       	rjmp	.-178    	; 0x2130 <__fp_nan>
    21e2:	11 24       	eor	r1, r1
    21e4:	ea cf       	rjmp	.-44     	; 0x21ba <__fp_szero>

000021e6 <__mulsf3x>:
    21e6:	c6 df       	rcall	.-116    	; 0x2174 <__fp_split3>
    21e8:	a0 f3       	brcs	.-24     	; 0x21d2 <__mulsf3+0x4>

000021ea <__mulsf3_pse>:
    21ea:	95 9f       	mul	r25, r21
    21ec:	d1 f3       	breq	.-12     	; 0x21e2 <__mulsf3+0x14>
    21ee:	95 0f       	add	r25, r21
    21f0:	50 e0       	ldi	r21, 0x00	; 0
    21f2:	55 1f       	adc	r21, r21
    21f4:	62 9f       	mul	r22, r18
    21f6:	f0 01       	movw	r30, r0
    21f8:	72 9f       	mul	r23, r18
    21fa:	bb 27       	eor	r27, r27
    21fc:	f0 0d       	add	r31, r0
    21fe:	b1 1d       	adc	r27, r1
    2200:	63 9f       	mul	r22, r19
    2202:	aa 27       	eor	r26, r26
    2204:	f0 0d       	add	r31, r0
    2206:	b1 1d       	adc	r27, r1
    2208:	aa 1f       	adc	r26, r26
    220a:	64 9f       	mul	r22, r20
    220c:	66 27       	eor	r22, r22
    220e:	b0 0d       	add	r27, r0
    2210:	a1 1d       	adc	r26, r1
    2212:	66 1f       	adc	r22, r22
    2214:	82 9f       	mul	r24, r18
    2216:	22 27       	eor	r18, r18
    2218:	b0 0d       	add	r27, r0
    221a:	a1 1d       	adc	r26, r1
    221c:	62 1f       	adc	r22, r18
    221e:	73 9f       	mul	r23, r19
    2220:	b0 0d       	add	r27, r0
    2222:	a1 1d       	adc	r26, r1
    2224:	62 1f       	adc	r22, r18
    2226:	83 9f       	mul	r24, r19
    2228:	a0 0d       	add	r26, r0
    222a:	61 1d       	adc	r22, r1
    222c:	22 1f       	adc	r18, r18
    222e:	74 9f       	mul	r23, r20
    2230:	33 27       	eor	r19, r19
    2232:	a0 0d       	add	r26, r0
    2234:	61 1d       	adc	r22, r1
    2236:	23 1f       	adc	r18, r19
    2238:	84 9f       	mul	r24, r20
    223a:	60 0d       	add	r22, r0
    223c:	21 1d       	adc	r18, r1
    223e:	82 2f       	mov	r24, r18
    2240:	76 2f       	mov	r23, r22
    2242:	6a 2f       	mov	r22, r26
    2244:	11 24       	eor	r1, r1
    2246:	9f 57       	subi	r25, 0x7F	; 127
    2248:	50 40       	sbci	r21, 0x00	; 0
    224a:	8a f0       	brmi	.+34     	; 0x226e <__mulsf3_pse+0x84>
    224c:	e1 f0       	breq	.+56     	; 0x2286 <__mulsf3_pse+0x9c>
    224e:	88 23       	and	r24, r24
    2250:	4a f0       	brmi	.+18     	; 0x2264 <__mulsf3_pse+0x7a>
    2252:	ee 0f       	add	r30, r30
    2254:	ff 1f       	adc	r31, r31
    2256:	bb 1f       	adc	r27, r27
    2258:	66 1f       	adc	r22, r22
    225a:	77 1f       	adc	r23, r23
    225c:	88 1f       	adc	r24, r24
    225e:	91 50       	subi	r25, 0x01	; 1
    2260:	50 40       	sbci	r21, 0x00	; 0
    2262:	a9 f7       	brne	.-22     	; 0x224e <__mulsf3_pse+0x64>
    2264:	9e 3f       	cpi	r25, 0xFE	; 254
    2266:	51 05       	cpc	r21, r1
    2268:	70 f0       	brcs	.+28     	; 0x2286 <__mulsf3_pse+0x9c>
    226a:	5c cf       	rjmp	.-328    	; 0x2124 <__fp_inf>
    226c:	a6 cf       	rjmp	.-180    	; 0x21ba <__fp_szero>
    226e:	5f 3f       	cpi	r21, 0xFF	; 255
    2270:	ec f3       	brlt	.-6      	; 0x226c <__mulsf3_pse+0x82>
    2272:	98 3e       	cpi	r25, 0xE8	; 232
    2274:	dc f3       	brlt	.-10     	; 0x226c <__mulsf3_pse+0x82>
    2276:	86 95       	lsr	r24
    2278:	77 95       	ror	r23
    227a:	67 95       	ror	r22
    227c:	b7 95       	ror	r27
    227e:	f7 95       	ror	r31
    2280:	e7 95       	ror	r30
    2282:	9f 5f       	subi	r25, 0xFF	; 255
    2284:	c1 f7       	brne	.-16     	; 0x2276 <__mulsf3_pse+0x8c>
    2286:	fe 2b       	or	r31, r30
    2288:	88 0f       	add	r24, r24
    228a:	91 1d       	adc	r25, r1
    228c:	96 95       	lsr	r25
    228e:	87 95       	ror	r24
    2290:	97 f9       	bld	r25, 7
    2292:	08 95       	ret

00002294 <printf>:
    2294:	a0 e0       	ldi	r26, 0x00	; 0
    2296:	b0 e0       	ldi	r27, 0x00	; 0
    2298:	e0 e5       	ldi	r30, 0x50	; 80
    229a:	f1 e1       	ldi	r31, 0x11	; 17
    229c:	0c 94 e6 13 	jmp	0x27cc	; 0x27cc <__prologue_saves__+0x20>
    22a0:	fe 01       	movw	r30, r28
    22a2:	35 96       	adiw	r30, 0x05	; 5
    22a4:	61 91       	ld	r22, Z+
    22a6:	71 91       	ld	r23, Z+
    22a8:	af 01       	movw	r20, r30
    22aa:	80 91 05 02 	lds	r24, 0x0205
    22ae:	90 91 06 02 	lds	r25, 0x0206
    22b2:	0e 94 5e 11 	call	0x22bc	; 0x22bc <vfprintf>
    22b6:	e2 e0       	ldi	r30, 0x02	; 2
    22b8:	0c 94 02 14 	jmp	0x2804	; 0x2804 <__epilogue_restores__+0x20>

000022bc <vfprintf>:
    22bc:	ac e0       	ldi	r26, 0x0C	; 12
    22be:	b0 e0       	ldi	r27, 0x00	; 0
    22c0:	e4 e6       	ldi	r30, 0x64	; 100
    22c2:	f1 e1       	ldi	r31, 0x11	; 17
    22c4:	0c 94 d6 13 	jmp	0x27ac	; 0x27ac <__prologue_saves__>
    22c8:	7c 01       	movw	r14, r24
    22ca:	6b 01       	movw	r12, r22
    22cc:	8a 01       	movw	r16, r20
    22ce:	fc 01       	movw	r30, r24
    22d0:	17 82       	std	Z+7, r1	; 0x07
    22d2:	16 82       	std	Z+6, r1	; 0x06
    22d4:	83 81       	ldd	r24, Z+3	; 0x03
    22d6:	81 ff       	sbrs	r24, 1
    22d8:	bd c1       	rjmp	.+890    	; 0x2654 <vfprintf+0x398>
    22da:	ce 01       	movw	r24, r28
    22dc:	01 96       	adiw	r24, 0x01	; 1
    22de:	4c 01       	movw	r8, r24
    22e0:	f7 01       	movw	r30, r14
    22e2:	93 81       	ldd	r25, Z+3	; 0x03
    22e4:	f6 01       	movw	r30, r12
    22e6:	93 fd       	sbrc	r25, 3
    22e8:	85 91       	lpm	r24, Z+
    22ea:	93 ff       	sbrs	r25, 3
    22ec:	81 91       	ld	r24, Z+
    22ee:	6f 01       	movw	r12, r30
    22f0:	88 23       	and	r24, r24
    22f2:	09 f4       	brne	.+2      	; 0x22f6 <vfprintf+0x3a>
    22f4:	ab c1       	rjmp	.+854    	; 0x264c <vfprintf+0x390>
    22f6:	85 32       	cpi	r24, 0x25	; 37
    22f8:	39 f4       	brne	.+14     	; 0x2308 <vfprintf+0x4c>
    22fa:	93 fd       	sbrc	r25, 3
    22fc:	85 91       	lpm	r24, Z+
    22fe:	93 ff       	sbrs	r25, 3
    2300:	81 91       	ld	r24, Z+
    2302:	6f 01       	movw	r12, r30
    2304:	85 32       	cpi	r24, 0x25	; 37
    2306:	29 f4       	brne	.+10     	; 0x2312 <vfprintf+0x56>
    2308:	b7 01       	movw	r22, r14
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	0e 94 46 13 	call	0x268c	; 0x268c <fputc>
    2310:	e7 cf       	rjmp	.-50     	; 0x22e0 <vfprintf+0x24>
    2312:	51 2c       	mov	r5, r1
    2314:	31 2c       	mov	r3, r1
    2316:	20 e0       	ldi	r18, 0x00	; 0
    2318:	20 32       	cpi	r18, 0x20	; 32
    231a:	a0 f4       	brcc	.+40     	; 0x2344 <vfprintf+0x88>
    231c:	8b 32       	cpi	r24, 0x2B	; 43
    231e:	69 f0       	breq	.+26     	; 0x233a <vfprintf+0x7e>
    2320:	30 f4       	brcc	.+12     	; 0x232e <vfprintf+0x72>
    2322:	80 32       	cpi	r24, 0x20	; 32
    2324:	59 f0       	breq	.+22     	; 0x233c <vfprintf+0x80>
    2326:	83 32       	cpi	r24, 0x23	; 35
    2328:	69 f4       	brne	.+26     	; 0x2344 <vfprintf+0x88>
    232a:	20 61       	ori	r18, 0x10	; 16
    232c:	2c c0       	rjmp	.+88     	; 0x2386 <vfprintf+0xca>
    232e:	8d 32       	cpi	r24, 0x2D	; 45
    2330:	39 f0       	breq	.+14     	; 0x2340 <vfprintf+0x84>
    2332:	80 33       	cpi	r24, 0x30	; 48
    2334:	39 f4       	brne	.+14     	; 0x2344 <vfprintf+0x88>
    2336:	21 60       	ori	r18, 0x01	; 1
    2338:	26 c0       	rjmp	.+76     	; 0x2386 <vfprintf+0xca>
    233a:	22 60       	ori	r18, 0x02	; 2
    233c:	24 60       	ori	r18, 0x04	; 4
    233e:	23 c0       	rjmp	.+70     	; 0x2386 <vfprintf+0xca>
    2340:	28 60       	ori	r18, 0x08	; 8
    2342:	21 c0       	rjmp	.+66     	; 0x2386 <vfprintf+0xca>
    2344:	27 fd       	sbrc	r18, 7
    2346:	27 c0       	rjmp	.+78     	; 0x2396 <vfprintf+0xda>
    2348:	30 ed       	ldi	r19, 0xD0	; 208
    234a:	38 0f       	add	r19, r24
    234c:	3a 30       	cpi	r19, 0x0A	; 10
    234e:	78 f4       	brcc	.+30     	; 0x236e <vfprintf+0xb2>
    2350:	26 ff       	sbrs	r18, 6
    2352:	06 c0       	rjmp	.+12     	; 0x2360 <vfprintf+0xa4>
    2354:	fa e0       	ldi	r31, 0x0A	; 10
    2356:	5f 9e       	mul	r5, r31
    2358:	30 0d       	add	r19, r0
    235a:	11 24       	eor	r1, r1
    235c:	53 2e       	mov	r5, r19
    235e:	13 c0       	rjmp	.+38     	; 0x2386 <vfprintf+0xca>
    2360:	8a e0       	ldi	r24, 0x0A	; 10
    2362:	38 9e       	mul	r3, r24
    2364:	30 0d       	add	r19, r0
    2366:	11 24       	eor	r1, r1
    2368:	33 2e       	mov	r3, r19
    236a:	20 62       	ori	r18, 0x20	; 32
    236c:	0c c0       	rjmp	.+24     	; 0x2386 <vfprintf+0xca>
    236e:	8e 32       	cpi	r24, 0x2E	; 46
    2370:	21 f4       	brne	.+8      	; 0x237a <vfprintf+0xbe>
    2372:	26 fd       	sbrc	r18, 6
    2374:	6b c1       	rjmp	.+726    	; 0x264c <vfprintf+0x390>
    2376:	20 64       	ori	r18, 0x40	; 64
    2378:	06 c0       	rjmp	.+12     	; 0x2386 <vfprintf+0xca>
    237a:	8c 36       	cpi	r24, 0x6C	; 108
    237c:	11 f4       	brne	.+4      	; 0x2382 <vfprintf+0xc6>
    237e:	20 68       	ori	r18, 0x80	; 128
    2380:	02 c0       	rjmp	.+4      	; 0x2386 <vfprintf+0xca>
    2382:	88 36       	cpi	r24, 0x68	; 104
    2384:	41 f4       	brne	.+16     	; 0x2396 <vfprintf+0xda>
    2386:	f6 01       	movw	r30, r12
    2388:	93 fd       	sbrc	r25, 3
    238a:	85 91       	lpm	r24, Z+
    238c:	93 ff       	sbrs	r25, 3
    238e:	81 91       	ld	r24, Z+
    2390:	6f 01       	movw	r12, r30
    2392:	81 11       	cpse	r24, r1
    2394:	c1 cf       	rjmp	.-126    	; 0x2318 <vfprintf+0x5c>
    2396:	98 2f       	mov	r25, r24
    2398:	9f 7d       	andi	r25, 0xDF	; 223
    239a:	95 54       	subi	r25, 0x45	; 69
    239c:	93 30       	cpi	r25, 0x03	; 3
    239e:	28 f4       	brcc	.+10     	; 0x23aa <vfprintf+0xee>
    23a0:	0c 5f       	subi	r16, 0xFC	; 252
    23a2:	1f 4f       	sbci	r17, 0xFF	; 255
    23a4:	ff e3       	ldi	r31, 0x3F	; 63
    23a6:	f9 83       	std	Y+1, r31	; 0x01
    23a8:	0d c0       	rjmp	.+26     	; 0x23c4 <vfprintf+0x108>
    23aa:	83 36       	cpi	r24, 0x63	; 99
    23ac:	31 f0       	breq	.+12     	; 0x23ba <vfprintf+0xfe>
    23ae:	83 37       	cpi	r24, 0x73	; 115
    23b0:	71 f0       	breq	.+28     	; 0x23ce <vfprintf+0x112>
    23b2:	83 35       	cpi	r24, 0x53	; 83
    23b4:	09 f0       	breq	.+2      	; 0x23b8 <vfprintf+0xfc>
    23b6:	5b c0       	rjmp	.+182    	; 0x246e <vfprintf+0x1b2>
    23b8:	22 c0       	rjmp	.+68     	; 0x23fe <vfprintf+0x142>
    23ba:	f8 01       	movw	r30, r16
    23bc:	80 81       	ld	r24, Z
    23be:	89 83       	std	Y+1, r24	; 0x01
    23c0:	0e 5f       	subi	r16, 0xFE	; 254
    23c2:	1f 4f       	sbci	r17, 0xFF	; 255
    23c4:	44 24       	eor	r4, r4
    23c6:	43 94       	inc	r4
    23c8:	51 2c       	mov	r5, r1
    23ca:	54 01       	movw	r10, r8
    23cc:	15 c0       	rjmp	.+42     	; 0x23f8 <vfprintf+0x13c>
    23ce:	38 01       	movw	r6, r16
    23d0:	f2 e0       	ldi	r31, 0x02	; 2
    23d2:	6f 0e       	add	r6, r31
    23d4:	71 1c       	adc	r7, r1
    23d6:	f8 01       	movw	r30, r16
    23d8:	a0 80       	ld	r10, Z
    23da:	b1 80       	ldd	r11, Z+1	; 0x01
    23dc:	26 ff       	sbrs	r18, 6
    23de:	03 c0       	rjmp	.+6      	; 0x23e6 <vfprintf+0x12a>
    23e0:	65 2d       	mov	r22, r5
    23e2:	70 e0       	ldi	r23, 0x00	; 0
    23e4:	02 c0       	rjmp	.+4      	; 0x23ea <vfprintf+0x12e>
    23e6:	6f ef       	ldi	r22, 0xFF	; 255
    23e8:	7f ef       	ldi	r23, 0xFF	; 255
    23ea:	c5 01       	movw	r24, r10
    23ec:	2c 87       	std	Y+12, r18	; 0x0c
    23ee:	0e 94 3b 13 	call	0x2676	; 0x2676 <strnlen>
    23f2:	2c 01       	movw	r4, r24
    23f4:	83 01       	movw	r16, r6
    23f6:	2c 85       	ldd	r18, Y+12	; 0x0c
    23f8:	2f 77       	andi	r18, 0x7F	; 127
    23fa:	22 2e       	mov	r2, r18
    23fc:	17 c0       	rjmp	.+46     	; 0x242c <vfprintf+0x170>
    23fe:	38 01       	movw	r6, r16
    2400:	f2 e0       	ldi	r31, 0x02	; 2
    2402:	6f 0e       	add	r6, r31
    2404:	71 1c       	adc	r7, r1
    2406:	f8 01       	movw	r30, r16
    2408:	a0 80       	ld	r10, Z
    240a:	b1 80       	ldd	r11, Z+1	; 0x01
    240c:	26 ff       	sbrs	r18, 6
    240e:	03 c0       	rjmp	.+6      	; 0x2416 <vfprintf+0x15a>
    2410:	65 2d       	mov	r22, r5
    2412:	70 e0       	ldi	r23, 0x00	; 0
    2414:	02 c0       	rjmp	.+4      	; 0x241a <vfprintf+0x15e>
    2416:	6f ef       	ldi	r22, 0xFF	; 255
    2418:	7f ef       	ldi	r23, 0xFF	; 255
    241a:	c5 01       	movw	r24, r10
    241c:	2c 87       	std	Y+12, r18	; 0x0c
    241e:	0e 94 30 13 	call	0x2660	; 0x2660 <strnlen_P>
    2422:	2c 01       	movw	r4, r24
    2424:	2c 85       	ldd	r18, Y+12	; 0x0c
    2426:	20 68       	ori	r18, 0x80	; 128
    2428:	22 2e       	mov	r2, r18
    242a:	83 01       	movw	r16, r6
    242c:	23 fc       	sbrc	r2, 3
    242e:	1b c0       	rjmp	.+54     	; 0x2466 <vfprintf+0x1aa>
    2430:	83 2d       	mov	r24, r3
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	48 16       	cp	r4, r24
    2436:	59 06       	cpc	r5, r25
    2438:	b0 f4       	brcc	.+44     	; 0x2466 <vfprintf+0x1aa>
    243a:	b7 01       	movw	r22, r14
    243c:	80 e2       	ldi	r24, 0x20	; 32
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	0e 94 46 13 	call	0x268c	; 0x268c <fputc>
    2444:	3a 94       	dec	r3
    2446:	f4 cf       	rjmp	.-24     	; 0x2430 <vfprintf+0x174>
    2448:	f5 01       	movw	r30, r10
    244a:	27 fc       	sbrc	r2, 7
    244c:	85 91       	lpm	r24, Z+
    244e:	27 fe       	sbrs	r2, 7
    2450:	81 91       	ld	r24, Z+
    2452:	5f 01       	movw	r10, r30
    2454:	b7 01       	movw	r22, r14
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	0e 94 46 13 	call	0x268c	; 0x268c <fputc>
    245c:	31 10       	cpse	r3, r1
    245e:	3a 94       	dec	r3
    2460:	f1 e0       	ldi	r31, 0x01	; 1
    2462:	4f 1a       	sub	r4, r31
    2464:	51 08       	sbc	r5, r1
    2466:	41 14       	cp	r4, r1
    2468:	51 04       	cpc	r5, r1
    246a:	71 f7       	brne	.-36     	; 0x2448 <vfprintf+0x18c>
    246c:	e5 c0       	rjmp	.+458    	; 0x2638 <vfprintf+0x37c>
    246e:	84 36       	cpi	r24, 0x64	; 100
    2470:	11 f0       	breq	.+4      	; 0x2476 <vfprintf+0x1ba>
    2472:	89 36       	cpi	r24, 0x69	; 105
    2474:	39 f5       	brne	.+78     	; 0x24c4 <vfprintf+0x208>
    2476:	f8 01       	movw	r30, r16
    2478:	27 ff       	sbrs	r18, 7
    247a:	07 c0       	rjmp	.+14     	; 0x248a <vfprintf+0x1ce>
    247c:	60 81       	ld	r22, Z
    247e:	71 81       	ldd	r23, Z+1	; 0x01
    2480:	82 81       	ldd	r24, Z+2	; 0x02
    2482:	93 81       	ldd	r25, Z+3	; 0x03
    2484:	0c 5f       	subi	r16, 0xFC	; 252
    2486:	1f 4f       	sbci	r17, 0xFF	; 255
    2488:	08 c0       	rjmp	.+16     	; 0x249a <vfprintf+0x1de>
    248a:	60 81       	ld	r22, Z
    248c:	71 81       	ldd	r23, Z+1	; 0x01
    248e:	88 27       	eor	r24, r24
    2490:	77 fd       	sbrc	r23, 7
    2492:	80 95       	com	r24
    2494:	98 2f       	mov	r25, r24
    2496:	0e 5f       	subi	r16, 0xFE	; 254
    2498:	1f 4f       	sbci	r17, 0xFF	; 255
    249a:	2f 76       	andi	r18, 0x6F	; 111
    249c:	b2 2e       	mov	r11, r18
    249e:	97 ff       	sbrs	r25, 7
    24a0:	09 c0       	rjmp	.+18     	; 0x24b4 <vfprintf+0x1f8>
    24a2:	90 95       	com	r25
    24a4:	80 95       	com	r24
    24a6:	70 95       	com	r23
    24a8:	61 95       	neg	r22
    24aa:	7f 4f       	sbci	r23, 0xFF	; 255
    24ac:	8f 4f       	sbci	r24, 0xFF	; 255
    24ae:	9f 4f       	sbci	r25, 0xFF	; 255
    24b0:	20 68       	ori	r18, 0x80	; 128
    24b2:	b2 2e       	mov	r11, r18
    24b4:	2a e0       	ldi	r18, 0x0A	; 10
    24b6:	30 e0       	ldi	r19, 0x00	; 0
    24b8:	a4 01       	movw	r20, r8
    24ba:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__ultoa_invert>
    24be:	a8 2e       	mov	r10, r24
    24c0:	a8 18       	sub	r10, r8
    24c2:	44 c0       	rjmp	.+136    	; 0x254c <vfprintf+0x290>
    24c4:	85 37       	cpi	r24, 0x75	; 117
    24c6:	29 f4       	brne	.+10     	; 0x24d2 <vfprintf+0x216>
    24c8:	2f 7e       	andi	r18, 0xEF	; 239
    24ca:	b2 2e       	mov	r11, r18
    24cc:	2a e0       	ldi	r18, 0x0A	; 10
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	25 c0       	rjmp	.+74     	; 0x251c <vfprintf+0x260>
    24d2:	f2 2f       	mov	r31, r18
    24d4:	f9 7f       	andi	r31, 0xF9	; 249
    24d6:	bf 2e       	mov	r11, r31
    24d8:	8f 36       	cpi	r24, 0x6F	; 111
    24da:	c1 f0       	breq	.+48     	; 0x250c <vfprintf+0x250>
    24dc:	18 f4       	brcc	.+6      	; 0x24e4 <vfprintf+0x228>
    24de:	88 35       	cpi	r24, 0x58	; 88
    24e0:	79 f0       	breq	.+30     	; 0x2500 <vfprintf+0x244>
    24e2:	b4 c0       	rjmp	.+360    	; 0x264c <vfprintf+0x390>
    24e4:	80 37       	cpi	r24, 0x70	; 112
    24e6:	19 f0       	breq	.+6      	; 0x24ee <vfprintf+0x232>
    24e8:	88 37       	cpi	r24, 0x78	; 120
    24ea:	21 f0       	breq	.+8      	; 0x24f4 <vfprintf+0x238>
    24ec:	af c0       	rjmp	.+350    	; 0x264c <vfprintf+0x390>
    24ee:	2f 2f       	mov	r18, r31
    24f0:	20 61       	ori	r18, 0x10	; 16
    24f2:	b2 2e       	mov	r11, r18
    24f4:	b4 fe       	sbrs	r11, 4
    24f6:	0d c0       	rjmp	.+26     	; 0x2512 <vfprintf+0x256>
    24f8:	8b 2d       	mov	r24, r11
    24fa:	84 60       	ori	r24, 0x04	; 4
    24fc:	b8 2e       	mov	r11, r24
    24fe:	09 c0       	rjmp	.+18     	; 0x2512 <vfprintf+0x256>
    2500:	24 ff       	sbrs	r18, 4
    2502:	0a c0       	rjmp	.+20     	; 0x2518 <vfprintf+0x25c>
    2504:	9f 2f       	mov	r25, r31
    2506:	96 60       	ori	r25, 0x06	; 6
    2508:	b9 2e       	mov	r11, r25
    250a:	06 c0       	rjmp	.+12     	; 0x2518 <vfprintf+0x25c>
    250c:	28 e0       	ldi	r18, 0x08	; 8
    250e:	30 e0       	ldi	r19, 0x00	; 0
    2510:	05 c0       	rjmp	.+10     	; 0x251c <vfprintf+0x260>
    2512:	20 e1       	ldi	r18, 0x10	; 16
    2514:	30 e0       	ldi	r19, 0x00	; 0
    2516:	02 c0       	rjmp	.+4      	; 0x251c <vfprintf+0x260>
    2518:	20 e1       	ldi	r18, 0x10	; 16
    251a:	32 e0       	ldi	r19, 0x02	; 2
    251c:	f8 01       	movw	r30, r16
    251e:	b7 fe       	sbrs	r11, 7
    2520:	07 c0       	rjmp	.+14     	; 0x2530 <vfprintf+0x274>
    2522:	60 81       	ld	r22, Z
    2524:	71 81       	ldd	r23, Z+1	; 0x01
    2526:	82 81       	ldd	r24, Z+2	; 0x02
    2528:	93 81       	ldd	r25, Z+3	; 0x03
    252a:	0c 5f       	subi	r16, 0xFC	; 252
    252c:	1f 4f       	sbci	r17, 0xFF	; 255
    252e:	06 c0       	rjmp	.+12     	; 0x253c <vfprintf+0x280>
    2530:	60 81       	ld	r22, Z
    2532:	71 81       	ldd	r23, Z+1	; 0x01
    2534:	80 e0       	ldi	r24, 0x00	; 0
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	0e 5f       	subi	r16, 0xFE	; 254
    253a:	1f 4f       	sbci	r17, 0xFF	; 255
    253c:	a4 01       	movw	r20, r8
    253e:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__ultoa_invert>
    2542:	a8 2e       	mov	r10, r24
    2544:	a8 18       	sub	r10, r8
    2546:	fb 2d       	mov	r31, r11
    2548:	ff 77       	andi	r31, 0x7F	; 127
    254a:	bf 2e       	mov	r11, r31
    254c:	b6 fe       	sbrs	r11, 6
    254e:	0b c0       	rjmp	.+22     	; 0x2566 <vfprintf+0x2aa>
    2550:	2b 2d       	mov	r18, r11
    2552:	2e 7f       	andi	r18, 0xFE	; 254
    2554:	a5 14       	cp	r10, r5
    2556:	50 f4       	brcc	.+20     	; 0x256c <vfprintf+0x2b0>
    2558:	b4 fe       	sbrs	r11, 4
    255a:	0a c0       	rjmp	.+20     	; 0x2570 <vfprintf+0x2b4>
    255c:	b2 fc       	sbrc	r11, 2
    255e:	08 c0       	rjmp	.+16     	; 0x2570 <vfprintf+0x2b4>
    2560:	2b 2d       	mov	r18, r11
    2562:	2e 7e       	andi	r18, 0xEE	; 238
    2564:	05 c0       	rjmp	.+10     	; 0x2570 <vfprintf+0x2b4>
    2566:	7a 2c       	mov	r7, r10
    2568:	2b 2d       	mov	r18, r11
    256a:	03 c0       	rjmp	.+6      	; 0x2572 <vfprintf+0x2b6>
    256c:	7a 2c       	mov	r7, r10
    256e:	01 c0       	rjmp	.+2      	; 0x2572 <vfprintf+0x2b6>
    2570:	75 2c       	mov	r7, r5
    2572:	24 ff       	sbrs	r18, 4
    2574:	0d c0       	rjmp	.+26     	; 0x2590 <vfprintf+0x2d4>
    2576:	fe 01       	movw	r30, r28
    2578:	ea 0d       	add	r30, r10
    257a:	f1 1d       	adc	r31, r1
    257c:	80 81       	ld	r24, Z
    257e:	80 33       	cpi	r24, 0x30	; 48
    2580:	11 f4       	brne	.+4      	; 0x2586 <vfprintf+0x2ca>
    2582:	29 7e       	andi	r18, 0xE9	; 233
    2584:	09 c0       	rjmp	.+18     	; 0x2598 <vfprintf+0x2dc>
    2586:	22 ff       	sbrs	r18, 2
    2588:	06 c0       	rjmp	.+12     	; 0x2596 <vfprintf+0x2da>
    258a:	73 94       	inc	r7
    258c:	73 94       	inc	r7
    258e:	04 c0       	rjmp	.+8      	; 0x2598 <vfprintf+0x2dc>
    2590:	82 2f       	mov	r24, r18
    2592:	86 78       	andi	r24, 0x86	; 134
    2594:	09 f0       	breq	.+2      	; 0x2598 <vfprintf+0x2dc>
    2596:	73 94       	inc	r7
    2598:	23 fd       	sbrc	r18, 3
    259a:	13 c0       	rjmp	.+38     	; 0x25c2 <vfprintf+0x306>
    259c:	20 ff       	sbrs	r18, 0
    259e:	06 c0       	rjmp	.+12     	; 0x25ac <vfprintf+0x2f0>
    25a0:	5a 2c       	mov	r5, r10
    25a2:	73 14       	cp	r7, r3
    25a4:	18 f4       	brcc	.+6      	; 0x25ac <vfprintf+0x2f0>
    25a6:	53 0c       	add	r5, r3
    25a8:	57 18       	sub	r5, r7
    25aa:	73 2c       	mov	r7, r3
    25ac:	73 14       	cp	r7, r3
    25ae:	68 f4       	brcc	.+26     	; 0x25ca <vfprintf+0x30e>
    25b0:	b7 01       	movw	r22, r14
    25b2:	80 e2       	ldi	r24, 0x20	; 32
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	2c 87       	std	Y+12, r18	; 0x0c
    25b8:	0e 94 46 13 	call	0x268c	; 0x268c <fputc>
    25bc:	73 94       	inc	r7
    25be:	2c 85       	ldd	r18, Y+12	; 0x0c
    25c0:	f5 cf       	rjmp	.-22     	; 0x25ac <vfprintf+0x2f0>
    25c2:	73 14       	cp	r7, r3
    25c4:	10 f4       	brcc	.+4      	; 0x25ca <vfprintf+0x30e>
    25c6:	37 18       	sub	r3, r7
    25c8:	01 c0       	rjmp	.+2      	; 0x25cc <vfprintf+0x310>
    25ca:	31 2c       	mov	r3, r1
    25cc:	24 ff       	sbrs	r18, 4
    25ce:	12 c0       	rjmp	.+36     	; 0x25f4 <vfprintf+0x338>
    25d0:	b7 01       	movw	r22, r14
    25d2:	80 e3       	ldi	r24, 0x30	; 48
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	2c 87       	std	Y+12, r18	; 0x0c
    25d8:	0e 94 46 13 	call	0x268c	; 0x268c <fputc>
    25dc:	2c 85       	ldd	r18, Y+12	; 0x0c
    25de:	22 ff       	sbrs	r18, 2
    25e0:	17 c0       	rjmp	.+46     	; 0x2610 <vfprintf+0x354>
    25e2:	21 ff       	sbrs	r18, 1
    25e4:	03 c0       	rjmp	.+6      	; 0x25ec <vfprintf+0x330>
    25e6:	88 e5       	ldi	r24, 0x58	; 88
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	02 c0       	rjmp	.+4      	; 0x25f0 <vfprintf+0x334>
    25ec:	88 e7       	ldi	r24, 0x78	; 120
    25ee:	90 e0       	ldi	r25, 0x00	; 0
    25f0:	b7 01       	movw	r22, r14
    25f2:	0c c0       	rjmp	.+24     	; 0x260c <vfprintf+0x350>
    25f4:	82 2f       	mov	r24, r18
    25f6:	86 78       	andi	r24, 0x86	; 134
    25f8:	59 f0       	breq	.+22     	; 0x2610 <vfprintf+0x354>
    25fa:	21 fd       	sbrc	r18, 1
    25fc:	02 c0       	rjmp	.+4      	; 0x2602 <vfprintf+0x346>
    25fe:	80 e2       	ldi	r24, 0x20	; 32
    2600:	01 c0       	rjmp	.+2      	; 0x2604 <vfprintf+0x348>
    2602:	8b e2       	ldi	r24, 0x2B	; 43
    2604:	27 fd       	sbrc	r18, 7
    2606:	8d e2       	ldi	r24, 0x2D	; 45
    2608:	b7 01       	movw	r22, r14
    260a:	90 e0       	ldi	r25, 0x00	; 0
    260c:	0e 94 46 13 	call	0x268c	; 0x268c <fputc>
    2610:	a5 14       	cp	r10, r5
    2612:	38 f4       	brcc	.+14     	; 0x2622 <vfprintf+0x366>
    2614:	b7 01       	movw	r22, r14
    2616:	80 e3       	ldi	r24, 0x30	; 48
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	0e 94 46 13 	call	0x268c	; 0x268c <fputc>
    261e:	5a 94       	dec	r5
    2620:	f7 cf       	rjmp	.-18     	; 0x2610 <vfprintf+0x354>
    2622:	aa 94       	dec	r10
    2624:	f4 01       	movw	r30, r8
    2626:	ea 0d       	add	r30, r10
    2628:	f1 1d       	adc	r31, r1
    262a:	80 81       	ld	r24, Z
    262c:	b7 01       	movw	r22, r14
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	0e 94 46 13 	call	0x268c	; 0x268c <fputc>
    2634:	a1 10       	cpse	r10, r1
    2636:	f5 cf       	rjmp	.-22     	; 0x2622 <vfprintf+0x366>
    2638:	33 20       	and	r3, r3
    263a:	09 f4       	brne	.+2      	; 0x263e <vfprintf+0x382>
    263c:	51 ce       	rjmp	.-862    	; 0x22e0 <vfprintf+0x24>
    263e:	b7 01       	movw	r22, r14
    2640:	80 e2       	ldi	r24, 0x20	; 32
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	0e 94 46 13 	call	0x268c	; 0x268c <fputc>
    2648:	3a 94       	dec	r3
    264a:	f6 cf       	rjmp	.-20     	; 0x2638 <vfprintf+0x37c>
    264c:	f7 01       	movw	r30, r14
    264e:	86 81       	ldd	r24, Z+6	; 0x06
    2650:	97 81       	ldd	r25, Z+7	; 0x07
    2652:	02 c0       	rjmp	.+4      	; 0x2658 <vfprintf+0x39c>
    2654:	8f ef       	ldi	r24, 0xFF	; 255
    2656:	9f ef       	ldi	r25, 0xFF	; 255
    2658:	2c 96       	adiw	r28, 0x0c	; 12
    265a:	e2 e1       	ldi	r30, 0x12	; 18
    265c:	0c 94 f2 13 	jmp	0x27e4	; 0x27e4 <__epilogue_restores__>

00002660 <strnlen_P>:
    2660:	fc 01       	movw	r30, r24
    2662:	05 90       	lpm	r0, Z+
    2664:	61 50       	subi	r22, 0x01	; 1
    2666:	70 40       	sbci	r23, 0x00	; 0
    2668:	01 10       	cpse	r0, r1
    266a:	d8 f7       	brcc	.-10     	; 0x2662 <strnlen_P+0x2>
    266c:	80 95       	com	r24
    266e:	90 95       	com	r25
    2670:	8e 0f       	add	r24, r30
    2672:	9f 1f       	adc	r25, r31
    2674:	08 95       	ret

00002676 <strnlen>:
    2676:	fc 01       	movw	r30, r24
    2678:	61 50       	subi	r22, 0x01	; 1
    267a:	70 40       	sbci	r23, 0x00	; 0
    267c:	01 90       	ld	r0, Z+
    267e:	01 10       	cpse	r0, r1
    2680:	d8 f7       	brcc	.-10     	; 0x2678 <strnlen+0x2>
    2682:	80 95       	com	r24
    2684:	90 95       	com	r25
    2686:	8e 0f       	add	r24, r30
    2688:	9f 1f       	adc	r25, r31
    268a:	08 95       	ret

0000268c <fputc>:
    268c:	0f 93       	push	r16
    268e:	1f 93       	push	r17
    2690:	cf 93       	push	r28
    2692:	df 93       	push	r29
    2694:	18 2f       	mov	r17, r24
    2696:	09 2f       	mov	r16, r25
    2698:	eb 01       	movw	r28, r22
    269a:	8b 81       	ldd	r24, Y+3	; 0x03
    269c:	81 fd       	sbrc	r24, 1
    269e:	03 c0       	rjmp	.+6      	; 0x26a6 <fputc+0x1a>
    26a0:	8f ef       	ldi	r24, 0xFF	; 255
    26a2:	9f ef       	ldi	r25, 0xFF	; 255
    26a4:	20 c0       	rjmp	.+64     	; 0x26e6 <fputc+0x5a>
    26a6:	82 ff       	sbrs	r24, 2
    26a8:	10 c0       	rjmp	.+32     	; 0x26ca <fputc+0x3e>
    26aa:	4e 81       	ldd	r20, Y+6	; 0x06
    26ac:	5f 81       	ldd	r21, Y+7	; 0x07
    26ae:	2c 81       	ldd	r18, Y+4	; 0x04
    26b0:	3d 81       	ldd	r19, Y+5	; 0x05
    26b2:	42 17       	cp	r20, r18
    26b4:	53 07       	cpc	r21, r19
    26b6:	7c f4       	brge	.+30     	; 0x26d6 <fputc+0x4a>
    26b8:	e8 81       	ld	r30, Y
    26ba:	f9 81       	ldd	r31, Y+1	; 0x01
    26bc:	9f 01       	movw	r18, r30
    26be:	2f 5f       	subi	r18, 0xFF	; 255
    26c0:	3f 4f       	sbci	r19, 0xFF	; 255
    26c2:	39 83       	std	Y+1, r19	; 0x01
    26c4:	28 83       	st	Y, r18
    26c6:	10 83       	st	Z, r17
    26c8:	06 c0       	rjmp	.+12     	; 0x26d6 <fputc+0x4a>
    26ca:	e8 85       	ldd	r30, Y+8	; 0x08
    26cc:	f9 85       	ldd	r31, Y+9	; 0x09
    26ce:	81 2f       	mov	r24, r17
    26d0:	09 95       	icall
    26d2:	89 2b       	or	r24, r25
    26d4:	29 f7       	brne	.-54     	; 0x26a0 <fputc+0x14>
    26d6:	2e 81       	ldd	r18, Y+6	; 0x06
    26d8:	3f 81       	ldd	r19, Y+7	; 0x07
    26da:	2f 5f       	subi	r18, 0xFF	; 255
    26dc:	3f 4f       	sbci	r19, 0xFF	; 255
    26de:	3f 83       	std	Y+7, r19	; 0x07
    26e0:	2e 83       	std	Y+6, r18	; 0x06
    26e2:	81 2f       	mov	r24, r17
    26e4:	90 2f       	mov	r25, r16
    26e6:	df 91       	pop	r29
    26e8:	cf 91       	pop	r28
    26ea:	1f 91       	pop	r17
    26ec:	0f 91       	pop	r16
    26ee:	08 95       	ret

000026f0 <__ultoa_invert>:
    26f0:	fa 01       	movw	r30, r20
    26f2:	aa 27       	eor	r26, r26
    26f4:	28 30       	cpi	r18, 0x08	; 8
    26f6:	51 f1       	breq	.+84     	; 0x274c <__ultoa_invert+0x5c>
    26f8:	20 31       	cpi	r18, 0x10	; 16
    26fa:	81 f1       	breq	.+96     	; 0x275c <__ultoa_invert+0x6c>
    26fc:	e8 94       	clt
    26fe:	6f 93       	push	r22
    2700:	6e 7f       	andi	r22, 0xFE	; 254
    2702:	6e 5f       	subi	r22, 0xFE	; 254
    2704:	7f 4f       	sbci	r23, 0xFF	; 255
    2706:	8f 4f       	sbci	r24, 0xFF	; 255
    2708:	9f 4f       	sbci	r25, 0xFF	; 255
    270a:	af 4f       	sbci	r26, 0xFF	; 255
    270c:	b1 e0       	ldi	r27, 0x01	; 1
    270e:	3e d0       	rcall	.+124    	; 0x278c <__ultoa_invert+0x9c>
    2710:	b4 e0       	ldi	r27, 0x04	; 4
    2712:	3c d0       	rcall	.+120    	; 0x278c <__ultoa_invert+0x9c>
    2714:	67 0f       	add	r22, r23
    2716:	78 1f       	adc	r23, r24
    2718:	89 1f       	adc	r24, r25
    271a:	9a 1f       	adc	r25, r26
    271c:	a1 1d       	adc	r26, r1
    271e:	68 0f       	add	r22, r24
    2720:	79 1f       	adc	r23, r25
    2722:	8a 1f       	adc	r24, r26
    2724:	91 1d       	adc	r25, r1
    2726:	a1 1d       	adc	r26, r1
    2728:	6a 0f       	add	r22, r26
    272a:	71 1d       	adc	r23, r1
    272c:	81 1d       	adc	r24, r1
    272e:	91 1d       	adc	r25, r1
    2730:	a1 1d       	adc	r26, r1
    2732:	20 d0       	rcall	.+64     	; 0x2774 <__ultoa_invert+0x84>
    2734:	09 f4       	brne	.+2      	; 0x2738 <__ultoa_invert+0x48>
    2736:	68 94       	set
    2738:	3f 91       	pop	r19
    273a:	2a e0       	ldi	r18, 0x0A	; 10
    273c:	26 9f       	mul	r18, r22
    273e:	11 24       	eor	r1, r1
    2740:	30 19       	sub	r19, r0
    2742:	30 5d       	subi	r19, 0xD0	; 208
    2744:	31 93       	st	Z+, r19
    2746:	de f6       	brtc	.-74     	; 0x26fe <__ultoa_invert+0xe>
    2748:	cf 01       	movw	r24, r30
    274a:	08 95       	ret
    274c:	46 2f       	mov	r20, r22
    274e:	47 70       	andi	r20, 0x07	; 7
    2750:	40 5d       	subi	r20, 0xD0	; 208
    2752:	41 93       	st	Z+, r20
    2754:	b3 e0       	ldi	r27, 0x03	; 3
    2756:	0f d0       	rcall	.+30     	; 0x2776 <__ultoa_invert+0x86>
    2758:	c9 f7       	brne	.-14     	; 0x274c <__ultoa_invert+0x5c>
    275a:	f6 cf       	rjmp	.-20     	; 0x2748 <__ultoa_invert+0x58>
    275c:	46 2f       	mov	r20, r22
    275e:	4f 70       	andi	r20, 0x0F	; 15
    2760:	40 5d       	subi	r20, 0xD0	; 208
    2762:	4a 33       	cpi	r20, 0x3A	; 58
    2764:	18 f0       	brcs	.+6      	; 0x276c <__ultoa_invert+0x7c>
    2766:	49 5d       	subi	r20, 0xD9	; 217
    2768:	31 fd       	sbrc	r19, 1
    276a:	40 52       	subi	r20, 0x20	; 32
    276c:	41 93       	st	Z+, r20
    276e:	02 d0       	rcall	.+4      	; 0x2774 <__ultoa_invert+0x84>
    2770:	a9 f7       	brne	.-22     	; 0x275c <__ultoa_invert+0x6c>
    2772:	ea cf       	rjmp	.-44     	; 0x2748 <__ultoa_invert+0x58>
    2774:	b4 e0       	ldi	r27, 0x04	; 4
    2776:	a6 95       	lsr	r26
    2778:	97 95       	ror	r25
    277a:	87 95       	ror	r24
    277c:	77 95       	ror	r23
    277e:	67 95       	ror	r22
    2780:	ba 95       	dec	r27
    2782:	c9 f7       	brne	.-14     	; 0x2776 <__ultoa_invert+0x86>
    2784:	00 97       	sbiw	r24, 0x00	; 0
    2786:	61 05       	cpc	r22, r1
    2788:	71 05       	cpc	r23, r1
    278a:	08 95       	ret
    278c:	9b 01       	movw	r18, r22
    278e:	ac 01       	movw	r20, r24
    2790:	0a 2e       	mov	r0, r26
    2792:	06 94       	lsr	r0
    2794:	57 95       	ror	r21
    2796:	47 95       	ror	r20
    2798:	37 95       	ror	r19
    279a:	27 95       	ror	r18
    279c:	ba 95       	dec	r27
    279e:	c9 f7       	brne	.-14     	; 0x2792 <__ultoa_invert+0xa2>
    27a0:	62 0f       	add	r22, r18
    27a2:	73 1f       	adc	r23, r19
    27a4:	84 1f       	adc	r24, r20
    27a6:	95 1f       	adc	r25, r21
    27a8:	a0 1d       	adc	r26, r0
    27aa:	08 95       	ret

000027ac <__prologue_saves__>:
    27ac:	2f 92       	push	r2
    27ae:	3f 92       	push	r3
    27b0:	4f 92       	push	r4
    27b2:	5f 92       	push	r5
    27b4:	6f 92       	push	r6
    27b6:	7f 92       	push	r7
    27b8:	8f 92       	push	r8
    27ba:	9f 92       	push	r9
    27bc:	af 92       	push	r10
    27be:	bf 92       	push	r11
    27c0:	cf 92       	push	r12
    27c2:	df 92       	push	r13
    27c4:	ef 92       	push	r14
    27c6:	ff 92       	push	r15
    27c8:	0f 93       	push	r16
    27ca:	1f 93       	push	r17
    27cc:	cf 93       	push	r28
    27ce:	df 93       	push	r29
    27d0:	cd b7       	in	r28, 0x3d	; 61
    27d2:	de b7       	in	r29, 0x3e	; 62
    27d4:	ca 1b       	sub	r28, r26
    27d6:	db 0b       	sbc	r29, r27
    27d8:	0f b6       	in	r0, 0x3f	; 63
    27da:	f8 94       	cli
    27dc:	de bf       	out	0x3e, r29	; 62
    27de:	0f be       	out	0x3f, r0	; 63
    27e0:	cd bf       	out	0x3d, r28	; 61
    27e2:	09 94       	ijmp

000027e4 <__epilogue_restores__>:
    27e4:	2a 88       	ldd	r2, Y+18	; 0x12
    27e6:	39 88       	ldd	r3, Y+17	; 0x11
    27e8:	48 88       	ldd	r4, Y+16	; 0x10
    27ea:	5f 84       	ldd	r5, Y+15	; 0x0f
    27ec:	6e 84       	ldd	r6, Y+14	; 0x0e
    27ee:	7d 84       	ldd	r7, Y+13	; 0x0d
    27f0:	8c 84       	ldd	r8, Y+12	; 0x0c
    27f2:	9b 84       	ldd	r9, Y+11	; 0x0b
    27f4:	aa 84       	ldd	r10, Y+10	; 0x0a
    27f6:	b9 84       	ldd	r11, Y+9	; 0x09
    27f8:	c8 84       	ldd	r12, Y+8	; 0x08
    27fa:	df 80       	ldd	r13, Y+7	; 0x07
    27fc:	ee 80       	ldd	r14, Y+6	; 0x06
    27fe:	fd 80       	ldd	r15, Y+5	; 0x05
    2800:	0c 81       	ldd	r16, Y+4	; 0x04
    2802:	1b 81       	ldd	r17, Y+3	; 0x03
    2804:	aa 81       	ldd	r26, Y+2	; 0x02
    2806:	b9 81       	ldd	r27, Y+1	; 0x01
    2808:	ce 0f       	add	r28, r30
    280a:	d1 1d       	adc	r29, r1
    280c:	0f b6       	in	r0, 0x3f	; 63
    280e:	f8 94       	cli
    2810:	de bf       	out	0x3e, r29	; 62
    2812:	0f be       	out	0x3f, r0	; 63
    2814:	cd bf       	out	0x3d, r28	; 61
    2816:	ed 01       	movw	r28, r26
    2818:	08 95       	ret

0000281a <_exit>:
    281a:	f8 94       	cli

0000281c <__stop_program>:
    281c:	ff cf       	rjmp	.-2      	; 0x281c <__stop_program>
