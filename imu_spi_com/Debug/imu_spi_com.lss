
imu_spi_com.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000fca  0000105e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000105e  2**0
                  ALLOC
  3 .stab         00001b6c  00000000  00000000  00001060  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f4e  00000000  00000000  00002bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00003b1a  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000100  00000000  00000000  00003b30  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000005f0  00000000  00000000  00003c30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000000a0  00000000  00000000  00004220  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000328  00000000  00000000  000042c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 fc 06 	jmp	0xdf8	; 0xdf8 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 cc 00 	call	0x198	; 0x198 <main>
  88:	0c 94 e3 07 	jmp	0xfc6	; 0xfc6 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <IMU_init>:
// including myUSART for debugging
#include "myUSART.h"



void IMU_init(){
  90:	cf 93       	push	r28
  92:	df 93       	push	r29
  94:	00 d0       	rcall	.+0      	; 0x96 <IMU_init+0x6>
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
	/*
		MAKE SURE THAT THIS FUNCTION ONLY SETS UP THE IMU SENSOR APPROPRIATELY FOR THE INVERTED PENDULUM
		IT SHOULD ONLY NEED TO BE CALLED ONCE
	*/
	SPI_MasterInit();
  9a:	0e 94 1f 07 	call	0xe3e	; 0xe3e <SPI_MasterInit>

	char setCtrlReg5 = ( 1 << ACC_Z ) | ( 1 << ACC_Y ) | ( 1 << ACC_X );
  9e:	88 e3       	ldi	r24, 0x38	; 56
  a0:	89 83       	std	Y+1, r24	; 0x01

	// Send write address
	SPI_MasterTransmit( WRITE | CTRL_REG5_XL );
  a2:	8f e1       	ldi	r24, 0x1F	; 31
  a4:	0e 94 50 07 	call	0xea0	; 0xea0 <SPI_MasterTransmit>
	// Send ctrlReg5 bit pattern to turn on X,Y,Z acceleration sensors
	SPI_MasterTransmit( setCtrlReg5 );
  a8:	89 81       	ldd	r24, Y+1	; 0x01
  aa:	0e 94 50 07 	call	0xea0	; 0xea0 <SPI_MasterTransmit>

	char setCtrlReg8 = ( 1 << IF_ADD_INC );
  ae:	84 e0       	ldi	r24, 0x04	; 4
  b0:	8a 83       	std	Y+2, r24	; 0x02

	// Send write address
	SPI_MasterTransmit( WRITE | CTRL_REG8 );
  b2:	82 e2       	ldi	r24, 0x22	; 34
  b4:	0e 94 50 07 	call	0xea0	; 0xea0 <SPI_MasterTransmit>
	// Send setCtrlReg8 bit pattern to turn auto increment registers on
	SPI_MasterTransmit( setCtrlReg8 );
  b8:	8a 81       	ldd	r24, Y+2	; 0x02
  ba:	0e 94 50 07 	call	0xea0	; 0xea0 <SPI_MasterTransmit>
}
  be:	0f 90       	pop	r0
  c0:	0f 90       	pop	r0
  c2:	df 91       	pop	r29
  c4:	cf 91       	pop	r28
  c6:	08 95       	ret

000000c8 <IMU_read_acc>:

void IMU_read_acc(int *accBuffer){
  c8:	0f 93       	push	r16
  ca:	1f 93       	push	r17
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	cd b7       	in	r28, 0x3d	; 61
  d2:	de b7       	in	r29, 0x3e	; 62
  d4:	2b 97       	sbiw	r28, 0x0b	; 11
  d6:	0f b6       	in	r0, 0x3f	; 63
  d8:	f8 94       	cli
  da:	de bf       	out	0x3e, r29	; 62
  dc:	0f be       	out	0x3f, r0	; 63
  de:	cd bf       	out	0x3d, r28	; 61
  e0:	9b 87       	std	Y+11, r25	; 0x0b
  e2:	8a 87       	std	Y+10, r24	; 0x0a
	// char sendingRequest[27] = "Now sending request to IMU\n";
	// char readingFromSPDR[18] = "Reading from SPDR\n";

	char spiBuffer[6];
	int *acc = accBuffer;
  e4:	8a 85       	ldd	r24, Y+10	; 0x0a
  e6:	9b 85       	ldd	r25, Y+11	; 0x0b
  e8:	9b 83       	std	Y+3, r25	; 0x03
  ea:	8a 83       	std	Y+2, r24	; 0x02

	// Select the IMU as an SPI Slave
	SPI_Initiate_Transmission();
  ec:	0e 94 30 07 	call	0xe60	; 0xe60 <SPI_Initiate_Transmission>
	// Send "read from acceleration output register" signal
	SPI_MasterTransmit( READ | 0x28 );
  f0:	88 ea       	ldi	r24, 0xA8	; 168
  f2:	0e 94 50 07 	call	0xea0	; 0xea0 <SPI_MasterTransmit>
	for (unsigned char i = 0; i <= 6; i++){
  f6:	19 82       	std	Y+1, r1	; 0x01
  f8:	10 c0       	rjmp	.+32     	; 0x11a <IMU_read_acc+0x52>
			spiBuffer[i] = SPI_MasterTransmit(0x00);
  fa:	89 81       	ldd	r24, Y+1	; 0x01
  fc:	08 2f       	mov	r16, r24
  fe:	10 e0       	ldi	r17, 0x00	; 0
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	0e 94 50 07 	call	0xea0	; 0xea0 <SPI_MasterTransmit>
 106:	28 2f       	mov	r18, r24
 108:	ce 01       	movw	r24, r28
 10a:	04 96       	adiw	r24, 0x04	; 4
 10c:	80 0f       	add	r24, r16
 10e:	91 1f       	adc	r25, r17
 110:	fc 01       	movw	r30, r24
 112:	20 83       	st	Z, r18

	// Select the IMU as an SPI Slave
	SPI_Initiate_Transmission();
	// Send "read from acceleration output register" signal
	SPI_MasterTransmit( READ | 0x28 );
	for (unsigned char i = 0; i <= 6; i++){
 114:	89 81       	ldd	r24, Y+1	; 0x01
 116:	8f 5f       	subi	r24, 0xFF	; 255
 118:	89 83       	std	Y+1, r24	; 0x01
 11a:	89 81       	ldd	r24, Y+1	; 0x01
 11c:	87 30       	cpi	r24, 0x07	; 7
 11e:	68 f3       	brcs	.-38     	; 0xfa <IMU_read_acc+0x32>
			spiBuffer[i] = SPI_MasterTransmit(0x00);
	}
	SPI_End_Transmission();
 120:	0e 94 40 07 	call	0xe80	; 0xe80 <SPI_End_Transmission>

	acc[0] = (spiBuffer[1] << 8 | spiBuffer[0]);
 124:	8d 81       	ldd	r24, Y+5	; 0x05
 126:	88 2f       	mov	r24, r24
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	38 2f       	mov	r19, r24
 12c:	22 27       	eor	r18, r18
 12e:	8c 81       	ldd	r24, Y+4	; 0x04
 130:	88 2f       	mov	r24, r24
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	28 2b       	or	r18, r24
 136:	39 2b       	or	r19, r25
 138:	8a 81       	ldd	r24, Y+2	; 0x02
 13a:	9b 81       	ldd	r25, Y+3	; 0x03
 13c:	fc 01       	movw	r30, r24
 13e:	31 83       	std	Z+1, r19	; 0x01
 140:	20 83       	st	Z, r18
	acc[1] = (spiBuffer[3] << 8 | spiBuffer[2]);
 142:	8a 81       	ldd	r24, Y+2	; 0x02
 144:	9b 81       	ldd	r25, Y+3	; 0x03
 146:	02 96       	adiw	r24, 0x02	; 2
 148:	2f 81       	ldd	r18, Y+7	; 0x07
 14a:	22 2f       	mov	r18, r18
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	52 2f       	mov	r21, r18
 150:	44 27       	eor	r20, r20
 152:	2e 81       	ldd	r18, Y+6	; 0x06
 154:	22 2f       	mov	r18, r18
 156:	30 e0       	ldi	r19, 0x00	; 0
 158:	24 2b       	or	r18, r20
 15a:	35 2b       	or	r19, r21
 15c:	fc 01       	movw	r30, r24
 15e:	31 83       	std	Z+1, r19	; 0x01
 160:	20 83       	st	Z, r18
	acc[2] = (spiBuffer[5] << 8 | spiBuffer[4]);
 162:	8a 81       	ldd	r24, Y+2	; 0x02
 164:	9b 81       	ldd	r25, Y+3	; 0x03
 166:	04 96       	adiw	r24, 0x04	; 4
 168:	29 85       	ldd	r18, Y+9	; 0x09
 16a:	22 2f       	mov	r18, r18
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	52 2f       	mov	r21, r18
 170:	44 27       	eor	r20, r20
 172:	28 85       	ldd	r18, Y+8	; 0x08
 174:	22 2f       	mov	r18, r18
 176:	30 e0       	ldi	r19, 0x00	; 0
 178:	24 2b       	or	r18, r20
 17a:	35 2b       	or	r19, r21
 17c:	fc 01       	movw	r30, r24
 17e:	31 83       	std	Z+1, r19	; 0x01
 180:	20 83       	st	Z, r18
}
 182:	2b 96       	adiw	r28, 0x0b	; 11
 184:	0f b6       	in	r0, 0x3f	; 63
 186:	f8 94       	cli
 188:	de bf       	out	0x3e, r29	; 62
 18a:	0f be       	out	0x3f, r0	; 63
 18c:	cd bf       	out	0x3d, r28	; 61
 18e:	df 91       	pop	r29
 190:	cf 91       	pop	r28
 192:	1f 91       	pop	r17
 194:	0f 91       	pop	r16
 196:	08 95       	ret

00000198 <main>:
#define FOSC 16000000
#define BAUD 9600
#define MYUBRR FOSC/BAUD/16 - 1


int main(){
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
 19c:	00 d0       	rcall	.+0      	; 0x19e <main+0x6>
 19e:	00 d0       	rcall	.+0      	; 0x1a0 <main+0x8>
 1a0:	00 d0       	rcall	.+0      	; 0x1a2 <main+0xa>
 1a2:	cd b7       	in	r28, 0x3d	; 61
 1a4:	de b7       	in	r29, 0x3e	; 62
	asm("sei");
 1a6:	78 94       	sei
	USART_init(MYUBRR);
 1a8:	87 e6       	ldi	r24, 0x67	; 103
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	0e 94 ee 00 	call	0x1dc	; 0x1dc <USART_init>
	IMU_init();
 1b0:	0e 94 48 00 	call	0x90	; 0x90 <IMU_init>
	int acc_data[3];

	while(1){
		if(dataReceived){
 1b4:	80 91 00 01 	lds	r24, 0x0100
 1b8:	88 23       	and	r24, r24
 1ba:	79 f0       	breq	.+30     	; 0x1da <main+0x42>
			if (rxBuffer == 'q') {dataReceived = 0;};
 1bc:	80 91 01 01 	lds	r24, 0x0101
 1c0:	81 37       	cpi	r24, 0x71	; 113
 1c2:	11 f4       	brne	.+4      	; 0x1c8 <main+0x30>
 1c4:	10 92 00 01 	sts	0x0100, r1
			IMU_read_acc(acc_data);
 1c8:	ce 01       	movw	r24, r28
 1ca:	01 96       	adiw	r24, 0x01	; 1
 1cc:	0e 94 64 00 	call	0xc8	; 0xc8 <IMU_read_acc>
			USART_Transmit_16_dec(acc_data[0]);
 1d0:	89 81       	ldd	r24, Y+1	; 0x01
 1d2:	9a 81       	ldd	r25, Y+2	; 0x02
 1d4:	0e 94 1d 04 	call	0x83a	; 0x83a <USART_Transmit_16_dec>
		}


	}
 1d8:	ed cf       	rjmp	.-38     	; 0x1b4 <main+0x1c>
 1da:	ec cf       	rjmp	.-40     	; 0x1b4 <main+0x1c>

000001dc <USART_init>:
	/* Write the data into the USART Data I/O register	*/	\
	UDR0 = data;	\
}


void USART_init(unsigned int br){
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	cd b7       	in	r28, 0x3d	; 61
 1e2:	de b7       	in	r29, 0x3e	; 62
 1e4:	28 97       	sbiw	r28, 0x08	; 8
 1e6:	0f b6       	in	r0, 0x3f	; 63
 1e8:	f8 94       	cli
 1ea:	de bf       	out	0x3e, r29	; 62
 1ec:	0f be       	out	0x3f, r0	; 63
 1ee:	cd bf       	out	0x3d, r28	; 61
 1f0:	9c 83       	std	Y+4, r25	; 0x04
 1f2:	8b 83       	std	Y+3, r24	; 0x03
	unsigned int ubrr = 16000000/16/br - 1;
 1f4:	8b 81       	ldd	r24, Y+3	; 0x03
 1f6:	9c 81       	ldd	r25, Y+4	; 0x04
 1f8:	9c 01       	movw	r18, r24
 1fa:	40 e0       	ldi	r20, 0x00	; 0
 1fc:	50 e0       	ldi	r21, 0x00	; 0
 1fe:	80 e4       	ldi	r24, 0x40	; 64
 200:	92 e4       	ldi	r25, 0x42	; 66
 202:	af e0       	ldi	r26, 0x0F	; 15
 204:	b0 e0       	ldi	r27, 0x00	; 0
 206:	bc 01       	movw	r22, r24
 208:	cd 01       	movw	r24, r26
 20a:	0e 94 7f 07 	call	0xefe	; 0xefe <__divmodsi4>
 20e:	da 01       	movw	r26, r20
 210:	c9 01       	movw	r24, r18
 212:	01 97       	sbiw	r24, 0x01	; 1
 214:	9a 83       	std	Y+2, r25	; 0x02
 216:	89 83       	std	Y+1, r24	; 0x01
	// Settin Baud Rate to br
	UBRR0H = (unsigned char) (ubrr >> 8);
 218:	85 ec       	ldi	r24, 0xC5	; 197
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	29 81       	ldd	r18, Y+1	; 0x01
 21e:	3a 81       	ldd	r19, Y+2	; 0x02
 220:	23 2f       	mov	r18, r19
 222:	33 27       	eor	r19, r19
 224:	fc 01       	movw	r30, r24
 226:	20 83       	st	Z, r18
	UBRR0L = (unsigned char) ubrr;
 228:	84 ec       	ldi	r24, 0xC4	; 196
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	29 81       	ldd	r18, Y+1	; 0x01
 22e:	fc 01       	movw	r30, r24
 230:	20 83       	st	Z, r18

	// Enabling Receive (RXEN0) and transmit (TXEN0) and
	// the RX Complete Interrupt in the USART
	//Control and Status Register 0B
	UCSR0B = (1 << RXEN0) | ( 1 << TXEN0 ) | ( 1 << RXCIE0);
 232:	81 ec       	ldi	r24, 0xC1	; 193
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	28 e9       	ldi	r18, 0x98	; 152
 238:	fc 01       	movw	r30, r24
 23a:	20 83       	st	Z, r18

	// Setting frame format:
			// 2 stop bits		8 bit
	UCSR0C = (1 << USBS0) | (3 << UCSZ00);
 23c:	82 ec       	ldi	r24, 0xC2	; 194
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	2e e0       	ldi	r18, 0x0E	; 14
 242:	fc 01       	movw	r30, r24
 244:	20 83       	st	Z, r18
}
 246:	28 96       	adiw	r28, 0x08	; 8
 248:	0f b6       	in	r0, 0x3f	; 63
 24a:	f8 94       	cli
 24c:	de bf       	out	0x3e, r29	; 62
 24e:	0f be       	out	0x3f, r0	; 63
 250:	cd bf       	out	0x3d, r28	; 61
 252:	df 91       	pop	r29
 254:	cf 91       	pop	r28
 256:	08 95       	ret

00000258 <USART_Transmit_32_hex>:


void USART_Transmit_32_hex(long data32bit){
 258:	cf 93       	push	r28
 25a:	df 93       	push	r29
 25c:	cd b7       	in	r28, 0x3d	; 61
 25e:	de b7       	in	r29, 0x3e	; 62
 260:	60 97       	sbiw	r28, 0x10	; 16
 262:	0f b6       	in	r0, 0x3f	; 63
 264:	f8 94       	cli
 266:	de bf       	out	0x3e, r29	; 62
 268:	0f be       	out	0x3f, r0	; 63
 26a:	cd bf       	out	0x3d, r28	; 61
 26c:	6d 87       	std	Y+13, r22	; 0x0d
 26e:	7e 87       	std	Y+14, r23	; 0x0e
 270:	8f 87       	std	Y+15, r24	; 0x0f
 272:	98 8b       	std	Y+16, r25	; 0x10
	unsigned char N[8];
	unsigned char *ptr = &N[0];
 274:	ce 01       	movw	r24, r28
 276:	05 96       	adiw	r24, 0x05	; 5
 278:	9a 83       	std	Y+2, r25	; 0x02
 27a:	89 83       	std	Y+1, r24	; 0x01
	for (uint8_t i = 0; i < 8; i++){
 27c:	1b 82       	std	Y+3, r1	; 0x03
 27e:	21 c0       	rjmp	.+66     	; 0x2c2 <USART_Transmit_32_hex+0x6a>
		N[i] = ((data32bit >> 4*i) & 0xF);
 280:	8b 81       	ldd	r24, Y+3	; 0x03
 282:	28 2f       	mov	r18, r24
 284:	30 e0       	ldi	r19, 0x00	; 0
 286:	8b 81       	ldd	r24, Y+3	; 0x03
 288:	88 2f       	mov	r24, r24
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	ac 01       	movw	r20, r24
 28e:	44 0f       	add	r20, r20
 290:	55 1f       	adc	r21, r21
 292:	44 0f       	add	r20, r20
 294:	55 1f       	adc	r21, r21
 296:	8d 85       	ldd	r24, Y+13	; 0x0d
 298:	9e 85       	ldd	r25, Y+14	; 0x0e
 29a:	af 85       	ldd	r26, Y+15	; 0x0f
 29c:	b8 89       	ldd	r27, Y+16	; 0x10
 29e:	04 c0       	rjmp	.+8      	; 0x2a8 <USART_Transmit_32_hex+0x50>
 2a0:	b5 95       	asr	r27
 2a2:	a7 95       	ror	r26
 2a4:	97 95       	ror	r25
 2a6:	87 95       	ror	r24
 2a8:	4a 95       	dec	r20
 2aa:	d2 f7       	brpl	.-12     	; 0x2a0 <USART_Transmit_32_hex+0x48>
 2ac:	48 2f       	mov	r20, r24
 2ae:	4f 70       	andi	r20, 0x0F	; 15
 2b0:	ce 01       	movw	r24, r28
 2b2:	05 96       	adiw	r24, 0x05	; 5
 2b4:	82 0f       	add	r24, r18
 2b6:	93 1f       	adc	r25, r19
 2b8:	fc 01       	movw	r30, r24
 2ba:	40 83       	st	Z, r20


void USART_Transmit_32_hex(long data32bit){
	unsigned char N[8];
	unsigned char *ptr = &N[0];
	for (uint8_t i = 0; i < 8; i++){
 2bc:	8b 81       	ldd	r24, Y+3	; 0x03
 2be:	8f 5f       	subi	r24, 0xFF	; 255
 2c0:	8b 83       	std	Y+3, r24	; 0x03
 2c2:	8b 81       	ldd	r24, Y+3	; 0x03
 2c4:	88 30       	cpi	r24, 0x08	; 8
 2c6:	e0 f2       	brcs	.-72     	; 0x280 <USART_Transmit_32_hex+0x28>
		N[i] = ((data32bit >> 4*i) & 0xF);
	}
	for (unsigned char i = 0; i < 8; i++){
 2c8:	1c 82       	std	Y+4, r1	; 0x04
 2ca:	43 c0       	rjmp	.+134    	; 0x352 <USART_Transmit_32_hex+0xfa>
		convert2ASCII_hex(*(ptr+7))	// The MSN is last in the memory so we loop backwards
 2cc:	89 81       	ldd	r24, Y+1	; 0x01
 2ce:	9a 81       	ldd	r25, Y+2	; 0x02
 2d0:	07 96       	adiw	r24, 0x07	; 7
 2d2:	fc 01       	movw	r30, r24
 2d4:	80 81       	ld	r24, Z
 2d6:	8a 30       	cpi	r24, 0x0A	; 10
 2d8:	68 f4       	brcc	.+26     	; 0x2f4 <USART_Transmit_32_hex+0x9c>
 2da:	89 81       	ldd	r24, Y+1	; 0x01
 2dc:	9a 81       	ldd	r25, Y+2	; 0x02
 2de:	07 96       	adiw	r24, 0x07	; 7
 2e0:	29 81       	ldd	r18, Y+1	; 0x01
 2e2:	3a 81       	ldd	r19, Y+2	; 0x02
 2e4:	29 5f       	subi	r18, 0xF9	; 249
 2e6:	3f 4f       	sbci	r19, 0xFF	; 255
 2e8:	f9 01       	movw	r30, r18
 2ea:	20 81       	ld	r18, Z
 2ec:	20 5d       	subi	r18, 0xD0	; 208
 2ee:	fc 01       	movw	r30, r24
 2f0:	20 83       	st	Z, r18
 2f2:	14 c0       	rjmp	.+40     	; 0x31c <USART_Transmit_32_hex+0xc4>
 2f4:	89 81       	ldd	r24, Y+1	; 0x01
 2f6:	9a 81       	ldd	r25, Y+2	; 0x02
 2f8:	07 96       	adiw	r24, 0x07	; 7
 2fa:	fc 01       	movw	r30, r24
 2fc:	80 81       	ld	r24, Z
 2fe:	80 31       	cpi	r24, 0x10	; 16
 300:	68 f4       	brcc	.+26     	; 0x31c <USART_Transmit_32_hex+0xc4>
 302:	89 81       	ldd	r24, Y+1	; 0x01
 304:	9a 81       	ldd	r25, Y+2	; 0x02
 306:	07 96       	adiw	r24, 0x07	; 7
 308:	29 81       	ldd	r18, Y+1	; 0x01
 30a:	3a 81       	ldd	r19, Y+2	; 0x02
 30c:	29 5f       	subi	r18, 0xF9	; 249
 30e:	3f 4f       	sbci	r19, 0xFF	; 255
 310:	f9 01       	movw	r30, r18
 312:	20 81       	ld	r18, Z
 314:	29 5c       	subi	r18, 0xC9	; 201
 316:	fc 01       	movw	r30, r24
 318:	20 83       	st	Z, r18
		USART_Transmit(*(ptr+7));
 31a:	00 c0       	rjmp	.+0      	; 0x31c <USART_Transmit_32_hex+0xc4>
 31c:	00 00       	nop
 31e:	80 ec       	ldi	r24, 0xC0	; 192
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	fc 01       	movw	r30, r24
 324:	80 81       	ld	r24, Z
 326:	88 2f       	mov	r24, r24
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	80 72       	andi	r24, 0x20	; 32
 32c:	99 27       	eor	r25, r25
 32e:	00 97       	sbiw	r24, 0x00	; 0
 330:	b1 f3       	breq	.-20     	; 0x31e <USART_Transmit_32_hex+0xc6>
 332:	86 ec       	ldi	r24, 0xC6	; 198
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	29 81       	ldd	r18, Y+1	; 0x01
 338:	3a 81       	ldd	r19, Y+2	; 0x02
 33a:	f9 01       	movw	r30, r18
 33c:	27 81       	ldd	r18, Z+7	; 0x07
 33e:	fc 01       	movw	r30, r24
 340:	20 83       	st	Z, r18
		ptr--;
 342:	89 81       	ldd	r24, Y+1	; 0x01
 344:	9a 81       	ldd	r25, Y+2	; 0x02
 346:	01 97       	sbiw	r24, 0x01	; 1
 348:	9a 83       	std	Y+2, r25	; 0x02
 34a:	89 83       	std	Y+1, r24	; 0x01
	unsigned char N[8];
	unsigned char *ptr = &N[0];
	for (uint8_t i = 0; i < 8; i++){
		N[i] = ((data32bit >> 4*i) & 0xF);
	}
	for (unsigned char i = 0; i < 8; i++){
 34c:	8c 81       	ldd	r24, Y+4	; 0x04
 34e:	8f 5f       	subi	r24, 0xFF	; 255
 350:	8c 83       	std	Y+4, r24	; 0x04
 352:	8c 81       	ldd	r24, Y+4	; 0x04
 354:	88 30       	cpi	r24, 0x08	; 8
 356:	08 f4       	brcc	.+2      	; 0x35a <USART_Transmit_32_hex+0x102>
 358:	b9 cf       	rjmp	.-142    	; 0x2cc <USART_Transmit_32_hex+0x74>
		convert2ASCII_hex(*(ptr+7))	// The MSN is last in the memory so we loop backwards
		USART_Transmit(*(ptr+7));
		ptr--;
	}
	USART_Transmit(0x0A);
 35a:	00 00       	nop
 35c:	80 ec       	ldi	r24, 0xC0	; 192
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	fc 01       	movw	r30, r24
 362:	80 81       	ld	r24, Z
 364:	88 2f       	mov	r24, r24
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	80 72       	andi	r24, 0x20	; 32
 36a:	99 27       	eor	r25, r25
 36c:	00 97       	sbiw	r24, 0x00	; 0
 36e:	b1 f3       	breq	.-20     	; 0x35c <USART_Transmit_32_hex+0x104>
 370:	86 ec       	ldi	r24, 0xC6	; 198
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	2a e0       	ldi	r18, 0x0A	; 10
 376:	fc 01       	movw	r30, r24
 378:	20 83       	st	Z, r18
}
 37a:	60 96       	adiw	r28, 0x10	; 16
 37c:	0f b6       	in	r0, 0x3f	; 63
 37e:	f8 94       	cli
 380:	de bf       	out	0x3e, r29	; 62
 382:	0f be       	out	0x3f, r0	; 63
 384:	cd bf       	out	0x3d, r28	; 61
 386:	df 91       	pop	r29
 388:	cf 91       	pop	r28
 38a:	08 95       	ret

0000038c <USART_Transmit_16_hex>:


void USART_Transmit_16_hex(int data16bit){
 38c:	cf 93       	push	r28
 38e:	df 93       	push	r29
 390:	00 d0       	rcall	.+0      	; 0x392 <USART_Transmit_16_hex+0x6>
 392:	00 d0       	rcall	.+0      	; 0x394 <USART_Transmit_16_hex+0x8>
 394:	00 d0       	rcall	.+0      	; 0x396 <USART_Transmit_16_hex+0xa>
 396:	cd b7       	in	r28, 0x3d	; 61
 398:	de b7       	in	r29, 0x3e	; 62
 39a:	9e 83       	std	Y+6, r25	; 0x06
 39c:	8d 83       	std	Y+5, r24	; 0x05
	unsigned char N_1 = (data16bit & 0x000F);
 39e:	8d 81       	ldd	r24, Y+5	; 0x05
 3a0:	8f 70       	andi	r24, 0x0F	; 15
 3a2:	89 83       	std	Y+1, r24	; 0x01
	unsigned char N_2 = ((data16bit >> 4 ) & 0x000F);
 3a4:	8d 81       	ldd	r24, Y+5	; 0x05
 3a6:	9e 81       	ldd	r25, Y+6	; 0x06
 3a8:	95 95       	asr	r25
 3aa:	87 95       	ror	r24
 3ac:	95 95       	asr	r25
 3ae:	87 95       	ror	r24
 3b0:	95 95       	asr	r25
 3b2:	87 95       	ror	r24
 3b4:	95 95       	asr	r25
 3b6:	87 95       	ror	r24
 3b8:	8f 70       	andi	r24, 0x0F	; 15
 3ba:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char N_3 = ((data16bit >> 8 ) & 0x000F);
 3bc:	8d 81       	ldd	r24, Y+5	; 0x05
 3be:	9e 81       	ldd	r25, Y+6	; 0x06
 3c0:	89 2f       	mov	r24, r25
 3c2:	99 0f       	add	r25, r25
 3c4:	99 0b       	sbc	r25, r25
 3c6:	8f 70       	andi	r24, 0x0F	; 15
 3c8:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char N_4 = ((data16bit >> 12 ) & 0x000F);
 3ca:	8d 81       	ldd	r24, Y+5	; 0x05
 3cc:	9e 81       	ldd	r25, Y+6	; 0x06
 3ce:	89 2f       	mov	r24, r25
 3d0:	99 27       	eor	r25, r25
 3d2:	82 95       	swap	r24
 3d4:	8f 70       	andi	r24, 0x0F	; 15
 3d6:	8c 83       	std	Y+4, r24	; 0x04

	convert2ASCII_hex(N_1);
 3d8:	89 81       	ldd	r24, Y+1	; 0x01
 3da:	8a 30       	cpi	r24, 0x0A	; 10
 3dc:	20 f4       	brcc	.+8      	; 0x3e6 <USART_Transmit_16_hex+0x5a>
 3de:	89 81       	ldd	r24, Y+1	; 0x01
 3e0:	80 5d       	subi	r24, 0xD0	; 208
 3e2:	89 83       	std	Y+1, r24	; 0x01
 3e4:	06 c0       	rjmp	.+12     	; 0x3f2 <USART_Transmit_16_hex+0x66>
 3e6:	89 81       	ldd	r24, Y+1	; 0x01
 3e8:	80 31       	cpi	r24, 0x10	; 16
 3ea:	18 f4       	brcc	.+6      	; 0x3f2 <USART_Transmit_16_hex+0x66>
 3ec:	89 81       	ldd	r24, Y+1	; 0x01
 3ee:	89 5c       	subi	r24, 0xC9	; 201
 3f0:	89 83       	std	Y+1, r24	; 0x01
	convert2ASCII_hex(N_2);
 3f2:	8a 81       	ldd	r24, Y+2	; 0x02
 3f4:	8a 30       	cpi	r24, 0x0A	; 10
 3f6:	20 f4       	brcc	.+8      	; 0x400 <USART_Transmit_16_hex+0x74>
 3f8:	8a 81       	ldd	r24, Y+2	; 0x02
 3fa:	80 5d       	subi	r24, 0xD0	; 208
 3fc:	8a 83       	std	Y+2, r24	; 0x02
 3fe:	06 c0       	rjmp	.+12     	; 0x40c <USART_Transmit_16_hex+0x80>
 400:	8a 81       	ldd	r24, Y+2	; 0x02
 402:	80 31       	cpi	r24, 0x10	; 16
 404:	18 f4       	brcc	.+6      	; 0x40c <USART_Transmit_16_hex+0x80>
 406:	8a 81       	ldd	r24, Y+2	; 0x02
 408:	89 5c       	subi	r24, 0xC9	; 201
 40a:	8a 83       	std	Y+2, r24	; 0x02
	convert2ASCII_hex(N_3);
 40c:	8b 81       	ldd	r24, Y+3	; 0x03
 40e:	8a 30       	cpi	r24, 0x0A	; 10
 410:	20 f4       	brcc	.+8      	; 0x41a <USART_Transmit_16_hex+0x8e>
 412:	8b 81       	ldd	r24, Y+3	; 0x03
 414:	80 5d       	subi	r24, 0xD0	; 208
 416:	8b 83       	std	Y+3, r24	; 0x03
 418:	06 c0       	rjmp	.+12     	; 0x426 <USART_Transmit_16_hex+0x9a>
 41a:	8b 81       	ldd	r24, Y+3	; 0x03
 41c:	80 31       	cpi	r24, 0x10	; 16
 41e:	18 f4       	brcc	.+6      	; 0x426 <USART_Transmit_16_hex+0x9a>
 420:	8b 81       	ldd	r24, Y+3	; 0x03
 422:	89 5c       	subi	r24, 0xC9	; 201
 424:	8b 83       	std	Y+3, r24	; 0x03
	convert2ASCII_hex(N_4);
 426:	8c 81       	ldd	r24, Y+4	; 0x04
 428:	8a 30       	cpi	r24, 0x0A	; 10
 42a:	20 f4       	brcc	.+8      	; 0x434 <USART_Transmit_16_hex+0xa8>
 42c:	8c 81       	ldd	r24, Y+4	; 0x04
 42e:	80 5d       	subi	r24, 0xD0	; 208
 430:	8c 83       	std	Y+4, r24	; 0x04
 432:	07 c0       	rjmp	.+14     	; 0x442 <USART_Transmit_16_hex+0xb6>
 434:	8c 81       	ldd	r24, Y+4	; 0x04
 436:	80 31       	cpi	r24, 0x10	; 16
 438:	20 f4       	brcc	.+8      	; 0x442 <USART_Transmit_16_hex+0xb6>
 43a:	8c 81       	ldd	r24, Y+4	; 0x04
 43c:	89 5c       	subi	r24, 0xC9	; 201
 43e:	8c 83       	std	Y+4, r24	; 0x04

	USART_Transmit('0');
 440:	00 c0       	rjmp	.+0      	; 0x442 <USART_Transmit_16_hex+0xb6>
 442:	00 00       	nop
 444:	80 ec       	ldi	r24, 0xC0	; 192
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	fc 01       	movw	r30, r24
 44a:	80 81       	ld	r24, Z
 44c:	88 2f       	mov	r24, r24
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	80 72       	andi	r24, 0x20	; 32
 452:	99 27       	eor	r25, r25
 454:	00 97       	sbiw	r24, 0x00	; 0
 456:	b1 f3       	breq	.-20     	; 0x444 <USART_Transmit_16_hex+0xb8>
 458:	86 ec       	ldi	r24, 0xC6	; 198
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	20 e3       	ldi	r18, 0x30	; 48
 45e:	fc 01       	movw	r30, r24
 460:	20 83       	st	Z, r18
	USART_Transmit('x');
 462:	00 00       	nop
 464:	80 ec       	ldi	r24, 0xC0	; 192
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	fc 01       	movw	r30, r24
 46a:	80 81       	ld	r24, Z
 46c:	88 2f       	mov	r24, r24
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	80 72       	andi	r24, 0x20	; 32
 472:	99 27       	eor	r25, r25
 474:	00 97       	sbiw	r24, 0x00	; 0
 476:	b1 f3       	breq	.-20     	; 0x464 <USART_Transmit_16_hex+0xd8>
 478:	86 ec       	ldi	r24, 0xC6	; 198
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	28 e7       	ldi	r18, 0x78	; 120
 47e:	fc 01       	movw	r30, r24
 480:	20 83       	st	Z, r18

	USART_Transmit(N_4);
 482:	00 00       	nop
 484:	80 ec       	ldi	r24, 0xC0	; 192
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	fc 01       	movw	r30, r24
 48a:	80 81       	ld	r24, Z
 48c:	88 2f       	mov	r24, r24
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	80 72       	andi	r24, 0x20	; 32
 492:	99 27       	eor	r25, r25
 494:	00 97       	sbiw	r24, 0x00	; 0
 496:	b1 f3       	breq	.-20     	; 0x484 <USART_Transmit_16_hex+0xf8>
 498:	86 ec       	ldi	r24, 0xC6	; 198
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	2c 81       	ldd	r18, Y+4	; 0x04
 49e:	fc 01       	movw	r30, r24
 4a0:	20 83       	st	Z, r18
	USART_Transmit(N_3);
 4a2:	00 00       	nop
 4a4:	80 ec       	ldi	r24, 0xC0	; 192
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	fc 01       	movw	r30, r24
 4aa:	80 81       	ld	r24, Z
 4ac:	88 2f       	mov	r24, r24
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	80 72       	andi	r24, 0x20	; 32
 4b2:	99 27       	eor	r25, r25
 4b4:	00 97       	sbiw	r24, 0x00	; 0
 4b6:	b1 f3       	breq	.-20     	; 0x4a4 <USART_Transmit_16_hex+0x118>
 4b8:	86 ec       	ldi	r24, 0xC6	; 198
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	2b 81       	ldd	r18, Y+3	; 0x03
 4be:	fc 01       	movw	r30, r24
 4c0:	20 83       	st	Z, r18
	USART_Transmit(N_2);
 4c2:	00 00       	nop
 4c4:	80 ec       	ldi	r24, 0xC0	; 192
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	fc 01       	movw	r30, r24
 4ca:	80 81       	ld	r24, Z
 4cc:	88 2f       	mov	r24, r24
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	80 72       	andi	r24, 0x20	; 32
 4d2:	99 27       	eor	r25, r25
 4d4:	00 97       	sbiw	r24, 0x00	; 0
 4d6:	b1 f3       	breq	.-20     	; 0x4c4 <USART_Transmit_16_hex+0x138>
 4d8:	86 ec       	ldi	r24, 0xC6	; 198
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	2a 81       	ldd	r18, Y+2	; 0x02
 4de:	fc 01       	movw	r30, r24
 4e0:	20 83       	st	Z, r18
	USART_Transmit(N_1);
 4e2:	00 00       	nop
 4e4:	80 ec       	ldi	r24, 0xC0	; 192
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	fc 01       	movw	r30, r24
 4ea:	80 81       	ld	r24, Z
 4ec:	88 2f       	mov	r24, r24
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	80 72       	andi	r24, 0x20	; 32
 4f2:	99 27       	eor	r25, r25
 4f4:	00 97       	sbiw	r24, 0x00	; 0
 4f6:	b1 f3       	breq	.-20     	; 0x4e4 <USART_Transmit_16_hex+0x158>
 4f8:	86 ec       	ldi	r24, 0xC6	; 198
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	29 81       	ldd	r18, Y+1	; 0x01
 4fe:	fc 01       	movw	r30, r24
 500:	20 83       	st	Z, r18
	USART_Transmit(0x0A);
 502:	00 00       	nop
 504:	80 ec       	ldi	r24, 0xC0	; 192
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	fc 01       	movw	r30, r24
 50a:	80 81       	ld	r24, Z
 50c:	88 2f       	mov	r24, r24
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	80 72       	andi	r24, 0x20	; 32
 512:	99 27       	eor	r25, r25
 514:	00 97       	sbiw	r24, 0x00	; 0
 516:	b1 f3       	breq	.-20     	; 0x504 <USART_Transmit_16_hex+0x178>
 518:	86 ec       	ldi	r24, 0xC6	; 198
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	2a e0       	ldi	r18, 0x0A	; 10
 51e:	fc 01       	movw	r30, r24
 520:	20 83       	st	Z, r18
}
 522:	26 96       	adiw	r28, 0x06	; 6
 524:	0f b6       	in	r0, 0x3f	; 63
 526:	f8 94       	cli
 528:	de bf       	out	0x3e, r29	; 62
 52a:	0f be       	out	0x3f, r0	; 63
 52c:	cd bf       	out	0x3d, r28	; 61
 52e:	df 91       	pop	r29
 530:	cf 91       	pop	r28
 532:	08 95       	ret

00000534 <USART_Transmit_8_hex>:



void USART_Transmit_8_hex(unsigned char byte){
 534:	cf 93       	push	r28
 536:	df 93       	push	r29
 538:	00 d0       	rcall	.+0      	; 0x53a <USART_Transmit_8_hex+0x6>
 53a:	1f 92       	push	r1
 53c:	cd b7       	in	r28, 0x3d	; 61
 53e:	de b7       	in	r29, 0x3e	; 62
 540:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char LSN = (byte & 0x0F);
 542:	8b 81       	ldd	r24, Y+3	; 0x03
 544:	8f 70       	andi	r24, 0x0F	; 15
 546:	89 83       	std	Y+1, r24	; 0x01
	unsigned char MSN = ((byte >> 4) & 0x0F);
 548:	8b 81       	ldd	r24, Y+3	; 0x03
 54a:	82 95       	swap	r24
 54c:	8f 70       	andi	r24, 0x0F	; 15
 54e:	8a 83       	std	Y+2, r24	; 0x02

	convert2ASCII_hex(LSN);
 550:	89 81       	ldd	r24, Y+1	; 0x01
 552:	8a 30       	cpi	r24, 0x0A	; 10
 554:	20 f4       	brcc	.+8      	; 0x55e <USART_Transmit_8_hex+0x2a>
 556:	89 81       	ldd	r24, Y+1	; 0x01
 558:	80 5d       	subi	r24, 0xD0	; 208
 55a:	89 83       	std	Y+1, r24	; 0x01
 55c:	06 c0       	rjmp	.+12     	; 0x56a <USART_Transmit_8_hex+0x36>
 55e:	89 81       	ldd	r24, Y+1	; 0x01
 560:	80 31       	cpi	r24, 0x10	; 16
 562:	18 f4       	brcc	.+6      	; 0x56a <USART_Transmit_8_hex+0x36>
 564:	89 81       	ldd	r24, Y+1	; 0x01
 566:	89 5c       	subi	r24, 0xC9	; 201
 568:	89 83       	std	Y+1, r24	; 0x01
	convert2ASCII_hex(MSN);
 56a:	8a 81       	ldd	r24, Y+2	; 0x02
 56c:	8a 30       	cpi	r24, 0x0A	; 10
 56e:	20 f4       	brcc	.+8      	; 0x578 <USART_Transmit_8_hex+0x44>
 570:	8a 81       	ldd	r24, Y+2	; 0x02
 572:	80 5d       	subi	r24, 0xD0	; 208
 574:	8a 83       	std	Y+2, r24	; 0x02
 576:	07 c0       	rjmp	.+14     	; 0x586 <USART_Transmit_8_hex+0x52>
 578:	8a 81       	ldd	r24, Y+2	; 0x02
 57a:	80 31       	cpi	r24, 0x10	; 16
 57c:	20 f4       	brcc	.+8      	; 0x586 <USART_Transmit_8_hex+0x52>
 57e:	8a 81       	ldd	r24, Y+2	; 0x02
 580:	89 5c       	subi	r24, 0xC9	; 201
 582:	8a 83       	std	Y+2, r24	; 0x02

	USART_Transmit('0');
 584:	00 c0       	rjmp	.+0      	; 0x586 <USART_Transmit_8_hex+0x52>
 586:	00 00       	nop
 588:	80 ec       	ldi	r24, 0xC0	; 192
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	fc 01       	movw	r30, r24
 58e:	80 81       	ld	r24, Z
 590:	88 2f       	mov	r24, r24
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	80 72       	andi	r24, 0x20	; 32
 596:	99 27       	eor	r25, r25
 598:	00 97       	sbiw	r24, 0x00	; 0
 59a:	b1 f3       	breq	.-20     	; 0x588 <USART_Transmit_8_hex+0x54>
 59c:	86 ec       	ldi	r24, 0xC6	; 198
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	20 e3       	ldi	r18, 0x30	; 48
 5a2:	fc 01       	movw	r30, r24
 5a4:	20 83       	st	Z, r18
	USART_Transmit('x');
 5a6:	00 00       	nop
 5a8:	80 ec       	ldi	r24, 0xC0	; 192
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	fc 01       	movw	r30, r24
 5ae:	80 81       	ld	r24, Z
 5b0:	88 2f       	mov	r24, r24
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	80 72       	andi	r24, 0x20	; 32
 5b6:	99 27       	eor	r25, r25
 5b8:	00 97       	sbiw	r24, 0x00	; 0
 5ba:	b1 f3       	breq	.-20     	; 0x5a8 <USART_Transmit_8_hex+0x74>
 5bc:	86 ec       	ldi	r24, 0xC6	; 198
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	28 e7       	ldi	r18, 0x78	; 120
 5c2:	fc 01       	movw	r30, r24
 5c4:	20 83       	st	Z, r18
	USART_Transmit(MSN);
 5c6:	00 00       	nop
 5c8:	80 ec       	ldi	r24, 0xC0	; 192
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	fc 01       	movw	r30, r24
 5ce:	80 81       	ld	r24, Z
 5d0:	88 2f       	mov	r24, r24
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	80 72       	andi	r24, 0x20	; 32
 5d6:	99 27       	eor	r25, r25
 5d8:	00 97       	sbiw	r24, 0x00	; 0
 5da:	b1 f3       	breq	.-20     	; 0x5c8 <USART_Transmit_8_hex+0x94>
 5dc:	86 ec       	ldi	r24, 0xC6	; 198
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	2a 81       	ldd	r18, Y+2	; 0x02
 5e2:	fc 01       	movw	r30, r24
 5e4:	20 83       	st	Z, r18
	USART_Transmit(LSN);
 5e6:	00 00       	nop
 5e8:	80 ec       	ldi	r24, 0xC0	; 192
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	fc 01       	movw	r30, r24
 5ee:	80 81       	ld	r24, Z
 5f0:	88 2f       	mov	r24, r24
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	80 72       	andi	r24, 0x20	; 32
 5f6:	99 27       	eor	r25, r25
 5f8:	00 97       	sbiw	r24, 0x00	; 0
 5fa:	b1 f3       	breq	.-20     	; 0x5e8 <USART_Transmit_8_hex+0xb4>
 5fc:	86 ec       	ldi	r24, 0xC6	; 198
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	29 81       	ldd	r18, Y+1	; 0x01
 602:	fc 01       	movw	r30, r24
 604:	20 83       	st	Z, r18
	USART_Transmit(0x0A);
 606:	00 00       	nop
 608:	80 ec       	ldi	r24, 0xC0	; 192
 60a:	90 e0       	ldi	r25, 0x00	; 0
 60c:	fc 01       	movw	r30, r24
 60e:	80 81       	ld	r24, Z
 610:	88 2f       	mov	r24, r24
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	80 72       	andi	r24, 0x20	; 32
 616:	99 27       	eor	r25, r25
 618:	00 97       	sbiw	r24, 0x00	; 0
 61a:	b1 f3       	breq	.-20     	; 0x608 <USART_Transmit_8_hex+0xd4>
 61c:	86 ec       	ldi	r24, 0xC6	; 198
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	2a e0       	ldi	r18, 0x0A	; 10
 622:	fc 01       	movw	r30, r24
 624:	20 83       	st	Z, r18
}
 626:	0f 90       	pop	r0
 628:	0f 90       	pop	r0
 62a:	0f 90       	pop	r0
 62c:	df 91       	pop	r29
 62e:	cf 91       	pop	r28
 630:	08 95       	ret

00000632 <USART_Transmit_8_dec>:

void USART_Transmit_8_dec(unsigned char byte){
 632:	1f 93       	push	r17
 634:	cf 93       	push	r28
 636:	df 93       	push	r29
 638:	00 d0       	rcall	.+0      	; 0x63a <USART_Transmit_8_dec+0x8>
 63a:	00 d0       	rcall	.+0      	; 0x63c <USART_Transmit_8_dec+0xa>
 63c:	1f 92       	push	r1
 63e:	cd b7       	in	r28, 0x3d	; 61
 640:	de b7       	in	r29, 0x3e	; 62
 642:	89 83       	std	Y+1, r24	; 0x01
	if(byte < 10){
 644:	89 81       	ldd	r24, Y+1	; 0x01
 646:	8a 30       	cpi	r24, 0x0A	; 10
 648:	10 f5       	brcc	.+68     	; 0x68e <USART_Transmit_8_dec+0x5c>
		USART_Transmit(byte + 48);
 64a:	00 00       	nop
 64c:	80 ec       	ldi	r24, 0xC0	; 192
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	fc 01       	movw	r30, r24
 652:	80 81       	ld	r24, Z
 654:	88 2f       	mov	r24, r24
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	80 72       	andi	r24, 0x20	; 32
 65a:	99 27       	eor	r25, r25
 65c:	00 97       	sbiw	r24, 0x00	; 0
 65e:	b1 f3       	breq	.-20     	; 0x64c <USART_Transmit_8_dec+0x1a>
 660:	86 ec       	ldi	r24, 0xC6	; 198
 662:	90 e0       	ldi	r25, 0x00	; 0
 664:	29 81       	ldd	r18, Y+1	; 0x01
 666:	20 5d       	subi	r18, 0xD0	; 208
 668:	fc 01       	movw	r30, r24
 66a:	20 83       	st	Z, r18
		USART_Transmit(0x0A);
 66c:	00 00       	nop
 66e:	80 ec       	ldi	r24, 0xC0	; 192
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	fc 01       	movw	r30, r24
 674:	80 81       	ld	r24, Z
 676:	88 2f       	mov	r24, r24
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	80 72       	andi	r24, 0x20	; 32
 67c:	99 27       	eor	r25, r25
 67e:	00 97       	sbiw	r24, 0x00	; 0
 680:	b1 f3       	breq	.-20     	; 0x66e <USART_Transmit_8_dec+0x3c>
 682:	86 ec       	ldi	r24, 0xC6	; 198
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	2a e0       	ldi	r18, 0x0A	; 10
 688:	fc 01       	movw	r30, r24
 68a:	20 83       	st	Z, r18
 68c:	cd c0       	rjmp	.+410    	; 0x828 <USART_Transmit_8_dec+0x1f6>
	}
	else if(byte < 100){
 68e:	89 81       	ldd	r24, Y+1	; 0x01
 690:	84 36       	cpi	r24, 0x64	; 100
 692:	08 f0       	brcs	.+2      	; 0x696 <USART_Transmit_8_dec+0x64>
 694:	49 c0       	rjmp	.+146    	; 0x728 <USART_Transmit_8_dec+0xf6>
		USART_Transmit((byte / 10) + 48);
 696:	00 00       	nop
 698:	80 ec       	ldi	r24, 0xC0	; 192
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	fc 01       	movw	r30, r24
 69e:	80 81       	ld	r24, Z
 6a0:	88 2f       	mov	r24, r24
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	80 72       	andi	r24, 0x20	; 32
 6a6:	99 27       	eor	r25, r25
 6a8:	00 97       	sbiw	r24, 0x00	; 0
 6aa:	b1 f3       	breq	.-20     	; 0x698 <USART_Transmit_8_dec+0x66>
 6ac:	86 ec       	ldi	r24, 0xC6	; 198
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	39 81       	ldd	r19, Y+1	; 0x01
 6b2:	2d ec       	ldi	r18, 0xCD	; 205
 6b4:	32 9f       	mul	r19, r18
 6b6:	21 2d       	mov	r18, r1
 6b8:	11 24       	eor	r1, r1
 6ba:	26 95       	lsr	r18
 6bc:	26 95       	lsr	r18
 6be:	26 95       	lsr	r18
 6c0:	20 5d       	subi	r18, 0xD0	; 208
 6c2:	fc 01       	movw	r30, r24
 6c4:	20 83       	st	Z, r18
		USART_Transmit((byte % 10) + 48);
 6c6:	00 00       	nop
 6c8:	80 ec       	ldi	r24, 0xC0	; 192
 6ca:	90 e0       	ldi	r25, 0x00	; 0
 6cc:	fc 01       	movw	r30, r24
 6ce:	80 81       	ld	r24, Z
 6d0:	88 2f       	mov	r24, r24
 6d2:	90 e0       	ldi	r25, 0x00	; 0
 6d4:	80 72       	andi	r24, 0x20	; 32
 6d6:	99 27       	eor	r25, r25
 6d8:	00 97       	sbiw	r24, 0x00	; 0
 6da:	b1 f3       	breq	.-20     	; 0x6c8 <USART_Transmit_8_dec+0x96>
 6dc:	26 ec       	ldi	r18, 0xC6	; 198
 6de:	30 e0       	ldi	r19, 0x00	; 0
 6e0:	99 81       	ldd	r25, Y+1	; 0x01
 6e2:	8d ec       	ldi	r24, 0xCD	; 205
 6e4:	98 9f       	mul	r25, r24
 6e6:	81 2d       	mov	r24, r1
 6e8:	11 24       	eor	r1, r1
 6ea:	86 95       	lsr	r24
 6ec:	86 95       	lsr	r24
 6ee:	86 95       	lsr	r24
 6f0:	88 0f       	add	r24, r24
 6f2:	48 2f       	mov	r20, r24
 6f4:	44 0f       	add	r20, r20
 6f6:	44 0f       	add	r20, r20
 6f8:	84 0f       	add	r24, r20
 6fa:	f9 2f       	mov	r31, r25
 6fc:	f8 1b       	sub	r31, r24
 6fe:	8f 2f       	mov	r24, r31
 700:	80 5d       	subi	r24, 0xD0	; 208
 702:	f9 01       	movw	r30, r18
 704:	80 83       	st	Z, r24
		USART_Transmit(0x0A);
 706:	00 00       	nop
 708:	80 ec       	ldi	r24, 0xC0	; 192
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	fc 01       	movw	r30, r24
 70e:	80 81       	ld	r24, Z
 710:	88 2f       	mov	r24, r24
 712:	90 e0       	ldi	r25, 0x00	; 0
 714:	80 72       	andi	r24, 0x20	; 32
 716:	99 27       	eor	r25, r25
 718:	00 97       	sbiw	r24, 0x00	; 0
 71a:	b1 f3       	breq	.-20     	; 0x708 <USART_Transmit_8_dec+0xd6>
 71c:	86 ec       	ldi	r24, 0xC6	; 198
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	2a e0       	ldi	r18, 0x0A	; 10
 722:	fc 01       	movw	r30, r24
 724:	20 83       	st	Z, r18
 726:	80 c0       	rjmp	.+256    	; 0x828 <USART_Transmit_8_dec+0x1f6>
	}
	else if(byte >= 100){
 728:	89 81       	ldd	r24, Y+1	; 0x01
 72a:	84 36       	cpi	r24, 0x64	; 100
 72c:	08 f4       	brcc	.+2      	; 0x730 <USART_Transmit_8_dec+0xfe>
 72e:	7c c0       	rjmp	.+248    	; 0x828 <USART_Transmit_8_dec+0x1f6>
		USART_Transmit((byte / 100) + 48);
 730:	00 00       	nop
 732:	80 ec       	ldi	r24, 0xC0	; 192
 734:	90 e0       	ldi	r25, 0x00	; 0
 736:	fc 01       	movw	r30, r24
 738:	80 81       	ld	r24, Z
 73a:	88 2f       	mov	r24, r24
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	80 72       	andi	r24, 0x20	; 32
 740:	99 27       	eor	r25, r25
 742:	00 97       	sbiw	r24, 0x00	; 0
 744:	b1 f3       	breq	.-20     	; 0x732 <USART_Transmit_8_dec+0x100>
 746:	86 ec       	ldi	r24, 0xC6	; 198
 748:	90 e0       	ldi	r25, 0x00	; 0
 74a:	39 81       	ldd	r19, Y+1	; 0x01
 74c:	29 e2       	ldi	r18, 0x29	; 41
 74e:	32 9f       	mul	r19, r18
 750:	21 2d       	mov	r18, r1
 752:	11 24       	eor	r1, r1
 754:	22 95       	swap	r18
 756:	2f 70       	andi	r18, 0x0F	; 15
 758:	20 5d       	subi	r18, 0xD0	; 208
 75a:	fc 01       	movw	r30, r24
 75c:	20 83       	st	Z, r18
		USART_Transmit(((byte - (byte/100)*100) / 10) + 48);
 75e:	00 00       	nop
 760:	80 ec       	ldi	r24, 0xC0	; 192
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	fc 01       	movw	r30, r24
 766:	80 81       	ld	r24, Z
 768:	88 2f       	mov	r24, r24
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	80 72       	andi	r24, 0x20	; 32
 76e:	99 27       	eor	r25, r25
 770:	00 97       	sbiw	r24, 0x00	; 0
 772:	b1 f3       	breq	.-20     	; 0x760 <USART_Transmit_8_dec+0x12e>
 774:	26 ec       	ldi	r18, 0xC6	; 198
 776:	30 e0       	ldi	r19, 0x00	; 0
 778:	89 81       	ldd	r24, Y+1	; 0x01
 77a:	48 2f       	mov	r20, r24
 77c:	50 e0       	ldi	r21, 0x00	; 0
 77e:	99 81       	ldd	r25, Y+1	; 0x01
 780:	89 e2       	ldi	r24, 0x29	; 41
 782:	98 9f       	mul	r25, r24
 784:	81 2d       	mov	r24, r1
 786:	11 24       	eor	r1, r1
 788:	82 95       	swap	r24
 78a:	8f 70       	andi	r24, 0x0F	; 15
 78c:	68 2f       	mov	r22, r24
 78e:	70 e0       	ldi	r23, 0x00	; 0
 790:	ec e9       	ldi	r30, 0x9C	; 156
 792:	1e 2f       	mov	r17, r30
 794:	16 03       	mulsu	r17, r22
 796:	c0 01       	movw	r24, r0
 798:	17 9f       	mul	r17, r23
 79a:	90 0d       	add	r25, r0
 79c:	11 24       	eor	r1, r1
 79e:	84 0f       	add	r24, r20
 7a0:	95 1f       	adc	r25, r21
 7a2:	4a e0       	ldi	r20, 0x0A	; 10
 7a4:	50 e0       	ldi	r21, 0x00	; 0
 7a6:	ba 01       	movw	r22, r20
 7a8:	0e 94 6b 07 	call	0xed6	; 0xed6 <__divmodhi4>
 7ac:	cb 01       	movw	r24, r22
 7ae:	80 5d       	subi	r24, 0xD0	; 208
 7b0:	f9 01       	movw	r30, r18
 7b2:	80 83       	st	Z, r24
		USART_Transmit(((byte - (byte/100)*100) % 10) + 48);
 7b4:	00 00       	nop
 7b6:	80 ec       	ldi	r24, 0xC0	; 192
 7b8:	90 e0       	ldi	r25, 0x00	; 0
 7ba:	fc 01       	movw	r30, r24
 7bc:	80 81       	ld	r24, Z
 7be:	88 2f       	mov	r24, r24
 7c0:	90 e0       	ldi	r25, 0x00	; 0
 7c2:	80 72       	andi	r24, 0x20	; 32
 7c4:	99 27       	eor	r25, r25
 7c6:	00 97       	sbiw	r24, 0x00	; 0
 7c8:	b1 f3       	breq	.-20     	; 0x7b6 <USART_Transmit_8_dec+0x184>
 7ca:	26 ec       	ldi	r18, 0xC6	; 198
 7cc:	30 e0       	ldi	r19, 0x00	; 0
 7ce:	89 81       	ldd	r24, Y+1	; 0x01
 7d0:	48 2f       	mov	r20, r24
 7d2:	50 e0       	ldi	r21, 0x00	; 0
 7d4:	99 81       	ldd	r25, Y+1	; 0x01
 7d6:	89 e2       	ldi	r24, 0x29	; 41
 7d8:	98 9f       	mul	r25, r24
 7da:	81 2d       	mov	r24, r1
 7dc:	11 24       	eor	r1, r1
 7de:	82 95       	swap	r24
 7e0:	8f 70       	andi	r24, 0x0F	; 15
 7e2:	68 2f       	mov	r22, r24
 7e4:	70 e0       	ldi	r23, 0x00	; 0
 7e6:	ec e9       	ldi	r30, 0x9C	; 156
 7e8:	1e 2f       	mov	r17, r30
 7ea:	16 03       	mulsu	r17, r22
 7ec:	c0 01       	movw	r24, r0
 7ee:	17 9f       	mul	r17, r23
 7f0:	90 0d       	add	r25, r0
 7f2:	11 24       	eor	r1, r1
 7f4:	84 0f       	add	r24, r20
 7f6:	95 1f       	adc	r25, r21
 7f8:	4a e0       	ldi	r20, 0x0A	; 10
 7fa:	50 e0       	ldi	r21, 0x00	; 0
 7fc:	ba 01       	movw	r22, r20
 7fe:	0e 94 6b 07 	call	0xed6	; 0xed6 <__divmodhi4>
 802:	80 5d       	subi	r24, 0xD0	; 208
 804:	f9 01       	movw	r30, r18
 806:	80 83       	st	Z, r24
		USART_Transmit(0x0A);
 808:	00 00       	nop
 80a:	80 ec       	ldi	r24, 0xC0	; 192
 80c:	90 e0       	ldi	r25, 0x00	; 0
 80e:	fc 01       	movw	r30, r24
 810:	80 81       	ld	r24, Z
 812:	88 2f       	mov	r24, r24
 814:	90 e0       	ldi	r25, 0x00	; 0
 816:	80 72       	andi	r24, 0x20	; 32
 818:	99 27       	eor	r25, r25
 81a:	00 97       	sbiw	r24, 0x00	; 0
 81c:	b1 f3       	breq	.-20     	; 0x80a <USART_Transmit_8_dec+0x1d8>
 81e:	86 ec       	ldi	r24, 0xC6	; 198
 820:	90 e0       	ldi	r25, 0x00	; 0
 822:	2a e0       	ldi	r18, 0x0A	; 10
 824:	fc 01       	movw	r30, r24
 826:	20 83       	st	Z, r18
	}
}
 828:	0f 90       	pop	r0
 82a:	0f 90       	pop	r0
 82c:	0f 90       	pop	r0
 82e:	0f 90       	pop	r0
 830:	0f 90       	pop	r0
 832:	df 91       	pop	r29
 834:	cf 91       	pop	r28
 836:	1f 91       	pop	r17
 838:	08 95       	ret

0000083a <USART_Transmit_16_dec>:

void USART_Transmit_16_dec(unsigned int word){
 83a:	0f 93       	push	r16
 83c:	1f 93       	push	r17
 83e:	cf 93       	push	r28
 840:	df 93       	push	r29
 842:	00 d0       	rcall	.+0      	; 0x844 <USART_Transmit_16_dec+0xa>
 844:	cd b7       	in	r28, 0x3d	; 61
 846:	de b7       	in	r29, 0x3e	; 62
 848:	9a 83       	std	Y+2, r25	; 0x02
 84a:	89 83       	std	Y+1, r24	; 0x01
	if(word < 10){
 84c:	89 81       	ldd	r24, Y+1	; 0x01
 84e:	9a 81       	ldd	r25, Y+2	; 0x02
 850:	8a 30       	cpi	r24, 0x0A	; 10
 852:	91 05       	cpc	r25, r1
 854:	10 f5       	brcc	.+68     	; 0x89a <USART_Transmit_16_dec+0x60>
		USART_Transmit(word + 48);
 856:	00 00       	nop
 858:	80 ec       	ldi	r24, 0xC0	; 192
 85a:	90 e0       	ldi	r25, 0x00	; 0
 85c:	fc 01       	movw	r30, r24
 85e:	80 81       	ld	r24, Z
 860:	88 2f       	mov	r24, r24
 862:	90 e0       	ldi	r25, 0x00	; 0
 864:	80 72       	andi	r24, 0x20	; 32
 866:	99 27       	eor	r25, r25
 868:	00 97       	sbiw	r24, 0x00	; 0
 86a:	b1 f3       	breq	.-20     	; 0x858 <USART_Transmit_16_dec+0x1e>
 86c:	86 ec       	ldi	r24, 0xC6	; 198
 86e:	90 e0       	ldi	r25, 0x00	; 0
 870:	29 81       	ldd	r18, Y+1	; 0x01
 872:	20 5d       	subi	r18, 0xD0	; 208
 874:	fc 01       	movw	r30, r24
 876:	20 83       	st	Z, r18
		USART_Transmit(0x0A);
 878:	00 00       	nop
 87a:	80 ec       	ldi	r24, 0xC0	; 192
 87c:	90 e0       	ldi	r25, 0x00	; 0
 87e:	fc 01       	movw	r30, r24
 880:	80 81       	ld	r24, Z
 882:	88 2f       	mov	r24, r24
 884:	90 e0       	ldi	r25, 0x00	; 0
 886:	80 72       	andi	r24, 0x20	; 32
 888:	99 27       	eor	r25, r25
 88a:	00 97       	sbiw	r24, 0x00	; 0
 88c:	b1 f3       	breq	.-20     	; 0x87a <USART_Transmit_16_dec+0x40>
 88e:	86 ec       	ldi	r24, 0xC6	; 198
 890:	90 e0       	ldi	r25, 0x00	; 0
 892:	2a e0       	ldi	r18, 0x0A	; 10
 894:	fc 01       	movw	r30, r24
 896:	20 83       	st	Z, r18
 898:	5b c2       	rjmp	.+1206   	; 0xd50 <__stack+0x451>
	}
	else if(word < 100){
 89a:	89 81       	ldd	r24, Y+1	; 0x01
 89c:	9a 81       	ldd	r25, Y+2	; 0x02
 89e:	84 36       	cpi	r24, 0x64	; 100
 8a0:	91 05       	cpc	r25, r1
 8a2:	08 f0       	brcs	.+2      	; 0x8a6 <USART_Transmit_16_dec+0x6c>
 8a4:	57 c0       	rjmp	.+174    	; 0x954 <__stack+0x55>
		USART_Transmit((word / 10) + 48);
 8a6:	00 00       	nop
 8a8:	80 ec       	ldi	r24, 0xC0	; 192
 8aa:	90 e0       	ldi	r25, 0x00	; 0
 8ac:	fc 01       	movw	r30, r24
 8ae:	80 81       	ld	r24, Z
 8b0:	88 2f       	mov	r24, r24
 8b2:	90 e0       	ldi	r25, 0x00	; 0
 8b4:	80 72       	andi	r24, 0x20	; 32
 8b6:	99 27       	eor	r25, r25
 8b8:	00 97       	sbiw	r24, 0x00	; 0
 8ba:	b1 f3       	breq	.-20     	; 0x8a8 <USART_Transmit_16_dec+0x6e>
 8bc:	46 ec       	ldi	r20, 0xC6	; 198
 8be:	50 e0       	ldi	r21, 0x00	; 0
 8c0:	89 81       	ldd	r24, Y+1	; 0x01
 8c2:	9a 81       	ldd	r25, Y+2	; 0x02
 8c4:	9c 01       	movw	r18, r24
 8c6:	ad ec       	ldi	r26, 0xCD	; 205
 8c8:	bc ec       	ldi	r27, 0xCC	; 204
 8ca:	0e 94 9e 07 	call	0xf3c	; 0xf3c <__umulhisi3>
 8ce:	96 95       	lsr	r25
 8d0:	87 95       	ror	r24
 8d2:	96 95       	lsr	r25
 8d4:	87 95       	ror	r24
 8d6:	96 95       	lsr	r25
 8d8:	87 95       	ror	r24
 8da:	80 5d       	subi	r24, 0xD0	; 208
 8dc:	fa 01       	movw	r30, r20
 8de:	80 83       	st	Z, r24
		USART_Transmit((word % 10) + 48);
 8e0:	00 00       	nop
 8e2:	80 ec       	ldi	r24, 0xC0	; 192
 8e4:	90 e0       	ldi	r25, 0x00	; 0
 8e6:	fc 01       	movw	r30, r24
 8e8:	80 81       	ld	r24, Z
 8ea:	88 2f       	mov	r24, r24
 8ec:	90 e0       	ldi	r25, 0x00	; 0
 8ee:	80 72       	andi	r24, 0x20	; 32
 8f0:	99 27       	eor	r25, r25
 8f2:	00 97       	sbiw	r24, 0x00	; 0
 8f4:	b1 f3       	breq	.-20     	; 0x8e2 <USART_Transmit_16_dec+0xa8>
 8f6:	e6 ec       	ldi	r30, 0xC6	; 198
 8f8:	f0 e0       	ldi	r31, 0x00	; 0
 8fa:	49 81       	ldd	r20, Y+1	; 0x01
 8fc:	5a 81       	ldd	r21, Y+2	; 0x02
 8fe:	9a 01       	movw	r18, r20
 900:	ad ec       	ldi	r26, 0xCD	; 205
 902:	bc ec       	ldi	r27, 0xCC	; 204
 904:	0e 94 9e 07 	call	0xf3c	; 0xf3c <__umulhisi3>
 908:	96 95       	lsr	r25
 90a:	87 95       	ror	r24
 90c:	96 95       	lsr	r25
 90e:	87 95       	ror	r24
 910:	96 95       	lsr	r25
 912:	87 95       	ror	r24
 914:	88 0f       	add	r24, r24
 916:	99 1f       	adc	r25, r25
 918:	9c 01       	movw	r18, r24
 91a:	22 0f       	add	r18, r18
 91c:	33 1f       	adc	r19, r19
 91e:	22 0f       	add	r18, r18
 920:	33 1f       	adc	r19, r19
 922:	82 0f       	add	r24, r18
 924:	93 1f       	adc	r25, r19
 926:	9a 01       	movw	r18, r20
 928:	28 1b       	sub	r18, r24
 92a:	39 0b       	sbc	r19, r25
 92c:	c9 01       	movw	r24, r18
 92e:	80 5d       	subi	r24, 0xD0	; 208
 930:	80 83       	st	Z, r24
		USART_Transmit(0x0A);
 932:	00 00       	nop
 934:	80 ec       	ldi	r24, 0xC0	; 192
 936:	90 e0       	ldi	r25, 0x00	; 0
 938:	fc 01       	movw	r30, r24
 93a:	80 81       	ld	r24, Z
 93c:	88 2f       	mov	r24, r24
 93e:	90 e0       	ldi	r25, 0x00	; 0
 940:	80 72       	andi	r24, 0x20	; 32
 942:	99 27       	eor	r25, r25
 944:	00 97       	sbiw	r24, 0x00	; 0
 946:	b1 f3       	breq	.-20     	; 0x934 <__stack+0x35>
 948:	86 ec       	ldi	r24, 0xC6	; 198
 94a:	90 e0       	ldi	r25, 0x00	; 0
 94c:	2a e0       	ldi	r18, 0x0A	; 10
 94e:	fc 01       	movw	r30, r24
 950:	20 83       	st	Z, r18
 952:	fe c1       	rjmp	.+1020   	; 0xd50 <__stack+0x451>
	}
	else if(word < 1000){
 954:	89 81       	ldd	r24, Y+1	; 0x01
 956:	9a 81       	ldd	r25, Y+2	; 0x02
 958:	88 3e       	cpi	r24, 0xE8	; 232
 95a:	f3 e0       	ldi	r31, 0x03	; 3
 95c:	9f 07       	cpc	r25, r31
 95e:	08 f0       	brcs	.+2      	; 0x962 <__stack+0x63>
 960:	9f c0       	rjmp	.+318    	; 0xaa0 <__stack+0x1a1>
		USART_Transmit((word / 100) + 48);
 962:	00 00       	nop
 964:	80 ec       	ldi	r24, 0xC0	; 192
 966:	90 e0       	ldi	r25, 0x00	; 0
 968:	fc 01       	movw	r30, r24
 96a:	80 81       	ld	r24, Z
 96c:	88 2f       	mov	r24, r24
 96e:	90 e0       	ldi	r25, 0x00	; 0
 970:	80 72       	andi	r24, 0x20	; 32
 972:	99 27       	eor	r25, r25
 974:	00 97       	sbiw	r24, 0x00	; 0
 976:	b1 f3       	breq	.-20     	; 0x964 <__stack+0x65>
 978:	46 ec       	ldi	r20, 0xC6	; 198
 97a:	50 e0       	ldi	r21, 0x00	; 0
 97c:	89 81       	ldd	r24, Y+1	; 0x01
 97e:	9a 81       	ldd	r25, Y+2	; 0x02
 980:	96 95       	lsr	r25
 982:	87 95       	ror	r24
 984:	96 95       	lsr	r25
 986:	87 95       	ror	r24
 988:	9c 01       	movw	r18, r24
 98a:	ab e7       	ldi	r26, 0x7B	; 123
 98c:	b4 e1       	ldi	r27, 0x14	; 20
 98e:	0e 94 9e 07 	call	0xf3c	; 0xf3c <__umulhisi3>
 992:	96 95       	lsr	r25
 994:	87 95       	ror	r24
 996:	80 5d       	subi	r24, 0xD0	; 208
 998:	fa 01       	movw	r30, r20
 99a:	80 83       	st	Z, r24
		USART_Transmit(((word - (word/100)*100) / 10) + 48);
 99c:	00 00       	nop
 99e:	80 ec       	ldi	r24, 0xC0	; 192
 9a0:	90 e0       	ldi	r25, 0x00	; 0
 9a2:	fc 01       	movw	r30, r24
 9a4:	80 81       	ld	r24, Z
 9a6:	88 2f       	mov	r24, r24
 9a8:	90 e0       	ldi	r25, 0x00	; 0
 9aa:	80 72       	andi	r24, 0x20	; 32
 9ac:	99 27       	eor	r25, r25
 9ae:	00 97       	sbiw	r24, 0x00	; 0
 9b0:	b1 f3       	breq	.-20     	; 0x99e <__stack+0x9f>
 9b2:	e6 ec       	ldi	r30, 0xC6	; 198
 9b4:	f0 e0       	ldi	r31, 0x00	; 0
 9b6:	49 81       	ldd	r20, Y+1	; 0x01
 9b8:	5a 81       	ldd	r21, Y+2	; 0x02
 9ba:	ca 01       	movw	r24, r20
 9bc:	96 95       	lsr	r25
 9be:	87 95       	ror	r24
 9c0:	96 95       	lsr	r25
 9c2:	87 95       	ror	r24
 9c4:	9c 01       	movw	r18, r24
 9c6:	ab e7       	ldi	r26, 0x7B	; 123
 9c8:	b4 e1       	ldi	r27, 0x14	; 20
 9ca:	0e 94 9e 07 	call	0xf3c	; 0xf3c <__umulhisi3>
 9ce:	96 95       	lsr	r25
 9d0:	87 95       	ror	r24
 9d2:	64 e6       	ldi	r22, 0x64	; 100
 9d4:	68 9f       	mul	r22, r24
 9d6:	90 01       	movw	r18, r0
 9d8:	69 9f       	mul	r22, r25
 9da:	30 0d       	add	r19, r0
 9dc:	11 24       	eor	r1, r1
 9de:	ca 01       	movw	r24, r20
 9e0:	82 1b       	sub	r24, r18
 9e2:	93 0b       	sbc	r25, r19
 9e4:	9c 01       	movw	r18, r24
 9e6:	ad ec       	ldi	r26, 0xCD	; 205
 9e8:	bc ec       	ldi	r27, 0xCC	; 204
 9ea:	0e 94 9e 07 	call	0xf3c	; 0xf3c <__umulhisi3>
 9ee:	96 95       	lsr	r25
 9f0:	87 95       	ror	r24
 9f2:	96 95       	lsr	r25
 9f4:	87 95       	ror	r24
 9f6:	96 95       	lsr	r25
 9f8:	87 95       	ror	r24
 9fa:	80 5d       	subi	r24, 0xD0	; 208
 9fc:	80 83       	st	Z, r24
		USART_Transmit(((word - (word/100)*100) % 10) + 48);
 9fe:	00 00       	nop
 a00:	80 ec       	ldi	r24, 0xC0	; 192
 a02:	90 e0       	ldi	r25, 0x00	; 0
 a04:	fc 01       	movw	r30, r24
 a06:	80 81       	ld	r24, Z
 a08:	88 2f       	mov	r24, r24
 a0a:	90 e0       	ldi	r25, 0x00	; 0
 a0c:	80 72       	andi	r24, 0x20	; 32
 a0e:	99 27       	eor	r25, r25
 a10:	00 97       	sbiw	r24, 0x00	; 0
 a12:	b1 f3       	breq	.-20     	; 0xa00 <__stack+0x101>
 a14:	06 ec       	ldi	r16, 0xC6	; 198
 a16:	10 e0       	ldi	r17, 0x00	; 0
 a18:	e9 81       	ldd	r30, Y+1	; 0x01
 a1a:	fa 81       	ldd	r31, Y+2	; 0x02
 a1c:	cf 01       	movw	r24, r30
 a1e:	96 95       	lsr	r25
 a20:	87 95       	ror	r24
 a22:	96 95       	lsr	r25
 a24:	87 95       	ror	r24
 a26:	9c 01       	movw	r18, r24
 a28:	ab e7       	ldi	r26, 0x7B	; 123
 a2a:	b4 e1       	ldi	r27, 0x14	; 20
 a2c:	0e 94 9e 07 	call	0xf3c	; 0xf3c <__umulhisi3>
 a30:	ac 01       	movw	r20, r24
 a32:	56 95       	lsr	r21
 a34:	47 95       	ror	r20
 a36:	24 e6       	ldi	r18, 0x64	; 100
 a38:	24 9f       	mul	r18, r20
 a3a:	c0 01       	movw	r24, r0
 a3c:	25 9f       	mul	r18, r21
 a3e:	90 0d       	add	r25, r0
 a40:	11 24       	eor	r1, r1
 a42:	af 01       	movw	r20, r30
 a44:	48 1b       	sub	r20, r24
 a46:	59 0b       	sbc	r21, r25
 a48:	9a 01       	movw	r18, r20
 a4a:	ad ec       	ldi	r26, 0xCD	; 205
 a4c:	bc ec       	ldi	r27, 0xCC	; 204
 a4e:	0e 94 9e 07 	call	0xf3c	; 0xf3c <__umulhisi3>
 a52:	96 95       	lsr	r25
 a54:	87 95       	ror	r24
 a56:	96 95       	lsr	r25
 a58:	87 95       	ror	r24
 a5a:	96 95       	lsr	r25
 a5c:	87 95       	ror	r24
 a5e:	88 0f       	add	r24, r24
 a60:	99 1f       	adc	r25, r25
 a62:	9c 01       	movw	r18, r24
 a64:	22 0f       	add	r18, r18
 a66:	33 1f       	adc	r19, r19
 a68:	22 0f       	add	r18, r18
 a6a:	33 1f       	adc	r19, r19
 a6c:	82 0f       	add	r24, r18
 a6e:	93 1f       	adc	r25, r19
 a70:	9a 01       	movw	r18, r20
 a72:	28 1b       	sub	r18, r24
 a74:	39 0b       	sbc	r19, r25
 a76:	c9 01       	movw	r24, r18
 a78:	80 5d       	subi	r24, 0xD0	; 208
 a7a:	f8 01       	movw	r30, r16
 a7c:	80 83       	st	Z, r24
		USART_Transmit(0x0A);
 a7e:	00 00       	nop
 a80:	80 ec       	ldi	r24, 0xC0	; 192
 a82:	90 e0       	ldi	r25, 0x00	; 0
 a84:	fc 01       	movw	r30, r24
 a86:	80 81       	ld	r24, Z
 a88:	88 2f       	mov	r24, r24
 a8a:	90 e0       	ldi	r25, 0x00	; 0
 a8c:	80 72       	andi	r24, 0x20	; 32
 a8e:	99 27       	eor	r25, r25
 a90:	00 97       	sbiw	r24, 0x00	; 0
 a92:	b1 f3       	breq	.-20     	; 0xa80 <__stack+0x181>
 a94:	86 ec       	ldi	r24, 0xC6	; 198
 a96:	90 e0       	ldi	r25, 0x00	; 0
 a98:	2a e0       	ldi	r18, 0x0A	; 10
 a9a:	fc 01       	movw	r30, r24
 a9c:	20 83       	st	Z, r18
 a9e:	58 c1       	rjmp	.+688    	; 0xd50 <__stack+0x451>
	}
	else if(word < 10000){
 aa0:	89 81       	ldd	r24, Y+1	; 0x01
 aa2:	9a 81       	ldd	r25, Y+2	; 0x02
 aa4:	80 31       	cpi	r24, 0x10	; 16
 aa6:	f7 e2       	ldi	r31, 0x27	; 39
 aa8:	9f 07       	cpc	r25, r31
 aaa:	08 f0       	brcs	.+2      	; 0xaae <__stack+0x1af>
 aac:	51 c1       	rjmp	.+674    	; 0xd50 <__stack+0x451>
		USART_Transmit((word / 1000) + 48);
 aae:	00 00       	nop
 ab0:	80 ec       	ldi	r24, 0xC0	; 192
 ab2:	90 e0       	ldi	r25, 0x00	; 0
 ab4:	fc 01       	movw	r30, r24
 ab6:	80 81       	ld	r24, Z
 ab8:	88 2f       	mov	r24, r24
 aba:	90 e0       	ldi	r25, 0x00	; 0
 abc:	80 72       	andi	r24, 0x20	; 32
 abe:	99 27       	eor	r25, r25
 ac0:	00 97       	sbiw	r24, 0x00	; 0
 ac2:	b1 f3       	breq	.-20     	; 0xab0 <__stack+0x1b1>
 ac4:	46 ec       	ldi	r20, 0xC6	; 198
 ac6:	50 e0       	ldi	r21, 0x00	; 0
 ac8:	89 81       	ldd	r24, Y+1	; 0x01
 aca:	9a 81       	ldd	r25, Y+2	; 0x02
 acc:	96 95       	lsr	r25
 ace:	87 95       	ror	r24
 ad0:	96 95       	lsr	r25
 ad2:	87 95       	ror	r24
 ad4:	96 95       	lsr	r25
 ad6:	87 95       	ror	r24
 ad8:	9c 01       	movw	r18, r24
 ada:	a5 ec       	ldi	r26, 0xC5	; 197
 adc:	b0 e2       	ldi	r27, 0x20	; 32
 ade:	0e 94 9e 07 	call	0xf3c	; 0xf3c <__umulhisi3>
 ae2:	92 95       	swap	r25
 ae4:	82 95       	swap	r24
 ae6:	8f 70       	andi	r24, 0x0F	; 15
 ae8:	89 27       	eor	r24, r25
 aea:	9f 70       	andi	r25, 0x0F	; 15
 aec:	89 27       	eor	r24, r25
 aee:	80 5d       	subi	r24, 0xD0	; 208
 af0:	fa 01       	movw	r30, r20
 af2:	80 83       	st	Z, r24
		USART_Transmit(((word - (word/1000)*1000) / 100) + 48);
 af4:	00 00       	nop
 af6:	80 ec       	ldi	r24, 0xC0	; 192
 af8:	90 e0       	ldi	r25, 0x00	; 0
 afa:	fc 01       	movw	r30, r24
 afc:	80 81       	ld	r24, Z
 afe:	88 2f       	mov	r24, r24
 b00:	90 e0       	ldi	r25, 0x00	; 0
 b02:	80 72       	andi	r24, 0x20	; 32
 b04:	99 27       	eor	r25, r25
 b06:	00 97       	sbiw	r24, 0x00	; 0
 b08:	b1 f3       	breq	.-20     	; 0xaf6 <__stack+0x1f7>
 b0a:	e6 ec       	ldi	r30, 0xC6	; 198
 b0c:	f0 e0       	ldi	r31, 0x00	; 0
 b0e:	49 81       	ldd	r20, Y+1	; 0x01
 b10:	5a 81       	ldd	r21, Y+2	; 0x02
 b12:	ca 01       	movw	r24, r20
 b14:	96 95       	lsr	r25
 b16:	87 95       	ror	r24
 b18:	96 95       	lsr	r25
 b1a:	87 95       	ror	r24
 b1c:	96 95       	lsr	r25
 b1e:	87 95       	ror	r24
 b20:	9c 01       	movw	r18, r24
 b22:	a5 ec       	ldi	r26, 0xC5	; 197
 b24:	b0 e2       	ldi	r27, 0x20	; 32
 b26:	0e 94 9e 07 	call	0xf3c	; 0xf3c <__umulhisi3>
 b2a:	92 95       	swap	r25
 b2c:	82 95       	swap	r24
 b2e:	8f 70       	andi	r24, 0x0F	; 15
 b30:	89 27       	eor	r24, r25
 b32:	9f 70       	andi	r25, 0x0F	; 15
 b34:	89 27       	eor	r24, r25
 b36:	68 ee       	ldi	r22, 0xE8	; 232
 b38:	73 e0       	ldi	r23, 0x03	; 3
 b3a:	86 9f       	mul	r24, r22
 b3c:	90 01       	movw	r18, r0
 b3e:	87 9f       	mul	r24, r23
 b40:	30 0d       	add	r19, r0
 b42:	96 9f       	mul	r25, r22
 b44:	30 0d       	add	r19, r0
 b46:	11 24       	eor	r1, r1
 b48:	ca 01       	movw	r24, r20
 b4a:	82 1b       	sub	r24, r18
 b4c:	93 0b       	sbc	r25, r19
 b4e:	96 95       	lsr	r25
 b50:	87 95       	ror	r24
 b52:	96 95       	lsr	r25
 b54:	87 95       	ror	r24
 b56:	9c 01       	movw	r18, r24
 b58:	ab e7       	ldi	r26, 0x7B	; 123
 b5a:	b4 e1       	ldi	r27, 0x14	; 20
 b5c:	0e 94 9e 07 	call	0xf3c	; 0xf3c <__umulhisi3>
 b60:	96 95       	lsr	r25
 b62:	87 95       	ror	r24
 b64:	80 5d       	subi	r24, 0xD0	; 208
 b66:	80 83       	st	Z, r24
		USART_Transmit((((word - (word/1000)*1000) % 100) / 10) + 48);
 b68:	00 00       	nop
 b6a:	80 ec       	ldi	r24, 0xC0	; 192
 b6c:	90 e0       	ldi	r25, 0x00	; 0
 b6e:	fc 01       	movw	r30, r24
 b70:	80 81       	ld	r24, Z
 b72:	88 2f       	mov	r24, r24
 b74:	90 e0       	ldi	r25, 0x00	; 0
 b76:	80 72       	andi	r24, 0x20	; 32
 b78:	99 27       	eor	r25, r25
 b7a:	00 97       	sbiw	r24, 0x00	; 0
 b7c:	b1 f3       	breq	.-20     	; 0xb6a <__stack+0x26b>
 b7e:	06 ec       	ldi	r16, 0xC6	; 198
 b80:	10 e0       	ldi	r17, 0x00	; 0
 b82:	e9 81       	ldd	r30, Y+1	; 0x01
 b84:	fa 81       	ldd	r31, Y+2	; 0x02
 b86:	cf 01       	movw	r24, r30
 b88:	96 95       	lsr	r25
 b8a:	87 95       	ror	r24
 b8c:	96 95       	lsr	r25
 b8e:	87 95       	ror	r24
 b90:	96 95       	lsr	r25
 b92:	87 95       	ror	r24
 b94:	9c 01       	movw	r18, r24
 b96:	a5 ec       	ldi	r26, 0xC5	; 197
 b98:	b0 e2       	ldi	r27, 0x20	; 32
 b9a:	0e 94 9e 07 	call	0xf3c	; 0xf3c <__umulhisi3>
 b9e:	ac 01       	movw	r20, r24
 ba0:	52 95       	swap	r21
 ba2:	42 95       	swap	r20
 ba4:	4f 70       	andi	r20, 0x0F	; 15
 ba6:	45 27       	eor	r20, r21
 ba8:	5f 70       	andi	r21, 0x0F	; 15
 baa:	45 27       	eor	r20, r21
 bac:	28 ee       	ldi	r18, 0xE8	; 232
 bae:	33 e0       	ldi	r19, 0x03	; 3
 bb0:	42 9f       	mul	r20, r18
 bb2:	c0 01       	movw	r24, r0
 bb4:	43 9f       	mul	r20, r19
 bb6:	90 0d       	add	r25, r0
 bb8:	52 9f       	mul	r21, r18
 bba:	90 0d       	add	r25, r0
 bbc:	11 24       	eor	r1, r1
 bbe:	af 01       	movw	r20, r30
 bc0:	48 1b       	sub	r20, r24
 bc2:	59 0b       	sbc	r21, r25
 bc4:	ca 01       	movw	r24, r20
 bc6:	96 95       	lsr	r25
 bc8:	87 95       	ror	r24
 bca:	96 95       	lsr	r25
 bcc:	87 95       	ror	r24
 bce:	9c 01       	movw	r18, r24
 bd0:	ab e7       	ldi	r26, 0x7B	; 123
 bd2:	b4 e1       	ldi	r27, 0x14	; 20
 bd4:	0e 94 9e 07 	call	0xf3c	; 0xf3c <__umulhisi3>
 bd8:	96 95       	lsr	r25
 bda:	87 95       	ror	r24
 bdc:	64 e6       	ldi	r22, 0x64	; 100
 bde:	68 9f       	mul	r22, r24
 be0:	90 01       	movw	r18, r0
 be2:	69 9f       	mul	r22, r25
 be4:	30 0d       	add	r19, r0
 be6:	11 24       	eor	r1, r1
 be8:	ca 01       	movw	r24, r20
 bea:	82 1b       	sub	r24, r18
 bec:	93 0b       	sbc	r25, r19
 bee:	9c 01       	movw	r18, r24
 bf0:	ad ec       	ldi	r26, 0xCD	; 205
 bf2:	bc ec       	ldi	r27, 0xCC	; 204
 bf4:	0e 94 9e 07 	call	0xf3c	; 0xf3c <__umulhisi3>
 bf8:	96 95       	lsr	r25
 bfa:	87 95       	ror	r24
 bfc:	96 95       	lsr	r25
 bfe:	87 95       	ror	r24
 c00:	96 95       	lsr	r25
 c02:	87 95       	ror	r24
 c04:	80 5d       	subi	r24, 0xD0	; 208
 c06:	f8 01       	movw	r30, r16
 c08:	80 83       	st	Z, r24
		USART_Transmit((( (word - (word/1000)*1000) % 100) - (word - ((word/1000)*1000) % 100)/10)*10 +48);
 c0a:	00 00       	nop
 c0c:	80 ec       	ldi	r24, 0xC0	; 192
 c0e:	90 e0       	ldi	r25, 0x00	; 0
 c10:	fc 01       	movw	r30, r24
 c12:	80 81       	ld	r24, Z
 c14:	88 2f       	mov	r24, r24
 c16:	90 e0       	ldi	r25, 0x00	; 0
 c18:	80 72       	andi	r24, 0x20	; 32
 c1a:	99 27       	eor	r25, r25
 c1c:	00 97       	sbiw	r24, 0x00	; 0
 c1e:	b1 f3       	breq	.-20     	; 0xc0c <__stack+0x30d>
 c20:	06 ec       	ldi	r16, 0xC6	; 198
 c22:	10 e0       	ldi	r17, 0x00	; 0
 c24:	e9 81       	ldd	r30, Y+1	; 0x01
 c26:	fa 81       	ldd	r31, Y+2	; 0x02
 c28:	cf 01       	movw	r24, r30
 c2a:	96 95       	lsr	r25
 c2c:	87 95       	ror	r24
 c2e:	96 95       	lsr	r25
 c30:	87 95       	ror	r24
 c32:	96 95       	lsr	r25
 c34:	87 95       	ror	r24
 c36:	9c 01       	movw	r18, r24
 c38:	a5 ec       	ldi	r26, 0xC5	; 197
 c3a:	b0 e2       	ldi	r27, 0x20	; 32
 c3c:	0e 94 9e 07 	call	0xf3c	; 0xf3c <__umulhisi3>
 c40:	ac 01       	movw	r20, r24
 c42:	52 95       	swap	r21
 c44:	42 95       	swap	r20
 c46:	4f 70       	andi	r20, 0x0F	; 15
 c48:	45 27       	eor	r20, r21
 c4a:	5f 70       	andi	r21, 0x0F	; 15
 c4c:	45 27       	eor	r20, r21
 c4e:	28 ee       	ldi	r18, 0xE8	; 232
 c50:	33 e0       	ldi	r19, 0x03	; 3
 c52:	42 9f       	mul	r20, r18
 c54:	c0 01       	movw	r24, r0
 c56:	43 9f       	mul	r20, r19
 c58:	90 0d       	add	r25, r0
 c5a:	52 9f       	mul	r21, r18
 c5c:	90 0d       	add	r25, r0
 c5e:	11 24       	eor	r1, r1
 c60:	af 01       	movw	r20, r30
 c62:	48 1b       	sub	r20, r24
 c64:	59 0b       	sbc	r21, r25
 c66:	ca 01       	movw	r24, r20
 c68:	96 95       	lsr	r25
 c6a:	87 95       	ror	r24
 c6c:	96 95       	lsr	r25
 c6e:	87 95       	ror	r24
 c70:	9c 01       	movw	r18, r24
 c72:	ab e7       	ldi	r26, 0x7B	; 123
 c74:	b4 e1       	ldi	r27, 0x14	; 20
 c76:	0e 94 9e 07 	call	0xf3c	; 0xf3c <__umulhisi3>
 c7a:	fc 01       	movw	r30, r24
 c7c:	f6 95       	lsr	r31
 c7e:	e7 95       	ror	r30
 c80:	24 e6       	ldi	r18, 0x64	; 100
 c82:	2e 9f       	mul	r18, r30
 c84:	c0 01       	movw	r24, r0
 c86:	2f 9f       	mul	r18, r31
 c88:	90 0d       	add	r25, r0
 c8a:	11 24       	eor	r1, r1
 c8c:	fa 01       	movw	r30, r20
 c8e:	e8 1b       	sub	r30, r24
 c90:	f9 0b       	sbc	r31, r25
 c92:	89 81       	ldd	r24, Y+1	; 0x01
 c94:	9a 81       	ldd	r25, Y+2	; 0x02
 c96:	96 95       	lsr	r25
 c98:	87 95       	ror	r24
 c9a:	96 95       	lsr	r25
 c9c:	87 95       	ror	r24
 c9e:	96 95       	lsr	r25
 ca0:	87 95       	ror	r24
 ca2:	9c 01       	movw	r18, r24
 ca4:	a5 ec       	ldi	r26, 0xC5	; 197
 ca6:	b0 e2       	ldi	r27, 0x20	; 32
 ca8:	0e 94 9e 07 	call	0xf3c	; 0xf3c <__umulhisi3>
 cac:	9c 01       	movw	r18, r24
 cae:	32 95       	swap	r19
 cb0:	22 95       	swap	r18
 cb2:	2f 70       	andi	r18, 0x0F	; 15
 cb4:	23 27       	eor	r18, r19
 cb6:	3f 70       	andi	r19, 0x0F	; 15
 cb8:	23 27       	eor	r18, r19
 cba:	88 ee       	ldi	r24, 0xE8	; 232
 cbc:	93 e0       	ldi	r25, 0x03	; 3
 cbe:	28 9f       	mul	r18, r24
 cc0:	a0 01       	movw	r20, r0
 cc2:	29 9f       	mul	r18, r25
 cc4:	50 0d       	add	r21, r0
 cc6:	38 9f       	mul	r19, r24
 cc8:	50 0d       	add	r21, r0
 cca:	11 24       	eor	r1, r1
 ccc:	ca 01       	movw	r24, r20
 cce:	96 95       	lsr	r25
 cd0:	87 95       	ror	r24
 cd2:	96 95       	lsr	r25
 cd4:	87 95       	ror	r24
 cd6:	9c 01       	movw	r18, r24
 cd8:	ab e7       	ldi	r26, 0x7B	; 123
 cda:	b4 e1       	ldi	r27, 0x14	; 20
 cdc:	0e 94 9e 07 	call	0xf3c	; 0xf3c <__umulhisi3>
 ce0:	96 95       	lsr	r25
 ce2:	87 95       	ror	r24
 ce4:	64 e6       	ldi	r22, 0x64	; 100
 ce6:	68 9f       	mul	r22, r24
 ce8:	90 01       	movw	r18, r0
 cea:	69 9f       	mul	r22, r25
 cec:	30 0d       	add	r19, r0
 cee:	11 24       	eor	r1, r1
 cf0:	ca 01       	movw	r24, r20
 cf2:	82 1b       	sub	r24, r18
 cf4:	93 0b       	sbc	r25, r19
 cf6:	29 81       	ldd	r18, Y+1	; 0x01
 cf8:	3a 81       	ldd	r19, Y+2	; 0x02
 cfa:	a9 01       	movw	r20, r18
 cfc:	48 1b       	sub	r20, r24
 cfe:	59 0b       	sbc	r21, r25
 d00:	ca 01       	movw	r24, r20
 d02:	9c 01       	movw	r18, r24
 d04:	ad ec       	ldi	r26, 0xCD	; 205
 d06:	bc ec       	ldi	r27, 0xCC	; 204
 d08:	0e 94 9e 07 	call	0xf3c	; 0xf3c <__umulhisi3>
 d0c:	96 95       	lsr	r25
 d0e:	87 95       	ror	r24
 d10:	96 95       	lsr	r25
 d12:	87 95       	ror	r24
 d14:	96 95       	lsr	r25
 d16:	87 95       	ror	r24
 d18:	9f 01       	movw	r18, r30
 d1a:	28 1b       	sub	r18, r24
 d1c:	39 0b       	sbc	r19, r25
 d1e:	c9 01       	movw	r24, r18
 d20:	88 0f       	add	r24, r24
 d22:	98 2f       	mov	r25, r24
 d24:	99 0f       	add	r25, r25
 d26:	99 0f       	add	r25, r25
 d28:	89 0f       	add	r24, r25
 d2a:	80 5d       	subi	r24, 0xD0	; 208
 d2c:	f8 01       	movw	r30, r16
 d2e:	80 83       	st	Z, r24
		USART_Transmit(0x0A);
 d30:	00 00       	nop
 d32:	80 ec       	ldi	r24, 0xC0	; 192
 d34:	90 e0       	ldi	r25, 0x00	; 0
 d36:	fc 01       	movw	r30, r24
 d38:	80 81       	ld	r24, Z
 d3a:	88 2f       	mov	r24, r24
 d3c:	90 e0       	ldi	r25, 0x00	; 0
 d3e:	80 72       	andi	r24, 0x20	; 32
 d40:	99 27       	eor	r25, r25
 d42:	00 97       	sbiw	r24, 0x00	; 0
 d44:	b1 f3       	breq	.-20     	; 0xd32 <__stack+0x433>
 d46:	86 ec       	ldi	r24, 0xC6	; 198
 d48:	90 e0       	ldi	r25, 0x00	; 0
 d4a:	2a e0       	ldi	r18, 0x0A	; 10
 d4c:	fc 01       	movw	r30, r24
 d4e:	20 83       	st	Z, r18
	}
}
 d50:	0f 90       	pop	r0
 d52:	0f 90       	pop	r0
 d54:	df 91       	pop	r29
 d56:	cf 91       	pop	r28
 d58:	1f 91       	pop	r17
 d5a:	0f 91       	pop	r16
 d5c:	08 95       	ret

00000d5e <myPrint>:


void myPrint(unsigned char str[], unsigned char len){
 d5e:	cf 93       	push	r28
 d60:	df 93       	push	r29
 d62:	00 d0       	rcall	.+0      	; 0xd64 <myPrint+0x6>
 d64:	00 d0       	rcall	.+0      	; 0xd66 <myPrint+0x8>
 d66:	cd b7       	in	r28, 0x3d	; 61
 d68:	de b7       	in	r29, 0x3e	; 62
 d6a:	9b 83       	std	Y+3, r25	; 0x03
 d6c:	8a 83       	std	Y+2, r24	; 0x02
 d6e:	6c 83       	std	Y+4, r22	; 0x04
	for(unsigned char i = 0; i < len; i++){
 d70:	19 82       	std	Y+1, r1	; 0x01
 d72:	27 c0       	rjmp	.+78     	; 0xdc2 <myPrint+0x64>
		if(str[i] == '\0'){
 d74:	89 81       	ldd	r24, Y+1	; 0x01
 d76:	88 2f       	mov	r24, r24
 d78:	90 e0       	ldi	r25, 0x00	; 0
 d7a:	2a 81       	ldd	r18, Y+2	; 0x02
 d7c:	3b 81       	ldd	r19, Y+3	; 0x03
 d7e:	82 0f       	add	r24, r18
 d80:	93 1f       	adc	r25, r19
 d82:	fc 01       	movw	r30, r24
 d84:	80 81       	ld	r24, Z
 d86:	88 23       	and	r24, r24
 d88:	09 f4       	brne	.+2      	; 0xd8c <myPrint+0x2e>
			break;
 d8a:	1f c0       	rjmp	.+62     	; 0xdca <myPrint+0x6c>
		}
		USART_Transmit(str[i]);
 d8c:	00 00       	nop
 d8e:	80 ec       	ldi	r24, 0xC0	; 192
 d90:	90 e0       	ldi	r25, 0x00	; 0
 d92:	fc 01       	movw	r30, r24
 d94:	80 81       	ld	r24, Z
 d96:	88 2f       	mov	r24, r24
 d98:	90 e0       	ldi	r25, 0x00	; 0
 d9a:	80 72       	andi	r24, 0x20	; 32
 d9c:	99 27       	eor	r25, r25
 d9e:	00 97       	sbiw	r24, 0x00	; 0
 da0:	b1 f3       	breq	.-20     	; 0xd8e <myPrint+0x30>
 da2:	86 ec       	ldi	r24, 0xC6	; 198
 da4:	90 e0       	ldi	r25, 0x00	; 0
 da6:	29 81       	ldd	r18, Y+1	; 0x01
 da8:	22 2f       	mov	r18, r18
 daa:	30 e0       	ldi	r19, 0x00	; 0
 dac:	4a 81       	ldd	r20, Y+2	; 0x02
 dae:	5b 81       	ldd	r21, Y+3	; 0x03
 db0:	24 0f       	add	r18, r20
 db2:	35 1f       	adc	r19, r21
 db4:	f9 01       	movw	r30, r18
 db6:	20 81       	ld	r18, Z
 db8:	fc 01       	movw	r30, r24
 dba:	20 83       	st	Z, r18
	}
}


void myPrint(unsigned char str[], unsigned char len){
	for(unsigned char i = 0; i < len; i++){
 dbc:	89 81       	ldd	r24, Y+1	; 0x01
 dbe:	8f 5f       	subi	r24, 0xFF	; 255
 dc0:	89 83       	std	Y+1, r24	; 0x01
 dc2:	99 81       	ldd	r25, Y+1	; 0x01
 dc4:	8c 81       	ldd	r24, Y+4	; 0x04
 dc6:	98 17       	cp	r25, r24
 dc8:	a8 f2       	brcs	.-86     	; 0xd74 <myPrint+0x16>
		if(str[i] == '\0'){
			break;
		}
		USART_Transmit(str[i]);
	}
	USART_Transmit(0x0A);
 dca:	00 00       	nop
 dcc:	80 ec       	ldi	r24, 0xC0	; 192
 dce:	90 e0       	ldi	r25, 0x00	; 0
 dd0:	fc 01       	movw	r30, r24
 dd2:	80 81       	ld	r24, Z
 dd4:	88 2f       	mov	r24, r24
 dd6:	90 e0       	ldi	r25, 0x00	; 0
 dd8:	80 72       	andi	r24, 0x20	; 32
 dda:	99 27       	eor	r25, r25
 ddc:	00 97       	sbiw	r24, 0x00	; 0
 dde:	b1 f3       	breq	.-20     	; 0xdcc <myPrint+0x6e>
 de0:	86 ec       	ldi	r24, 0xC6	; 198
 de2:	90 e0       	ldi	r25, 0x00	; 0
 de4:	2a e0       	ldi	r18, 0x0A	; 10
 de6:	fc 01       	movw	r30, r24
 de8:	20 83       	st	Z, r18
}
 dea:	0f 90       	pop	r0
 dec:	0f 90       	pop	r0
 dee:	0f 90       	pop	r0
 df0:	0f 90       	pop	r0
 df2:	df 91       	pop	r29
 df4:	cf 91       	pop	r28
 df6:	08 95       	ret

00000df8 <__vector_18>:


ISR(USART_RX_vect){
 df8:	1f 92       	push	r1
 dfa:	0f 92       	push	r0
 dfc:	00 90 5f 00 	lds	r0, 0x005F
 e00:	0f 92       	push	r0
 e02:	11 24       	eor	r1, r1
 e04:	8f 93       	push	r24
 e06:	9f 93       	push	r25
 e08:	ef 93       	push	r30
 e0a:	ff 93       	push	r31
 e0c:	cf 93       	push	r28
 e0e:	df 93       	push	r29
 e10:	cd b7       	in	r28, 0x3d	; 61
 e12:	de b7       	in	r29, 0x3e	; 62
	// dataReceived variable to allow the main function to know when new data is available
	dataReceived = 1;
 e14:	81 e0       	ldi	r24, 0x01	; 1
 e16:	80 93 00 01 	sts	0x0100, r24
	// Write the data from the USART I/O register to a buffer
	rxBuffer = UDR0;
 e1a:	86 ec       	ldi	r24, 0xC6	; 198
 e1c:	90 e0       	ldi	r25, 0x00	; 0
 e1e:	fc 01       	movw	r30, r24
 e20:	80 81       	ld	r24, Z
 e22:	80 93 01 01 	sts	0x0101, r24
}
 e26:	df 91       	pop	r29
 e28:	cf 91       	pop	r28
 e2a:	ff 91       	pop	r31
 e2c:	ef 91       	pop	r30
 e2e:	9f 91       	pop	r25
 e30:	8f 91       	pop	r24
 e32:	0f 90       	pop	r0
 e34:	00 92 5f 00 	sts	0x005F, r0
 e38:	0f 90       	pop	r0
 e3a:	1f 90       	pop	r1
 e3c:	18 95       	reti

00000e3e <SPI_MasterInit>:
#define SPI_SCK DDB5


#include "spi_comm.h"

void SPI_MasterInit(void){
 e3e:	cf 93       	push	r28
 e40:	df 93       	push	r29
 e42:	cd b7       	in	r28, 0x3d	; 61
 e44:	de b7       	in	r29, 0x3e	; 62
	// set MOSI, SCK and SS as output, all others are inputs.
	DDR_SPI = ( 1 << SPI_MOSI ) | ( 1 << SPI_SCK ) | ( 1 << SPI_SS );
 e46:	84 e2       	ldi	r24, 0x24	; 36
 e48:	90 e0       	ldi	r25, 0x00	; 0
 e4a:	2c e2       	ldi	r18, 0x2C	; 44
 e4c:	fc 01       	movw	r30, r24
 e4e:	20 83       	st	Z, r18

	// SPI Control Register
	// SPE bit: SPI Enable
	// MSTR bit: Master select bit
	// SPR0 bit: Clock select bit, sets clock rate to Fosc/16
	SPCR = ( 1 << SPE ) | ( 1 << MSTR ) | ( 1 << SPR0 );
 e50:	8c e4       	ldi	r24, 0x4C	; 76
 e52:	90 e0       	ldi	r25, 0x00	; 0
 e54:	21 e5       	ldi	r18, 0x51	; 81
 e56:	fc 01       	movw	r30, r24
 e58:	20 83       	st	Z, r18
}
 e5a:	df 91       	pop	r29
 e5c:	cf 91       	pop	r28
 e5e:	08 95       	ret

00000e60 <SPI_Initiate_Transmission>:

void SPI_Initiate_Transmission(){
 e60:	cf 93       	push	r28
 e62:	df 93       	push	r29
 e64:	cd b7       	in	r28, 0x3d	; 61
 e66:	de b7       	in	r29, 0x3e	; 62
	// Pull the SS line low to initiate transmission
	SPI_PORT &= ~( 1 << SPI_SS );
 e68:	85 e2       	ldi	r24, 0x25	; 37
 e6a:	90 e0       	ldi	r25, 0x00	; 0
 e6c:	25 e2       	ldi	r18, 0x25	; 37
 e6e:	30 e0       	ldi	r19, 0x00	; 0
 e70:	f9 01       	movw	r30, r18
 e72:	20 81       	ld	r18, Z
 e74:	2b 7f       	andi	r18, 0xFB	; 251
 e76:	fc 01       	movw	r30, r24
 e78:	20 83       	st	Z, r18
}
 e7a:	df 91       	pop	r29
 e7c:	cf 91       	pop	r28
 e7e:	08 95       	ret

00000e80 <SPI_End_Transmission>:

void SPI_End_Transmission(){
 e80:	cf 93       	push	r28
 e82:	df 93       	push	r29
 e84:	cd b7       	in	r28, 0x3d	; 61
 e86:	de b7       	in	r29, 0x3e	; 62
	// Pull the SS line high to end transmission
	SPI_PORT |= ( 1 << SPI_SS );
 e88:	85 e2       	ldi	r24, 0x25	; 37
 e8a:	90 e0       	ldi	r25, 0x00	; 0
 e8c:	25 e2       	ldi	r18, 0x25	; 37
 e8e:	30 e0       	ldi	r19, 0x00	; 0
 e90:	f9 01       	movw	r30, r18
 e92:	20 81       	ld	r18, Z
 e94:	24 60       	ori	r18, 0x04	; 4
 e96:	fc 01       	movw	r30, r24
 e98:	20 83       	st	Z, r18
}
 e9a:	df 91       	pop	r29
 e9c:	cf 91       	pop	r28
 e9e:	08 95       	ret

00000ea0 <SPI_MasterTransmit>:

char SPI_MasterTransmit(char cData){
 ea0:	cf 93       	push	r28
 ea2:	df 93       	push	r29
 ea4:	1f 92       	push	r1
 ea6:	cd b7       	in	r28, 0x3d	; 61
 ea8:	de b7       	in	r29, 0x3e	; 62
 eaa:	89 83       	std	Y+1, r24	; 0x01
	// SPI Data Register, transfers data between register file and the SPI shift register
	SPDR = cData;
 eac:	8e e4       	ldi	r24, 0x4E	; 78
 eae:	90 e0       	ldi	r25, 0x00	; 0
 eb0:	29 81       	ldd	r18, Y+1	; 0x01
 eb2:	fc 01       	movw	r30, r24
 eb4:	20 83       	st	Z, r18

	asm("nop");	// This is supposed to help
 eb6:	00 00       	nop

	// Wait for transmission to complete
	// SPI Status Register
	// SPIF bit: SPI Interrupt Flag, it is set when a serial transfer is complete
	while ( !( SPSR & ( 1 << SPIF ) ) ){};
 eb8:	00 00       	nop
 eba:	8d e4       	ldi	r24, 0x4D	; 77
 ebc:	90 e0       	ldi	r25, 0x00	; 0
 ebe:	fc 01       	movw	r30, r24
 ec0:	80 81       	ld	r24, Z
 ec2:	88 23       	and	r24, r24
 ec4:	d4 f7       	brge	.-12     	; 0xeba <SPI_MasterTransmit+0x1a>
	return SPDR;
 ec6:	8e e4       	ldi	r24, 0x4E	; 78
 ec8:	90 e0       	ldi	r25, 0x00	; 0
 eca:	fc 01       	movw	r30, r24
 ecc:	80 81       	ld	r24, Z

}
 ece:	0f 90       	pop	r0
 ed0:	df 91       	pop	r29
 ed2:	cf 91       	pop	r28
 ed4:	08 95       	ret

00000ed6 <__divmodhi4>:
 ed6:	97 fb       	bst	r25, 7
 ed8:	07 2e       	mov	r0, r23
 eda:	16 f4       	brtc	.+4      	; 0xee0 <__divmodhi4+0xa>
 edc:	00 94       	com	r0
 ede:	07 d0       	rcall	.+14     	; 0xeee <__divmodhi4_neg1>
 ee0:	77 fd       	sbrc	r23, 7
 ee2:	09 d0       	rcall	.+18     	; 0xef6 <__divmodhi4_neg2>
 ee4:	0e 94 ad 07 	call	0xf5a	; 0xf5a <__udivmodhi4>
 ee8:	07 fc       	sbrc	r0, 7
 eea:	05 d0       	rcall	.+10     	; 0xef6 <__divmodhi4_neg2>
 eec:	3e f4       	brtc	.+14     	; 0xefc <__divmodhi4_exit>

00000eee <__divmodhi4_neg1>:
 eee:	90 95       	com	r25
 ef0:	81 95       	neg	r24
 ef2:	9f 4f       	sbci	r25, 0xFF	; 255
 ef4:	08 95       	ret

00000ef6 <__divmodhi4_neg2>:
 ef6:	70 95       	com	r23
 ef8:	61 95       	neg	r22
 efa:	7f 4f       	sbci	r23, 0xFF	; 255

00000efc <__divmodhi4_exit>:
 efc:	08 95       	ret

00000efe <__divmodsi4>:
 efe:	05 2e       	mov	r0, r21
 f00:	97 fb       	bst	r25, 7
 f02:	1e f4       	brtc	.+6      	; 0xf0a <__divmodsi4+0xc>
 f04:	00 94       	com	r0
 f06:	0e 94 96 07 	call	0xf2c	; 0xf2c <__negsi2>
 f0a:	57 fd       	sbrc	r21, 7
 f0c:	07 d0       	rcall	.+14     	; 0xf1c <__divmodsi4_neg2>
 f0e:	0e 94 c1 07 	call	0xf82	; 0xf82 <__udivmodsi4>
 f12:	07 fc       	sbrc	r0, 7
 f14:	03 d0       	rcall	.+6      	; 0xf1c <__divmodsi4_neg2>
 f16:	4e f4       	brtc	.+18     	; 0xf2a <__divmodsi4_exit>
 f18:	0c 94 96 07 	jmp	0xf2c	; 0xf2c <__negsi2>

00000f1c <__divmodsi4_neg2>:
 f1c:	50 95       	com	r21
 f1e:	40 95       	com	r20
 f20:	30 95       	com	r19
 f22:	21 95       	neg	r18
 f24:	3f 4f       	sbci	r19, 0xFF	; 255
 f26:	4f 4f       	sbci	r20, 0xFF	; 255
 f28:	5f 4f       	sbci	r21, 0xFF	; 255

00000f2a <__divmodsi4_exit>:
 f2a:	08 95       	ret

00000f2c <__negsi2>:
 f2c:	90 95       	com	r25
 f2e:	80 95       	com	r24
 f30:	70 95       	com	r23
 f32:	61 95       	neg	r22
 f34:	7f 4f       	sbci	r23, 0xFF	; 255
 f36:	8f 4f       	sbci	r24, 0xFF	; 255
 f38:	9f 4f       	sbci	r25, 0xFF	; 255
 f3a:	08 95       	ret

00000f3c <__umulhisi3>:
 f3c:	a2 9f       	mul	r26, r18
 f3e:	b0 01       	movw	r22, r0
 f40:	b3 9f       	mul	r27, r19
 f42:	c0 01       	movw	r24, r0
 f44:	a3 9f       	mul	r26, r19
 f46:	70 0d       	add	r23, r0
 f48:	81 1d       	adc	r24, r1
 f4a:	11 24       	eor	r1, r1
 f4c:	91 1d       	adc	r25, r1
 f4e:	b2 9f       	mul	r27, r18
 f50:	70 0d       	add	r23, r0
 f52:	81 1d       	adc	r24, r1
 f54:	11 24       	eor	r1, r1
 f56:	91 1d       	adc	r25, r1
 f58:	08 95       	ret

00000f5a <__udivmodhi4>:
 f5a:	aa 1b       	sub	r26, r26
 f5c:	bb 1b       	sub	r27, r27
 f5e:	51 e1       	ldi	r21, 0x11	; 17
 f60:	07 c0       	rjmp	.+14     	; 0xf70 <__udivmodhi4_ep>

00000f62 <__udivmodhi4_loop>:
 f62:	aa 1f       	adc	r26, r26
 f64:	bb 1f       	adc	r27, r27
 f66:	a6 17       	cp	r26, r22
 f68:	b7 07       	cpc	r27, r23
 f6a:	10 f0       	brcs	.+4      	; 0xf70 <__udivmodhi4_ep>
 f6c:	a6 1b       	sub	r26, r22
 f6e:	b7 0b       	sbc	r27, r23

00000f70 <__udivmodhi4_ep>:
 f70:	88 1f       	adc	r24, r24
 f72:	99 1f       	adc	r25, r25
 f74:	5a 95       	dec	r21
 f76:	a9 f7       	brne	.-22     	; 0xf62 <__udivmodhi4_loop>
 f78:	80 95       	com	r24
 f7a:	90 95       	com	r25
 f7c:	bc 01       	movw	r22, r24
 f7e:	cd 01       	movw	r24, r26
 f80:	08 95       	ret

00000f82 <__udivmodsi4>:
 f82:	a1 e2       	ldi	r26, 0x21	; 33
 f84:	1a 2e       	mov	r1, r26
 f86:	aa 1b       	sub	r26, r26
 f88:	bb 1b       	sub	r27, r27
 f8a:	fd 01       	movw	r30, r26
 f8c:	0d c0       	rjmp	.+26     	; 0xfa8 <__udivmodsi4_ep>

00000f8e <__udivmodsi4_loop>:
 f8e:	aa 1f       	adc	r26, r26
 f90:	bb 1f       	adc	r27, r27
 f92:	ee 1f       	adc	r30, r30
 f94:	ff 1f       	adc	r31, r31
 f96:	a2 17       	cp	r26, r18
 f98:	b3 07       	cpc	r27, r19
 f9a:	e4 07       	cpc	r30, r20
 f9c:	f5 07       	cpc	r31, r21
 f9e:	20 f0       	brcs	.+8      	; 0xfa8 <__udivmodsi4_ep>
 fa0:	a2 1b       	sub	r26, r18
 fa2:	b3 0b       	sbc	r27, r19
 fa4:	e4 0b       	sbc	r30, r20
 fa6:	f5 0b       	sbc	r31, r21

00000fa8 <__udivmodsi4_ep>:
 fa8:	66 1f       	adc	r22, r22
 faa:	77 1f       	adc	r23, r23
 fac:	88 1f       	adc	r24, r24
 fae:	99 1f       	adc	r25, r25
 fb0:	1a 94       	dec	r1
 fb2:	69 f7       	brne	.-38     	; 0xf8e <__udivmodsi4_loop>
 fb4:	60 95       	com	r22
 fb6:	70 95       	com	r23
 fb8:	80 95       	com	r24
 fba:	90 95       	com	r25
 fbc:	9b 01       	movw	r18, r22
 fbe:	ac 01       	movw	r20, r24
 fc0:	bd 01       	movw	r22, r26
 fc2:	cf 01       	movw	r24, r30
 fc4:	08 95       	ret

00000fc6 <_exit>:
 fc6:	f8 94       	cli

00000fc8 <__stop_program>:
 fc8:	ff cf       	rjmp	.-2      	; 0xfc8 <__stop_program>
