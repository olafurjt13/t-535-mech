
imu_spi_com.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000064  00800100  00001856  000018ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001856  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800164  00800164  0000194e  2**0
                  ALLOC
  3 .stab         000023d0  00000000  00000000  00001950  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001229  00000000  00000000  00003d20  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00004f49  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000120  00000000  00000000  00004f60  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000006ae  00000000  00000000  00005080  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000000b4  00000000  00000000  0000572e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000389  00000000  00000000  000057e2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 6e 09 	jmp	0x12dc	; 0x12dc <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e6 e5       	ldi	r30, 0x56	; 86
      7c:	f8 e1       	ldi	r31, 0x18	; 24
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a4 36       	cpi	r26, 0x64	; 100
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	a4 e6       	ldi	r26, 0x64	; 100
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a8 36       	cpi	r26, 0x68	; 104
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 0d 02 	call	0x41a	; 0x41a <main>
      9e:	0c 94 29 0c 	jmp	0x1852	; 0x1852 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <IMU_init>:
#include "spi_comm.h"
#include "IMU_module.h"
#include "myUSART.h"


void IMU_init(){
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
      aa:	cd b7       	in	r28, 0x3d	; 61
      ac:	de b7       	in	r29, 0x3e	; 62
      ae:	2a 97       	sbiw	r28, 0x0a	; 10
      b0:	0f b6       	in	r0, 0x3f	; 63
      b2:	f8 94       	cli
      b4:	de bf       	out	0x3e, r29	; 62
      b6:	0f be       	out	0x3f, r0	; 63
      b8:	cd bf       	out	0x3d, r28	; 61
	SPI_MasterInit();
      ba:	0e 94 91 09 	call	0x1322	; 0x1322 <SPI_MasterInit>

	if (whoami() != 0x68){
      be:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <whoami>
      c2:	88 36       	cpi	r24, 0x68	; 104
      c4:	89 f0       	breq	.+34     	; 0xe8 <IMU_init+0x42>
			unsigned char errStr[10] = "Error!\0";
      c6:	28 e0       	ldi	r18, 0x08	; 8
      c8:	e0 e0       	ldi	r30, 0x00	; 0
      ca:	f1 e0       	ldi	r31, 0x01	; 1
      cc:	ce 01       	movw	r24, r28
      ce:	01 96       	adiw	r24, 0x01	; 1
      d0:	dc 01       	movw	r26, r24
      d2:	01 90       	ld	r0, Z+
      d4:	0d 92       	st	X+, r0
      d6:	2a 95       	dec	r18
      d8:	e1 f7       	brne	.-8      	; 0xd2 <IMU_init+0x2c>
      da:	1a 86       	std	Y+10, r1	; 0x0a
      dc:	19 86       	std	Y+9, r1	; 0x09
			myPrint(errStr,10);
      de:	6a e0       	ldi	r22, 0x0A	; 10
      e0:	ce 01       	movw	r24, r28
      e2:	01 96       	adiw	r24, 0x01	; 1
      e4:	0e 94 3e 09 	call	0x127c	; 0x127c <myPrint>
	}
	accInit();
      e8:	0e 94 81 00 	call	0x102	; 0x102 <accInit>
	gyroInit();
      ec:	0e 94 db 00 	call	0x1b6	; 0x1b6 <gyroInit>
}
      f0:	2a 96       	adiw	r28, 0x0a	; 10
      f2:	0f b6       	in	r0, 0x3f	; 63
      f4:	f8 94       	cli
      f6:	de bf       	out	0x3e, r29	; 62
      f8:	0f be       	out	0x3f, r0	; 63
      fa:	cd bf       	out	0x3d, r28	; 61
      fc:	df 91       	pop	r29
      fe:	cf 91       	pop	r28
     100:	08 95       	ret

00000102 <accInit>:

void accInit(){
     102:	cf 93       	push	r28
     104:	df 93       	push	r29
     106:	00 d0       	rcall	.+0      	; 0x108 <accInit+0x6>
     108:	1f 92       	push	r1
     10a:	cd b7       	in	r28, 0x3d	; 61
     10c:	de b7       	in	r29, 0x3e	; 62
	// The bit pattern to turn on acceleration sensing in the Z,Y and X directions
	char setCtrlReg5 = ( 1 << ACC_Z ) | ( 1 << ACC_Y ) | ( 1 << ACC_X );
     10e:	88 e3       	ldi	r24, 0x38	; 56
     110:	89 83       	std	Y+1, r24	; 0x01

	// Send write address
	SPI_Initiate_Transmission();
     112:	85 e2       	ldi	r24, 0x25	; 37
     114:	90 e0       	ldi	r25, 0x00	; 0
     116:	25 e2       	ldi	r18, 0x25	; 37
     118:	30 e0       	ldi	r19, 0x00	; 0
     11a:	f9 01       	movw	r30, r18
     11c:	20 81       	ld	r18, Z
     11e:	2b 7f       	andi	r18, 0xFB	; 251
     120:	fc 01       	movw	r30, r24
     122:	20 83       	st	Z, r18
	SPI_MasterTransmit( WRITE | CTRL_REG5_XL );
     124:	8f e1       	ldi	r24, 0x1F	; 31
     126:	0e 94 d7 09 	call	0x13ae	; 0x13ae <SPI_MasterTransmit>

	// Send ctrlReg5 bit pattern to turn on X,Y,Z acceleration sensors
	SPI_MasterTransmit( setCtrlReg5 );
     12a:	89 81       	ldd	r24, Y+1	; 0x01
     12c:	0e 94 d7 09 	call	0x13ae	; 0x13ae <SPI_MasterTransmit>
	SPI_End_Transmission();
     130:	85 e2       	ldi	r24, 0x25	; 37
     132:	90 e0       	ldi	r25, 0x00	; 0
     134:	25 e2       	ldi	r18, 0x25	; 37
     136:	30 e0       	ldi	r19, 0x00	; 0
     138:	f9 01       	movw	r30, r18
     13a:	20 81       	ld	r18, Z
     13c:	24 60       	ori	r18, 0x04	; 4
     13e:	fc 01       	movw	r30, r24
     140:	20 83       	st	Z, r18


	char setCtrlReg8 = ( 1 << IF_ADD_INC );
     142:	84 e0       	ldi	r24, 0x04	; 4
     144:	8a 83       	std	Y+2, r24	; 0x02

	// Send write address
	SPI_Initiate_Transmission();
     146:	85 e2       	ldi	r24, 0x25	; 37
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	25 e2       	ldi	r18, 0x25	; 37
     14c:	30 e0       	ldi	r19, 0x00	; 0
     14e:	f9 01       	movw	r30, r18
     150:	20 81       	ld	r18, Z
     152:	2b 7f       	andi	r18, 0xFB	; 251
     154:	fc 01       	movw	r30, r24
     156:	20 83       	st	Z, r18
		SPI_MasterTransmit( WRITE | CTRL_REG8 );
     158:	82 e2       	ldi	r24, 0x22	; 34
     15a:	0e 94 d7 09 	call	0x13ae	; 0x13ae <SPI_MasterTransmit>
		// Send setCtrlReg8 bit pattern to turn auto increment registers on
		SPI_MasterTransmit( setCtrlReg8 );
     15e:	8a 81       	ldd	r24, Y+2	; 0x02
     160:	0e 94 d7 09 	call	0x13ae	; 0x13ae <SPI_MasterTransmit>
	SPI_End_Transmission();
     164:	85 e2       	ldi	r24, 0x25	; 37
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	25 e2       	ldi	r18, 0x25	; 37
     16a:	30 e0       	ldi	r19, 0x00	; 0
     16c:	f9 01       	movw	r30, r18
     16e:	20 81       	ld	r18, Z
     170:	24 60       	ori	r18, 0x04	; 4
     172:	fc 01       	movw	r30, r24
     174:	20 83       	st	Z, r18
	//unsigned char doneIMU[50] = "Finished initializing IMU\0";
	//myPrint(doneIMU,30);

	// Set output data rate to 952Hz
	char setCtrlReg6 = ( 1 << ODR_XL2 ) | ( 1 << ODR_XL1 );
     176:	80 ec       	ldi	r24, 0xC0	; 192
     178:	8b 83       	std	Y+3, r24	; 0x03

	SPI_Initiate_Transmission();
     17a:	85 e2       	ldi	r24, 0x25	; 37
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	25 e2       	ldi	r18, 0x25	; 37
     180:	30 e0       	ldi	r19, 0x00	; 0
     182:	f9 01       	movw	r30, r18
     184:	20 81       	ld	r18, Z
     186:	2b 7f       	andi	r18, 0xFB	; 251
     188:	fc 01       	movw	r30, r24
     18a:	20 83       	st	Z, r18
		SPI_MasterTransmit ( WRITE | CTRL_REG6_XL );
     18c:	80 e2       	ldi	r24, 0x20	; 32
     18e:	0e 94 d7 09 	call	0x13ae	; 0x13ae <SPI_MasterTransmit>
		SPI_MasterTransmit ( setCtrlReg6 );
     192:	8b 81       	ldd	r24, Y+3	; 0x03
     194:	0e 94 d7 09 	call	0x13ae	; 0x13ae <SPI_MasterTransmit>
	SPI_End_Transmission();
     198:	85 e2       	ldi	r24, 0x25	; 37
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	25 e2       	ldi	r18, 0x25	; 37
     19e:	30 e0       	ldi	r19, 0x00	; 0
     1a0:	f9 01       	movw	r30, r18
     1a2:	20 81       	ld	r18, Z
     1a4:	24 60       	ori	r18, 0x04	; 4
     1a6:	fc 01       	movw	r30, r24
     1a8:	20 83       	st	Z, r18
}
     1aa:	0f 90       	pop	r0
     1ac:	0f 90       	pop	r0
     1ae:	0f 90       	pop	r0
     1b0:	df 91       	pop	r29
     1b2:	cf 91       	pop	r28
     1b4:	08 95       	ret

000001b6 <gyroInit>:


void gyroInit(){
     1b6:	cf 93       	push	r28
     1b8:	df 93       	push	r29
     1ba:	1f 92       	push	r1
     1bc:	cd b7       	in	r28, 0x3d	; 61
     1be:	de b7       	in	r29, 0x3e	; 62
	// Set output data rate (ODR) to 952Hz, Full scale selection (FS) to 245dps and gyro bandwidth (BW) to 33Hz
	unsigned char setCtrlReg1 = ( 1 << ODR_G2 ) | ( 1 << ODR_G1 ) | ( 0 << FS_G1 ) | ( 0 << FS_G0 ) | ( 0 << BW_G1 ) | ( 0 << BW_G0);
     1c0:	80 ec       	ldi	r24, 0xC0	; 192
     1c2:	89 83       	std	Y+1, r24	; 0x01

	SPI_Initiate_Transmission();
     1c4:	85 e2       	ldi	r24, 0x25	; 37
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	25 e2       	ldi	r18, 0x25	; 37
     1ca:	30 e0       	ldi	r19, 0x00	; 0
     1cc:	f9 01       	movw	r30, r18
     1ce:	20 81       	ld	r18, Z
     1d0:	2b 7f       	andi	r18, 0xFB	; 251
     1d2:	fc 01       	movw	r30, r24
     1d4:	20 83       	st	Z, r18
		SPI_MasterTransmit ( WRITE | CTRL_REG1_G );
     1d6:	80 e1       	ldi	r24, 0x10	; 16
     1d8:	0e 94 d7 09 	call	0x13ae	; 0x13ae <SPI_MasterTransmit>
		SPI_MasterTransmit ( setCtrlReg1 );
     1dc:	89 81       	ldd	r24, Y+1	; 0x01
     1de:	0e 94 d7 09 	call	0x13ae	; 0x13ae <SPI_MasterTransmit>
	SPI_End_Transmission();
     1e2:	85 e2       	ldi	r24, 0x25	; 37
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	25 e2       	ldi	r18, 0x25	; 37
     1e8:	30 e0       	ldi	r19, 0x00	; 0
     1ea:	f9 01       	movw	r30, r18
     1ec:	20 81       	ld	r18, Z
     1ee:	24 60       	ori	r18, 0x04	; 4
     1f0:	fc 01       	movw	r30, r24
     1f2:	20 83       	st	Z, r18

}
     1f4:	0f 90       	pop	r0
     1f6:	df 91       	pop	r29
     1f8:	cf 91       	pop	r28
     1fa:	08 95       	ret

000001fc <IMU_read_acc>:


void IMU_read_acc(int *accBuffer){
     1fc:	0f 93       	push	r16
     1fe:	1f 93       	push	r17
     200:	cf 93       	push	r28
     202:	df 93       	push	r29
     204:	cd b7       	in	r28, 0x3d	; 61
     206:	de b7       	in	r29, 0x3e	; 62
     208:	2b 97       	sbiw	r28, 0x0b	; 11
     20a:	0f b6       	in	r0, 0x3f	; 63
     20c:	f8 94       	cli
     20e:	de bf       	out	0x3e, r29	; 62
     210:	0f be       	out	0x3f, r0	; 63
     212:	cd bf       	out	0x3d, r28	; 61
     214:	9b 87       	std	Y+11, r25	; 0x0b
     216:	8a 87       	std	Y+10, r24	; 0x0a
	// char sendingRequest[27] = "Now sending request to IMU\n";
	// char readingFromSPDR[18] = "Reading from SPDR\n";

	char spiBuffer[6];
	int *acc = accBuffer;
     218:	8a 85       	ldd	r24, Y+10	; 0x0a
     21a:	9b 85       	ldd	r25, Y+11	; 0x0b
     21c:	9b 83       	std	Y+3, r25	; 0x03
     21e:	8a 83       	std	Y+2, r24	; 0x02

	// Select the IMU as an SPI Slave

	SPI_Initiate_Transmission();
     220:	85 e2       	ldi	r24, 0x25	; 37
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	25 e2       	ldi	r18, 0x25	; 37
     226:	30 e0       	ldi	r19, 0x00	; 0
     228:	f9 01       	movw	r30, r18
     22a:	20 81       	ld	r18, Z
     22c:	2b 7f       	andi	r18, 0xFB	; 251
     22e:	fc 01       	movw	r30, r24
     230:	20 83       	st	Z, r18


	// Send "read from acceleration output register" signal
	SPI_MasterTransmit( READ | OUT_X_XL );
     232:	88 ea       	ldi	r24, 0xA8	; 168
     234:	0e 94 d7 09 	call	0x13ae	; 0x13ae <SPI_MasterTransmit>
	for (unsigned char i = 0; i < 6; i++){
     238:	19 82       	std	Y+1, r1	; 0x01
     23a:	10 c0       	rjmp	.+32     	; 0x25c <IMU_read_acc+0x60>
			spiBuffer[i] = SPI_MasterTransmit(0x00);
     23c:	89 81       	ldd	r24, Y+1	; 0x01
     23e:	08 2f       	mov	r16, r24
     240:	10 e0       	ldi	r17, 0x00	; 0
     242:	80 e0       	ldi	r24, 0x00	; 0
     244:	0e 94 d7 09 	call	0x13ae	; 0x13ae <SPI_MasterTransmit>
     248:	28 2f       	mov	r18, r24
     24a:	ce 01       	movw	r24, r28
     24c:	04 96       	adiw	r24, 0x04	; 4
     24e:	80 0f       	add	r24, r16
     250:	91 1f       	adc	r25, r17
     252:	fc 01       	movw	r30, r24
     254:	20 83       	st	Z, r18
	SPI_Initiate_Transmission();


	// Send "read from acceleration output register" signal
	SPI_MasterTransmit( READ | OUT_X_XL );
	for (unsigned char i = 0; i < 6; i++){
     256:	89 81       	ldd	r24, Y+1	; 0x01
     258:	8f 5f       	subi	r24, 0xFF	; 255
     25a:	89 83       	std	Y+1, r24	; 0x01
     25c:	89 81       	ldd	r24, Y+1	; 0x01
     25e:	86 30       	cpi	r24, 0x06	; 6
     260:	68 f3       	brcs	.-38     	; 0x23c <IMU_read_acc+0x40>
			spiBuffer[i] = SPI_MasterTransmit(0x00);
	}
	SPI_End_Transmission();
     262:	85 e2       	ldi	r24, 0x25	; 37
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	25 e2       	ldi	r18, 0x25	; 37
     268:	30 e0       	ldi	r19, 0x00	; 0
     26a:	f9 01       	movw	r30, r18
     26c:	20 81       	ld	r18, Z
     26e:	24 60       	ori	r18, 0x04	; 4
     270:	fc 01       	movw	r30, r24
     272:	20 83       	st	Z, r18

	acc[0] = (spiBuffer[1] << 8 | spiBuffer[0]);
     274:	8d 81       	ldd	r24, Y+5	; 0x05
     276:	88 2f       	mov	r24, r24
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	38 2f       	mov	r19, r24
     27c:	22 27       	eor	r18, r18
     27e:	8c 81       	ldd	r24, Y+4	; 0x04
     280:	88 2f       	mov	r24, r24
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	28 2b       	or	r18, r24
     286:	39 2b       	or	r19, r25
     288:	8a 81       	ldd	r24, Y+2	; 0x02
     28a:	9b 81       	ldd	r25, Y+3	; 0x03
     28c:	fc 01       	movw	r30, r24
     28e:	31 83       	std	Z+1, r19	; 0x01
     290:	20 83       	st	Z, r18
	acc[1] = (spiBuffer[3] << 8 | spiBuffer[2]);
     292:	8a 81       	ldd	r24, Y+2	; 0x02
     294:	9b 81       	ldd	r25, Y+3	; 0x03
     296:	02 96       	adiw	r24, 0x02	; 2
     298:	2f 81       	ldd	r18, Y+7	; 0x07
     29a:	22 2f       	mov	r18, r18
     29c:	30 e0       	ldi	r19, 0x00	; 0
     29e:	52 2f       	mov	r21, r18
     2a0:	44 27       	eor	r20, r20
     2a2:	2e 81       	ldd	r18, Y+6	; 0x06
     2a4:	22 2f       	mov	r18, r18
     2a6:	30 e0       	ldi	r19, 0x00	; 0
     2a8:	24 2b       	or	r18, r20
     2aa:	35 2b       	or	r19, r21
     2ac:	fc 01       	movw	r30, r24
     2ae:	31 83       	std	Z+1, r19	; 0x01
     2b0:	20 83       	st	Z, r18
	acc[2] = (spiBuffer[5] << 8 | spiBuffer[4]);
     2b2:	8a 81       	ldd	r24, Y+2	; 0x02
     2b4:	9b 81       	ldd	r25, Y+3	; 0x03
     2b6:	04 96       	adiw	r24, 0x04	; 4
     2b8:	29 85       	ldd	r18, Y+9	; 0x09
     2ba:	22 2f       	mov	r18, r18
     2bc:	30 e0       	ldi	r19, 0x00	; 0
     2be:	52 2f       	mov	r21, r18
     2c0:	44 27       	eor	r20, r20
     2c2:	28 85       	ldd	r18, Y+8	; 0x08
     2c4:	22 2f       	mov	r18, r18
     2c6:	30 e0       	ldi	r19, 0x00	; 0
     2c8:	24 2b       	or	r18, r20
     2ca:	35 2b       	or	r19, r21
     2cc:	fc 01       	movw	r30, r24
     2ce:	31 83       	std	Z+1, r19	; 0x01
     2d0:	20 83       	st	Z, r18
}
     2d2:	2b 96       	adiw	r28, 0x0b	; 11
     2d4:	0f b6       	in	r0, 0x3f	; 63
     2d6:	f8 94       	cli
     2d8:	de bf       	out	0x3e, r29	; 62
     2da:	0f be       	out	0x3f, r0	; 63
     2dc:	cd bf       	out	0x3d, r28	; 61
     2de:	df 91       	pop	r29
     2e0:	cf 91       	pop	r28
     2e2:	1f 91       	pop	r17
     2e4:	0f 91       	pop	r16
     2e6:	08 95       	ret

000002e8 <IMU_read_gyro>:


void IMU_read_gyro(int *gyroBuffer){
     2e8:	0f 93       	push	r16
     2ea:	1f 93       	push	r17
     2ec:	cf 93       	push	r28
     2ee:	df 93       	push	r29
     2f0:	cd b7       	in	r28, 0x3d	; 61
     2f2:	de b7       	in	r29, 0x3e	; 62
     2f4:	2b 97       	sbiw	r28, 0x0b	; 11
     2f6:	0f b6       	in	r0, 0x3f	; 63
     2f8:	f8 94       	cli
     2fa:	de bf       	out	0x3e, r29	; 62
     2fc:	0f be       	out	0x3f, r0	; 63
     2fe:	cd bf       	out	0x3d, r28	; 61
     300:	9b 87       	std	Y+11, r25	; 0x0b
     302:	8a 87       	std	Y+10, r24	; 0x0a
	// char sendingRequest[27] = "Now sending request to IMU\n";
	// char readingFromSPDR[18] = "Reading from SPDR\n";

	char spiBuffer[6];
	int *ang_rate = gyroBuffer;
     304:	8a 85       	ldd	r24, Y+10	; 0x0a
     306:	9b 85       	ldd	r25, Y+11	; 0x0b
     308:	9b 83       	std	Y+3, r25	; 0x03
     30a:	8a 83       	std	Y+2, r24	; 0x02

	// Select the IMU as an SPI Slave

	SPI_Initiate_Transmission();
     30c:	85 e2       	ldi	r24, 0x25	; 37
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	25 e2       	ldi	r18, 0x25	; 37
     312:	30 e0       	ldi	r19, 0x00	; 0
     314:	f9 01       	movw	r30, r18
     316:	20 81       	ld	r18, Z
     318:	2b 7f       	andi	r18, 0xFB	; 251
     31a:	fc 01       	movw	r30, r24
     31c:	20 83       	st	Z, r18


	// Send "read from acceleration output register" signal
	SPI_MasterTransmit( READ | OUT_X_G );
     31e:	88 e9       	ldi	r24, 0x98	; 152
     320:	0e 94 d7 09 	call	0x13ae	; 0x13ae <SPI_MasterTransmit>
	for (unsigned char i = 0; i < 6; i++){
     324:	19 82       	std	Y+1, r1	; 0x01
     326:	10 c0       	rjmp	.+32     	; 0x348 <IMU_read_gyro+0x60>
			spiBuffer[i] = SPI_MasterTransmit(0x00);
     328:	89 81       	ldd	r24, Y+1	; 0x01
     32a:	08 2f       	mov	r16, r24
     32c:	10 e0       	ldi	r17, 0x00	; 0
     32e:	80 e0       	ldi	r24, 0x00	; 0
     330:	0e 94 d7 09 	call	0x13ae	; 0x13ae <SPI_MasterTransmit>
     334:	28 2f       	mov	r18, r24
     336:	ce 01       	movw	r24, r28
     338:	04 96       	adiw	r24, 0x04	; 4
     33a:	80 0f       	add	r24, r16
     33c:	91 1f       	adc	r25, r17
     33e:	fc 01       	movw	r30, r24
     340:	20 83       	st	Z, r18
	SPI_Initiate_Transmission();


	// Send "read from acceleration output register" signal
	SPI_MasterTransmit( READ | OUT_X_G );
	for (unsigned char i = 0; i < 6; i++){
     342:	89 81       	ldd	r24, Y+1	; 0x01
     344:	8f 5f       	subi	r24, 0xFF	; 255
     346:	89 83       	std	Y+1, r24	; 0x01
     348:	89 81       	ldd	r24, Y+1	; 0x01
     34a:	86 30       	cpi	r24, 0x06	; 6
     34c:	68 f3       	brcs	.-38     	; 0x328 <IMU_read_gyro+0x40>
			spiBuffer[i] = SPI_MasterTransmit(0x00);
	}
	SPI_End_Transmission();
     34e:	85 e2       	ldi	r24, 0x25	; 37
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	25 e2       	ldi	r18, 0x25	; 37
     354:	30 e0       	ldi	r19, 0x00	; 0
     356:	f9 01       	movw	r30, r18
     358:	20 81       	ld	r18, Z
     35a:	24 60       	ori	r18, 0x04	; 4
     35c:	fc 01       	movw	r30, r24
     35e:	20 83       	st	Z, r18

	ang_rate[0] = (spiBuffer[1] << 8 | spiBuffer[0]);
     360:	8d 81       	ldd	r24, Y+5	; 0x05
     362:	88 2f       	mov	r24, r24
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	38 2f       	mov	r19, r24
     368:	22 27       	eor	r18, r18
     36a:	8c 81       	ldd	r24, Y+4	; 0x04
     36c:	88 2f       	mov	r24, r24
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	28 2b       	or	r18, r24
     372:	39 2b       	or	r19, r25
     374:	8a 81       	ldd	r24, Y+2	; 0x02
     376:	9b 81       	ldd	r25, Y+3	; 0x03
     378:	fc 01       	movw	r30, r24
     37a:	31 83       	std	Z+1, r19	; 0x01
     37c:	20 83       	st	Z, r18
	ang_rate[1] = (spiBuffer[3] << 8 | spiBuffer[2]);
     37e:	8a 81       	ldd	r24, Y+2	; 0x02
     380:	9b 81       	ldd	r25, Y+3	; 0x03
     382:	02 96       	adiw	r24, 0x02	; 2
     384:	2f 81       	ldd	r18, Y+7	; 0x07
     386:	22 2f       	mov	r18, r18
     388:	30 e0       	ldi	r19, 0x00	; 0
     38a:	52 2f       	mov	r21, r18
     38c:	44 27       	eor	r20, r20
     38e:	2e 81       	ldd	r18, Y+6	; 0x06
     390:	22 2f       	mov	r18, r18
     392:	30 e0       	ldi	r19, 0x00	; 0
     394:	24 2b       	or	r18, r20
     396:	35 2b       	or	r19, r21
     398:	fc 01       	movw	r30, r24
     39a:	31 83       	std	Z+1, r19	; 0x01
     39c:	20 83       	st	Z, r18
	ang_rate[2] = (spiBuffer[5] << 8 | spiBuffer[4]);
     39e:	8a 81       	ldd	r24, Y+2	; 0x02
     3a0:	9b 81       	ldd	r25, Y+3	; 0x03
     3a2:	04 96       	adiw	r24, 0x04	; 4
     3a4:	29 85       	ldd	r18, Y+9	; 0x09
     3a6:	22 2f       	mov	r18, r18
     3a8:	30 e0       	ldi	r19, 0x00	; 0
     3aa:	52 2f       	mov	r21, r18
     3ac:	44 27       	eor	r20, r20
     3ae:	28 85       	ldd	r18, Y+8	; 0x08
     3b0:	22 2f       	mov	r18, r18
     3b2:	30 e0       	ldi	r19, 0x00	; 0
     3b4:	24 2b       	or	r18, r20
     3b6:	35 2b       	or	r19, r21
     3b8:	fc 01       	movw	r30, r24
     3ba:	31 83       	std	Z+1, r19	; 0x01
     3bc:	20 83       	st	Z, r18
}
     3be:	2b 96       	adiw	r28, 0x0b	; 11
     3c0:	0f b6       	in	r0, 0x3f	; 63
     3c2:	f8 94       	cli
     3c4:	de bf       	out	0x3e, r29	; 62
     3c6:	0f be       	out	0x3f, r0	; 63
     3c8:	cd bf       	out	0x3d, r28	; 61
     3ca:	df 91       	pop	r29
     3cc:	cf 91       	pop	r28
     3ce:	1f 91       	pop	r17
     3d0:	0f 91       	pop	r16
     3d2:	08 95       	ret

000003d4 <whoami>:



char whoami(void){
     3d4:	cf 93       	push	r28
     3d6:	df 93       	push	r29
     3d8:	1f 92       	push	r1
     3da:	cd b7       	in	r28, 0x3d	; 61
     3dc:	de b7       	in	r29, 0x3e	; 62
	char buff;
	SPI_Initiate_Transmission();
     3de:	85 e2       	ldi	r24, 0x25	; 37
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	25 e2       	ldi	r18, 0x25	; 37
     3e4:	30 e0       	ldi	r19, 0x00	; 0
     3e6:	f9 01       	movw	r30, r18
     3e8:	20 81       	ld	r18, Z
     3ea:	2b 7f       	andi	r18, 0xFB	; 251
     3ec:	fc 01       	movw	r30, r24
     3ee:	20 83       	st	Z, r18
	SPI_MasterTransmit( READ | WHO_AM_I );	// Request Identification
     3f0:	8f e8       	ldi	r24, 0x8F	; 143
     3f2:	0e 94 d7 09 	call	0x13ae	; 0x13ae <SPI_MasterTransmit>
	buff = SPI_MasterTransmit(0x00);	// Store Identification
     3f6:	80 e0       	ldi	r24, 0x00	; 0
     3f8:	0e 94 d7 09 	call	0x13ae	; 0x13ae <SPI_MasterTransmit>
     3fc:	89 83       	std	Y+1, r24	; 0x01
	SPI_End_Transmission();
     3fe:	85 e2       	ldi	r24, 0x25	; 37
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	25 e2       	ldi	r18, 0x25	; 37
     404:	30 e0       	ldi	r19, 0x00	; 0
     406:	f9 01       	movw	r30, r18
     408:	20 81       	ld	r18, Z
     40a:	24 60       	ori	r18, 0x04	; 4
     40c:	fc 01       	movw	r30, r24
     40e:	20 83       	st	Z, r18

	return buff;
     410:	89 81       	ldd	r24, Y+1	; 0x01
}
     412:	0f 90       	pop	r0
     414:	df 91       	pop	r29
     416:	cf 91       	pop	r28
     418:	08 95       	ret

0000041a <main>:

// OSTREAM to use for floats
//static FILE mystdout = FDEV_SETUP_STREAM(usart_putchar_printf, NULL, _FDEV_SETUP_WRITE);


int main(){
     41a:	cf 93       	push	r28
     41c:	df 93       	push	r29
     41e:	cd b7       	in	r28, 0x3d	; 61
     420:	de b7       	in	r29, 0x3e	; 62
     422:	6c 97       	sbiw	r28, 0x1c	; 28
     424:	0f b6       	in	r0, 0x3f	; 63
     426:	f8 94       	cli
     428:	de bf       	out	0x3e, r29	; 62
     42a:	0f be       	out	0x3f, r0	; 63
     42c:	cd bf       	out	0x3d, r28	; 61
	//stdout = &mystdout;
	asm("sei");
     42e:	78 94       	sei
	USART_init(BAUD);
     430:	80 e8       	ldi	r24, 0x80	; 128
     432:	95 e2       	ldi	r25, 0x25	; 37
     434:	0e 94 c7 03 	call	0x78e	; 0x78e <USART_init>
	IMU_init();
     438:	0e 94 53 00 	call	0xa6	; 0xa6 <IMU_init>
	motorInit(5);
     43c:	85 e0       	ldi	r24, 0x05	; 5
     43e:	0e 94 e5 02 	call	0x5ca	; 0x5ca <motorInit>
	motorInit(6);
     442:	86 e0       	ldi	r24, 0x06	; 6
     444:	0e 94 e5 02 	call	0x5ca	; 0x5ca <motorInit>

	int acc_data[3];
	int gyro_data[3];
	float acc_res = 4.0/65536.0;
     448:	80 e0       	ldi	r24, 0x00	; 0
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	a0 e8       	ldi	r26, 0x80	; 128
     44e:	b8 e3       	ldi	r27, 0x38	; 56
     450:	89 87       	std	Y+9, r24	; 0x09
     452:	9a 87       	std	Y+10, r25	; 0x0a
     454:	ab 87       	std	Y+11, r26	; 0x0b
     456:	bc 87       	std	Y+12, r27	; 0x0c
	float gyro_res = 245.0/32768.0;
     458:	80 e0       	ldi	r24, 0x00	; 0
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	a5 ef       	ldi	r26, 0xF5	; 245
     45e:	bb e3       	ldi	r27, 0x3B	; 59
     460:	8d 87       	std	Y+13, r24	; 0x0d
     462:	9e 87       	std	Y+14, r25	; 0x0e
     464:	af 87       	std	Y+15, r26	; 0x0f
     466:	b8 8b       	std	Y+16, r27	; 0x10

	setMotorSpeed(50,right);
     468:	60 e0       	ldi	r22, 0x00	; 0
     46a:	82 e3       	ldi	r24, 0x32	; 50
     46c:	0e 94 47 03 	call	0x68e	; 0x68e <setMotorSpeed>
	setMotorSpeed(50,left);
     470:	61 e0       	ldi	r22, 0x01	; 1
     472:	82 e3       	ldi	r24, 0x32	; 50
     474:	0e 94 47 03 	call	0x68e	; 0x68e <setMotorSpeed>
//	unsigned char speed2[20] = "Motor speed: 50\0";
//	unsigned char speed3[20] = "Motor speed: 30\0";
//	unsigned char speed4[20] = "Motor speed: 10\0";

	while(1){
		if(dataReceived){
     478:	80 91 65 01 	lds	r24, 0x0165
     47c:	88 23       	and	r24, r24
     47e:	09 f4       	brne	.+2      	; 0x482 <main+0x68>
     480:	a3 c0       	rjmp	.+326    	; 0x5c8 <main+0x1ae>
			IMU_read_acc(acc_data);
     482:	ce 01       	movw	r24, r28
     484:	41 96       	adiw	r24, 0x11	; 17
     486:	0e 94 fe 00 	call	0x1fc	; 0x1fc <IMU_read_acc>
			IMU_read_gyro(gyro_data);
     48a:	ce 01       	movw	r24, r28
     48c:	47 96       	adiw	r24, 0x17	; 23
     48e:	0e 94 74 01 	call	0x2e8	; 0x2e8 <IMU_read_gyro>

			float angX = (float)gyro_data[0]*gyro_res;
     492:	8f 89       	ldd	r24, Y+23	; 0x17
     494:	98 8d       	ldd	r25, Y+24	; 0x18
     496:	aa 27       	eor	r26, r26
     498:	97 fd       	sbrc	r25, 7
     49a:	a0 95       	com	r26
     49c:	ba 2f       	mov	r27, r26
     49e:	bc 01       	movw	r22, r24
     4a0:	cd 01       	movw	r24, r26
     4a2:	0e 94 16 0b 	call	0x162c	; 0x162c <__floatsisf>
     4a6:	dc 01       	movw	r26, r24
     4a8:	cb 01       	movw	r24, r22
     4aa:	2d 85       	ldd	r18, Y+13	; 0x0d
     4ac:	3e 85       	ldd	r19, Y+14	; 0x0e
     4ae:	4f 85       	ldd	r20, Y+15	; 0x0f
     4b0:	58 89       	ldd	r21, Y+16	; 0x10
     4b2:	bc 01       	movw	r22, r24
     4b4:	cd 01       	movw	r24, r26
     4b6:	0e 94 c6 0b 	call	0x178c	; 0x178c <__mulsf3>
     4ba:	dc 01       	movw	r26, r24
     4bc:	cb 01       	movw	r24, r22
     4be:	89 83       	std	Y+1, r24	; 0x01
     4c0:	9a 83       	std	Y+2, r25	; 0x02
     4c2:	ab 83       	std	Y+3, r26	; 0x03
     4c4:	bc 83       	std	Y+4, r27	; 0x04
			float angY = (float)gyro_data[1]*gyro_res;
     4c6:	89 8d       	ldd	r24, Y+25	; 0x19
     4c8:	9a 8d       	ldd	r25, Y+26	; 0x1a
     4ca:	aa 27       	eor	r26, r26
     4cc:	97 fd       	sbrc	r25, 7
     4ce:	a0 95       	com	r26
     4d0:	ba 2f       	mov	r27, r26
     4d2:	bc 01       	movw	r22, r24
     4d4:	cd 01       	movw	r24, r26
     4d6:	0e 94 16 0b 	call	0x162c	; 0x162c <__floatsisf>
     4da:	dc 01       	movw	r26, r24
     4dc:	cb 01       	movw	r24, r22
     4de:	2d 85       	ldd	r18, Y+13	; 0x0d
     4e0:	3e 85       	ldd	r19, Y+14	; 0x0e
     4e2:	4f 85       	ldd	r20, Y+15	; 0x0f
     4e4:	58 89       	ldd	r21, Y+16	; 0x10
     4e6:	bc 01       	movw	r22, r24
     4e8:	cd 01       	movw	r24, r26
     4ea:	0e 94 c6 0b 	call	0x178c	; 0x178c <__mulsf3>
     4ee:	dc 01       	movw	r26, r24
     4f0:	cb 01       	movw	r24, r22
     4f2:	8d 83       	std	Y+5, r24	; 0x05
     4f4:	9e 83       	std	Y+6, r25	; 0x06
     4f6:	af 83       	std	Y+7, r26	; 0x07
     4f8:	b8 87       	std	Y+8, r27	; 0x08

			if(angX < 0){angX = -angX;}
     4fa:	20 e0       	ldi	r18, 0x00	; 0
     4fc:	30 e0       	ldi	r19, 0x00	; 0
     4fe:	a9 01       	movw	r20, r18
     500:	69 81       	ldd	r22, Y+1	; 0x01
     502:	7a 81       	ldd	r23, Y+2	; 0x02
     504:	8b 81       	ldd	r24, Y+3	; 0x03
     506:	9c 81       	ldd	r25, Y+4	; 0x04
     508:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <__cmpsf2>
     50c:	88 23       	and	r24, r24
     50e:	4c f4       	brge	.+18     	; 0x522 <main+0x108>
     510:	89 81       	ldd	r24, Y+1	; 0x01
     512:	9a 81       	ldd	r25, Y+2	; 0x02
     514:	ab 81       	ldd	r26, Y+3	; 0x03
     516:	bc 81       	ldd	r27, Y+4	; 0x04
     518:	b0 58       	subi	r27, 0x80	; 128
     51a:	89 83       	std	Y+1, r24	; 0x01
     51c:	9a 83       	std	Y+2, r25	; 0x02
     51e:	ab 83       	std	Y+3, r26	; 0x03
     520:	bc 83       	std	Y+4, r27	; 0x04
			if(angY < 0){angY = -angY;}
     522:	20 e0       	ldi	r18, 0x00	; 0
     524:	30 e0       	ldi	r19, 0x00	; 0
     526:	a9 01       	movw	r20, r18
     528:	6d 81       	ldd	r22, Y+5	; 0x05
     52a:	7e 81       	ldd	r23, Y+6	; 0x06
     52c:	8f 81       	ldd	r24, Y+7	; 0x07
     52e:	98 85       	ldd	r25, Y+8	; 0x08
     530:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <__cmpsf2>
     534:	88 23       	and	r24, r24
     536:	4c f4       	brge	.+18     	; 0x54a <main+0x130>
     538:	8d 81       	ldd	r24, Y+5	; 0x05
     53a:	9e 81       	ldd	r25, Y+6	; 0x06
     53c:	af 81       	ldd	r26, Y+7	; 0x07
     53e:	b8 85       	ldd	r27, Y+8	; 0x08
     540:	b0 58       	subi	r27, 0x80	; 128
     542:	8d 83       	std	Y+5, r24	; 0x05
     544:	9e 83       	std	Y+6, r25	; 0x06
     546:	af 83       	std	Y+7, r26	; 0x07
     548:	b8 87       	std	Y+8, r27	; 0x08
			setMotorSpeed((char)((angX/2.0)*255),right);
     54a:	20 e0       	ldi	r18, 0x00	; 0
     54c:	30 e0       	ldi	r19, 0x00	; 0
     54e:	40 e0       	ldi	r20, 0x00	; 0
     550:	50 e4       	ldi	r21, 0x40	; 64
     552:	69 81       	ldd	r22, Y+1	; 0x01
     554:	7a 81       	ldd	r23, Y+2	; 0x02
     556:	8b 81       	ldd	r24, Y+3	; 0x03
     558:	9c 81       	ldd	r25, Y+4	; 0x04
     55a:	0e 94 80 0a 	call	0x1500	; 0x1500 <__divsf3>
     55e:	dc 01       	movw	r26, r24
     560:	cb 01       	movw	r24, r22
     562:	20 e0       	ldi	r18, 0x00	; 0
     564:	30 e0       	ldi	r19, 0x00	; 0
     566:	4f e7       	ldi	r20, 0x7F	; 127
     568:	53 e4       	ldi	r21, 0x43	; 67
     56a:	bc 01       	movw	r22, r24
     56c:	cd 01       	movw	r24, r26
     56e:	0e 94 c6 0b 	call	0x178c	; 0x178c <__mulsf3>
     572:	dc 01       	movw	r26, r24
     574:	cb 01       	movw	r24, r22
     576:	bc 01       	movw	r22, r24
     578:	cd 01       	movw	r24, r26
     57a:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <__fixunssfsi>
     57e:	dc 01       	movw	r26, r24
     580:	cb 01       	movw	r24, r22
     582:	60 e0       	ldi	r22, 0x00	; 0
     584:	0e 94 47 03 	call	0x68e	; 0x68e <setMotorSpeed>
			setMotorSpeed((char)((angY/2.0)*255),left);
     588:	20 e0       	ldi	r18, 0x00	; 0
     58a:	30 e0       	ldi	r19, 0x00	; 0
     58c:	40 e0       	ldi	r20, 0x00	; 0
     58e:	50 e4       	ldi	r21, 0x40	; 64
     590:	6d 81       	ldd	r22, Y+5	; 0x05
     592:	7e 81       	ldd	r23, Y+6	; 0x06
     594:	8f 81       	ldd	r24, Y+7	; 0x07
     596:	98 85       	ldd	r25, Y+8	; 0x08
     598:	0e 94 80 0a 	call	0x1500	; 0x1500 <__divsf3>
     59c:	dc 01       	movw	r26, r24
     59e:	cb 01       	movw	r24, r22
     5a0:	20 e0       	ldi	r18, 0x00	; 0
     5a2:	30 e0       	ldi	r19, 0x00	; 0
     5a4:	4f e7       	ldi	r20, 0x7F	; 127
     5a6:	53 e4       	ldi	r21, 0x43	; 67
     5a8:	bc 01       	movw	r22, r24
     5aa:	cd 01       	movw	r24, r26
     5ac:	0e 94 c6 0b 	call	0x178c	; 0x178c <__mulsf3>
     5b0:	dc 01       	movw	r26, r24
     5b2:	cb 01       	movw	r24, r22
     5b4:	bc 01       	movw	r22, r24
     5b6:	cd 01       	movw	r24, r26
     5b8:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <__fixunssfsi>
     5bc:	dc 01       	movw	r26, r24
     5be:	cb 01       	movw	r24, r22
     5c0:	61 e0       	ldi	r22, 0x01	; 1
     5c2:	0e 94 47 03 	call	0x68e	; 0x68e <setMotorSpeed>
		}
	}
     5c6:	58 cf       	rjmp	.-336    	; 0x478 <main+0x5e>
     5c8:	57 cf       	rjmp	.-338    	; 0x478 <main+0x5e>

000005ca <motorInit>:

unsigned char motorPin;
unsigned char clockInitFlag = 0;


void motorInit(char pin){
     5ca:	cf 93       	push	r28
     5cc:	df 93       	push	r29
     5ce:	1f 92       	push	r1
     5d0:	cd b7       	in	r28, 0x3d	; 61
     5d2:	de b7       	in	r29, 0x3e	; 62
     5d4:	89 83       	std	Y+1, r24	; 0x01
	motorPin = ( 1 << pin);
     5d6:	89 81       	ldd	r24, Y+1	; 0x01
     5d8:	28 2f       	mov	r18, r24
     5da:	30 e0       	ldi	r19, 0x00	; 0
     5dc:	81 e0       	ldi	r24, 0x01	; 1
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <motorInit+0x1c>
     5e2:	88 0f       	add	r24, r24
     5e4:	99 1f       	adc	r25, r25
     5e6:	2a 95       	dec	r18
     5e8:	e2 f7       	brpl	.-8      	; 0x5e2 <motorInit+0x18>
     5ea:	80 93 67 01 	sts	0x0167, r24
	DDRD |= motorPin;
     5ee:	8a e2       	ldi	r24, 0x2A	; 42
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	2a e2       	ldi	r18, 0x2A	; 42
     5f4:	30 e0       	ldi	r19, 0x00	; 0
     5f6:	f9 01       	movw	r30, r18
     5f8:	30 81       	ld	r19, Z
     5fa:	20 91 67 01 	lds	r18, 0x0167
     5fe:	23 2b       	or	r18, r19
     600:	fc 01       	movw	r30, r24
     602:	20 83       	st	Z, r18
	if (!clockInitFlag){
     604:	80 91 64 01 	lds	r24, 0x0164
     608:	88 23       	and	r24, r24
     60a:	11 f4       	brne	.+4      	; 0x610 <motorInit+0x46>
		clock_init();
     60c:	0e 94 0c 03 	call	0x618	; 0x618 <clock_init>
	}
}
     610:	0f 90       	pop	r0
     612:	df 91       	pop	r29
     614:	cf 91       	pop	r28
     616:	08 95       	ret

00000618 <clock_init>:


void clock_init(){
     618:	cf 93       	push	r28
     61a:	df 93       	push	r29
     61c:	cd b7       	in	r28, 0x3d	; 61
     61e:	de b7       	in	r29, 0x3e	; 62
     620:	64 97       	sbiw	r28, 0x14	; 20
     622:	0f b6       	in	r0, 0x3f	; 63
     624:	f8 94       	cli
     626:	de bf       	out	0x3e, r29	; 62
     628:	0f be       	out	0x3f, r0	; 63
     62a:	cd bf       	out	0x3d, r28	; 61
	unsigned char message[20] = "Clock init\0";
     62c:	2c e0       	ldi	r18, 0x0C	; 12
     62e:	ea e0       	ldi	r30, 0x0A	; 10
     630:	f1 e0       	ldi	r31, 0x01	; 1
     632:	ce 01       	movw	r24, r28
     634:	01 96       	adiw	r24, 0x01	; 1
     636:	dc 01       	movw	r26, r24
     638:	01 90       	ld	r0, Z+
     63a:	0d 92       	st	X+, r0
     63c:	2a 95       	dec	r18
     63e:	e1 f7       	brne	.-8      	; 0x638 <clock_init+0x20>
     640:	28 e0       	ldi	r18, 0x08	; 8
     642:	ce 01       	movw	r24, r28
     644:	0d 96       	adiw	r24, 0x0d	; 13
     646:	fc 01       	movw	r30, r24
     648:	32 2f       	mov	r19, r18
     64a:	11 92       	st	Z+, r1
     64c:	3a 95       	dec	r19
     64e:	e9 f7       	brne	.-6      	; 0x64a <clock_init+0x32>
	myPrintNL(message,20);
     650:	64 e1       	ldi	r22, 0x14	; 20
     652:	ce 01       	movw	r24, r28
     654:	01 96       	adiw	r24, 0x01	; 1
     656:	0e 94 0b 09 	call	0x1216	; 0x1216 <myPrintNL>
	// fastPWM mode, set OC0A and OC0B on compare match and clear at bottom
	TCCR0A = ( 1 << COM0A1 ) | ( 1 << COM0A0 ) | ( 1 << COM0B1 ) | ( 1 << COM0B0 ) | ( 1 << WGM01 ) | ( 1 << WGM00 );
     65a:	84 e4       	ldi	r24, 0x44	; 68
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	23 ef       	ldi	r18, 0xF3	; 243
     660:	fc 01       	movw	r30, r24
     662:	20 83       	st	Z, r18
	// Initialize a timer with no prescaling
	TCCR0B =  ( 1 << CS00 );
     664:	85 e4       	ldi	r24, 0x45	; 69
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	21 e0       	ldi	r18, 0x01	; 1
     66a:	fc 01       	movw	r30, r24
     66c:	20 83       	st	Z, r18
	// Initialize the counter at 0
	TCNT0 = 0;
     66e:	86 e4       	ldi	r24, 0x46	; 70
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	fc 01       	movw	r30, r24
     674:	10 82       	st	Z, r1
	/*// Enable Output Compare Match and Overflow interrupts
	TIMSK0 = ( 1 << OCIE0B ) | ( 1 << TOIE0 );
	// Clearing interrupt flags (writing 1 to them => clearing)
	TIFR0 = ( 1 << OCF0B ) | ( 1 << TOV0 );
	*/
	clockInitFlag = 1;
     676:	81 e0       	ldi	r24, 0x01	; 1
     678:	80 93 64 01 	sts	0x0164, r24
}
     67c:	64 96       	adiw	r28, 0x14	; 20
     67e:	0f b6       	in	r0, 0x3f	; 63
     680:	f8 94       	cli
     682:	de bf       	out	0x3e, r29	; 62
     684:	0f be       	out	0x3f, r0	; 63
     686:	cd bf       	out	0x3d, r28	; 61
     688:	df 91       	pop	r29
     68a:	cf 91       	pop	r28
     68c:	08 95       	ret

0000068e <setMotorSpeed>:

void setMotorSpeed(unsigned char intensity, enum motorID motor){
     68e:	cf 93       	push	r28
     690:	df 93       	push	r29
     692:	cd b7       	in	r28, 0x3d	; 61
     694:	de b7       	in	r29, 0x3e	; 62
     696:	6a 97       	sbiw	r28, 0x1a	; 26
     698:	0f b6       	in	r0, 0x3f	; 63
     69a:	f8 94       	cli
     69c:	de bf       	out	0x3e, r29	; 62
     69e:	0f be       	out	0x3f, r0	; 63
     6a0:	cd bf       	out	0x3d, r28	; 61
     6a2:	8d 8b       	std	Y+21, r24	; 0x15
     6a4:	6e 8b       	std	Y+22, r22	; 0x16
	unsigned char message[20] = "Set speed\0";
     6a6:	2b e0       	ldi	r18, 0x0B	; 11
     6a8:	ee e1       	ldi	r30, 0x1E	; 30
     6aa:	f1 e0       	ldi	r31, 0x01	; 1
     6ac:	ce 01       	movw	r24, r28
     6ae:	01 96       	adiw	r24, 0x01	; 1
     6b0:	dc 01       	movw	r26, r24
     6b2:	01 90       	ld	r0, Z+
     6b4:	0d 92       	st	X+, r0
     6b6:	2a 95       	dec	r18
     6b8:	e1 f7       	brne	.-8      	; 0x6b2 <setMotorSpeed+0x24>
     6ba:	29 e0       	ldi	r18, 0x09	; 9
     6bc:	ce 01       	movw	r24, r28
     6be:	0c 96       	adiw	r24, 0x0c	; 12
     6c0:	fc 01       	movw	r30, r24
     6c2:	32 2f       	mov	r19, r18
     6c4:	11 92       	st	Z+, r1
     6c6:	3a 95       	dec	r19
     6c8:	e9 f7       	brne	.-6      	; 0x6c4 <setMotorSpeed+0x36>
	myPrintNL(message,20);
     6ca:	64 e1       	ldi	r22, 0x14	; 20
     6cc:	ce 01       	movw	r24, r28
     6ce:	01 96       	adiw	r24, 0x01	; 1
     6d0:	0e 94 0b 09 	call	0x1216	; 0x1216 <myPrintNL>
	if (intensity > 100){intensity = 100;};
     6d4:	8d 89       	ldd	r24, Y+21	; 0x15
     6d6:	85 36       	cpi	r24, 0x65	; 101
     6d8:	10 f0       	brcs	.+4      	; 0x6de <setMotorSpeed+0x50>
     6da:	84 e6       	ldi	r24, 0x64	; 100
     6dc:	8d 8b       	std	Y+21, r24	; 0x15
	if (intensity < 0){intensity = 0;};
	if (motor == right){
     6de:	8e 89       	ldd	r24, Y+22	; 0x16
     6e0:	88 23       	and	r24, r24
     6e2:	c1 f4       	brne	.+48     	; 0x714 <setMotorSpeed+0x86>
		OCR0B = ((100 - intensity)*255)/100;
     6e4:	28 e4       	ldi	r18, 0x48	; 72
     6e6:	30 e0       	ldi	r19, 0x00	; 0
     6e8:	8d 89       	ldd	r24, Y+21	; 0x15
     6ea:	88 2f       	mov	r24, r24
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	44 e6       	ldi	r20, 0x64	; 100
     6f0:	50 e0       	ldi	r21, 0x00	; 0
     6f2:	48 1b       	sub	r20, r24
     6f4:	59 0b       	sbc	r21, r25
     6f6:	6f ef       	ldi	r22, 0xFF	; 255
     6f8:	64 9f       	mul	r22, r20
     6fa:	c0 01       	movw	r24, r0
     6fc:	65 9f       	mul	r22, r21
     6fe:	90 0d       	add	r25, r0
     700:	11 24       	eor	r1, r1
     702:	44 e6       	ldi	r20, 0x64	; 100
     704:	50 e0       	ldi	r21, 0x00	; 0
     706:	ba 01       	movw	r22, r20
     708:	0e 94 04 0a 	call	0x1408	; 0x1408 <__divmodhi4>
     70c:	cb 01       	movw	r24, r22
     70e:	f9 01       	movw	r30, r18
     710:	80 83       	st	Z, r24
     712:	1a c0       	rjmp	.+52     	; 0x748 <setMotorSpeed+0xba>
	}
	else if (motor == left){
     714:	8e 89       	ldd	r24, Y+22	; 0x16
     716:	81 30       	cpi	r24, 0x01	; 1
     718:	b9 f4       	brne	.+46     	; 0x748 <setMotorSpeed+0xba>
		OCR0A = ((100 - intensity)*255)/100;
     71a:	27 e4       	ldi	r18, 0x47	; 71
     71c:	30 e0       	ldi	r19, 0x00	; 0
     71e:	8d 89       	ldd	r24, Y+21	; 0x15
     720:	88 2f       	mov	r24, r24
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	44 e6       	ldi	r20, 0x64	; 100
     726:	50 e0       	ldi	r21, 0x00	; 0
     728:	48 1b       	sub	r20, r24
     72a:	59 0b       	sbc	r21, r25
     72c:	6f ef       	ldi	r22, 0xFF	; 255
     72e:	64 9f       	mul	r22, r20
     730:	c0 01       	movw	r24, r0
     732:	65 9f       	mul	r22, r21
     734:	90 0d       	add	r25, r0
     736:	11 24       	eor	r1, r1
     738:	44 e6       	ldi	r20, 0x64	; 100
     73a:	50 e0       	ldi	r21, 0x00	; 0
     73c:	ba 01       	movw	r22, r20
     73e:	0e 94 04 0a 	call	0x1408	; 0x1408 <__divmodhi4>
     742:	cb 01       	movw	r24, r22
     744:	f9 01       	movw	r30, r18
     746:	80 83       	st	Z, r24
	}

}
     748:	6a 96       	adiw	r28, 0x1a	; 26
     74a:	0f b6       	in	r0, 0x3f	; 63
     74c:	f8 94       	cli
     74e:	de bf       	out	0x3e, r29	; 62
     750:	0f be       	out	0x3f, r0	; 63
     752:	cd bf       	out	0x3d, r28	; 61
     754:	df 91       	pop	r29
     756:	cf 91       	pop	r28
     758:	08 95       	ret

0000075a <USART_Transmit>:
#define convert2ASCII_hex(byte){	\
	if(byte <= 0x09){byte += 0x30;}			\
	else if(byte <= 0x0F){byte += 0x37;};	\
}

void USART_Transmit(unsigned char data){
     75a:	cf 93       	push	r28
     75c:	df 93       	push	r29
     75e:	1f 92       	push	r1
     760:	cd b7       	in	r28, 0x3d	; 61
     762:	de b7       	in	r29, 0x3e	; 62
     764:	89 83       	std	Y+1, r24	; 0x01
	/* While the transmit buffer is not empty (UDRE0 flag in UCSR0A)	*/
	while( !(UCSR0A & (1 << UDRE0)) ){};
     766:	00 00       	nop
     768:	80 ec       	ldi	r24, 0xC0	; 192
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	fc 01       	movw	r30, r24
     76e:	80 81       	ld	r24, Z
     770:	88 2f       	mov	r24, r24
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	80 72       	andi	r24, 0x20	; 32
     776:	99 27       	eor	r25, r25
     778:	00 97       	sbiw	r24, 0x00	; 0
     77a:	b1 f3       	breq	.-20     	; 0x768 <USART_Transmit+0xe>
	/* Write the data into the USART Data I/O register	*/
	UDR0 = data;
     77c:	86 ec       	ldi	r24, 0xC6	; 198
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	29 81       	ldd	r18, Y+1	; 0x01
     782:	fc 01       	movw	r30, r24
     784:	20 83       	st	Z, r18
}
     786:	0f 90       	pop	r0
     788:	df 91       	pop	r29
     78a:	cf 91       	pop	r28
     78c:	08 95       	ret

0000078e <USART_init>:


void USART_init(unsigned int br){
     78e:	cf 93       	push	r28
     790:	df 93       	push	r29
     792:	cd b7       	in	r28, 0x3d	; 61
     794:	de b7       	in	r29, 0x3e	; 62
     796:	28 97       	sbiw	r28, 0x08	; 8
     798:	0f b6       	in	r0, 0x3f	; 63
     79a:	f8 94       	cli
     79c:	de bf       	out	0x3e, r29	; 62
     79e:	0f be       	out	0x3f, r0	; 63
     7a0:	cd bf       	out	0x3d, r28	; 61
     7a2:	9c 83       	std	Y+4, r25	; 0x04
     7a4:	8b 83       	std	Y+3, r24	; 0x03
	unsigned int ubrr = 16000000/16/br - 1;
     7a6:	8b 81       	ldd	r24, Y+3	; 0x03
     7a8:	9c 81       	ldd	r25, Y+4	; 0x04
     7aa:	9c 01       	movw	r18, r24
     7ac:	40 e0       	ldi	r20, 0x00	; 0
     7ae:	50 e0       	ldi	r21, 0x00	; 0
     7b0:	80 e4       	ldi	r24, 0x40	; 64
     7b2:	92 e4       	ldi	r25, 0x42	; 66
     7b4:	af e0       	ldi	r26, 0x0F	; 15
     7b6:	b0 e0       	ldi	r27, 0x00	; 0
     7b8:	bc 01       	movw	r22, r24
     7ba:	cd 01       	movw	r24, r26
     7bc:	0e 94 18 0a 	call	0x1430	; 0x1430 <__divmodsi4>
     7c0:	da 01       	movw	r26, r20
     7c2:	c9 01       	movw	r24, r18
     7c4:	01 97       	sbiw	r24, 0x01	; 1
     7c6:	9a 83       	std	Y+2, r25	; 0x02
     7c8:	89 83       	std	Y+1, r24	; 0x01
	// Settin Baud Rate to br
	UBRR0H = (unsigned char) (ubrr >> 8);
     7ca:	85 ec       	ldi	r24, 0xC5	; 197
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	29 81       	ldd	r18, Y+1	; 0x01
     7d0:	3a 81       	ldd	r19, Y+2	; 0x02
     7d2:	23 2f       	mov	r18, r19
     7d4:	33 27       	eor	r19, r19
     7d6:	fc 01       	movw	r30, r24
     7d8:	20 83       	st	Z, r18
	UBRR0L = (unsigned char) ubrr;
     7da:	84 ec       	ldi	r24, 0xC4	; 196
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	29 81       	ldd	r18, Y+1	; 0x01
     7e0:	fc 01       	movw	r30, r24
     7e2:	20 83       	st	Z, r18

	// Enabling Receive (RXEN0) and transmit (TXEN0) and
	// the RX Complete Interrupt in the USART
	//Control and Status Register 0B
	UCSR0B = (1 << RXEN0) | ( 1 << TXEN0 ) | ( 1 << RXCIE0);
     7e4:	81 ec       	ldi	r24, 0xC1	; 193
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	28 e9       	ldi	r18, 0x98	; 152
     7ea:	fc 01       	movw	r30, r24
     7ec:	20 83       	st	Z, r18

	// Setting frame format:
			// 2 stop bits		8 bit
	UCSR0C = (1 << USBS0) | (3 << UCSZ00);
     7ee:	82 ec       	ldi	r24, 0xC2	; 194
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	2e e0       	ldi	r18, 0x0E	; 14
     7f4:	fc 01       	movw	r30, r24
     7f6:	20 83       	st	Z, r18
}
     7f8:	28 96       	adiw	r28, 0x08	; 8
     7fa:	0f b6       	in	r0, 0x3f	; 63
     7fc:	f8 94       	cli
     7fe:	de bf       	out	0x3e, r29	; 62
     800:	0f be       	out	0x3f, r0	; 63
     802:	cd bf       	out	0x3d, r28	; 61
     804:	df 91       	pop	r29
     806:	cf 91       	pop	r28
     808:	08 95       	ret

0000080a <USART_Transmit_32_hex>:


void USART_Transmit_32_hex(long data32bit){
     80a:	cf 93       	push	r28
     80c:	df 93       	push	r29
     80e:	cd b7       	in	r28, 0x3d	; 61
     810:	de b7       	in	r29, 0x3e	; 62
     812:	60 97       	sbiw	r28, 0x10	; 16
     814:	0f b6       	in	r0, 0x3f	; 63
     816:	f8 94       	cli
     818:	de bf       	out	0x3e, r29	; 62
     81a:	0f be       	out	0x3f, r0	; 63
     81c:	cd bf       	out	0x3d, r28	; 61
     81e:	6d 87       	std	Y+13, r22	; 0x0d
     820:	7e 87       	std	Y+14, r23	; 0x0e
     822:	8f 87       	std	Y+15, r24	; 0x0f
     824:	98 8b       	std	Y+16, r25	; 0x10
	unsigned char N[8];
	unsigned char *ptr = &N[0];
     826:	ce 01       	movw	r24, r28
     828:	05 96       	adiw	r24, 0x05	; 5
     82a:	9a 83       	std	Y+2, r25	; 0x02
     82c:	89 83       	std	Y+1, r24	; 0x01
	for (uint8_t i = 0; i < 8; i++){
     82e:	1b 82       	std	Y+3, r1	; 0x03
     830:	21 c0       	rjmp	.+66     	; 0x874 <USART_Transmit_32_hex+0x6a>
		N[i] = ((data32bit >> 4*i) & 0xF);
     832:	8b 81       	ldd	r24, Y+3	; 0x03
     834:	28 2f       	mov	r18, r24
     836:	30 e0       	ldi	r19, 0x00	; 0
     838:	8b 81       	ldd	r24, Y+3	; 0x03
     83a:	88 2f       	mov	r24, r24
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	ac 01       	movw	r20, r24
     840:	44 0f       	add	r20, r20
     842:	55 1f       	adc	r21, r21
     844:	44 0f       	add	r20, r20
     846:	55 1f       	adc	r21, r21
     848:	8d 85       	ldd	r24, Y+13	; 0x0d
     84a:	9e 85       	ldd	r25, Y+14	; 0x0e
     84c:	af 85       	ldd	r26, Y+15	; 0x0f
     84e:	b8 89       	ldd	r27, Y+16	; 0x10
     850:	04 c0       	rjmp	.+8      	; 0x85a <USART_Transmit_32_hex+0x50>
     852:	b5 95       	asr	r27
     854:	a7 95       	ror	r26
     856:	97 95       	ror	r25
     858:	87 95       	ror	r24
     85a:	4a 95       	dec	r20
     85c:	d2 f7       	brpl	.-12     	; 0x852 <USART_Transmit_32_hex+0x48>
     85e:	48 2f       	mov	r20, r24
     860:	4f 70       	andi	r20, 0x0F	; 15
     862:	ce 01       	movw	r24, r28
     864:	05 96       	adiw	r24, 0x05	; 5
     866:	82 0f       	add	r24, r18
     868:	93 1f       	adc	r25, r19
     86a:	fc 01       	movw	r30, r24
     86c:	40 83       	st	Z, r20


void USART_Transmit_32_hex(long data32bit){
	unsigned char N[8];
	unsigned char *ptr = &N[0];
	for (uint8_t i = 0; i < 8; i++){
     86e:	8b 81       	ldd	r24, Y+3	; 0x03
     870:	8f 5f       	subi	r24, 0xFF	; 255
     872:	8b 83       	std	Y+3, r24	; 0x03
     874:	8b 81       	ldd	r24, Y+3	; 0x03
     876:	88 30       	cpi	r24, 0x08	; 8
     878:	e0 f2       	brcs	.-72     	; 0x832 <USART_Transmit_32_hex+0x28>
		N[i] = ((data32bit >> 4*i) & 0xF);
	}
	for (unsigned char i = 0; i < 8; i++){
     87a:	1c 82       	std	Y+4, r1	; 0x04
     87c:	36 c0       	rjmp	.+108    	; 0x8ea <USART_Transmit_32_hex+0xe0>
		convert2ASCII_hex(*(ptr+7))	// The MSN is last in the memory so we loop backwards
     87e:	89 81       	ldd	r24, Y+1	; 0x01
     880:	9a 81       	ldd	r25, Y+2	; 0x02
     882:	07 96       	adiw	r24, 0x07	; 7
     884:	fc 01       	movw	r30, r24
     886:	80 81       	ld	r24, Z
     888:	8a 30       	cpi	r24, 0x0A	; 10
     88a:	68 f4       	brcc	.+26     	; 0x8a6 <USART_Transmit_32_hex+0x9c>
     88c:	89 81       	ldd	r24, Y+1	; 0x01
     88e:	9a 81       	ldd	r25, Y+2	; 0x02
     890:	07 96       	adiw	r24, 0x07	; 7
     892:	29 81       	ldd	r18, Y+1	; 0x01
     894:	3a 81       	ldd	r19, Y+2	; 0x02
     896:	29 5f       	subi	r18, 0xF9	; 249
     898:	3f 4f       	sbci	r19, 0xFF	; 255
     89a:	f9 01       	movw	r30, r18
     89c:	20 81       	ld	r18, Z
     89e:	20 5d       	subi	r18, 0xD0	; 208
     8a0:	fc 01       	movw	r30, r24
     8a2:	20 83       	st	Z, r18
     8a4:	13 c0       	rjmp	.+38     	; 0x8cc <USART_Transmit_32_hex+0xc2>
     8a6:	89 81       	ldd	r24, Y+1	; 0x01
     8a8:	9a 81       	ldd	r25, Y+2	; 0x02
     8aa:	07 96       	adiw	r24, 0x07	; 7
     8ac:	fc 01       	movw	r30, r24
     8ae:	80 81       	ld	r24, Z
     8b0:	80 31       	cpi	r24, 0x10	; 16
     8b2:	60 f4       	brcc	.+24     	; 0x8cc <USART_Transmit_32_hex+0xc2>
     8b4:	89 81       	ldd	r24, Y+1	; 0x01
     8b6:	9a 81       	ldd	r25, Y+2	; 0x02
     8b8:	07 96       	adiw	r24, 0x07	; 7
     8ba:	29 81       	ldd	r18, Y+1	; 0x01
     8bc:	3a 81       	ldd	r19, Y+2	; 0x02
     8be:	29 5f       	subi	r18, 0xF9	; 249
     8c0:	3f 4f       	sbci	r19, 0xFF	; 255
     8c2:	f9 01       	movw	r30, r18
     8c4:	20 81       	ld	r18, Z
     8c6:	29 5c       	subi	r18, 0xC9	; 201
     8c8:	fc 01       	movw	r30, r24
     8ca:	20 83       	st	Z, r18
		USART_Transmit(*(ptr+7));
     8cc:	89 81       	ldd	r24, Y+1	; 0x01
     8ce:	9a 81       	ldd	r25, Y+2	; 0x02
     8d0:	07 96       	adiw	r24, 0x07	; 7
     8d2:	fc 01       	movw	r30, r24
     8d4:	80 81       	ld	r24, Z
     8d6:	0e 94 ad 03 	call	0x75a	; 0x75a <USART_Transmit>
		ptr--;
     8da:	89 81       	ldd	r24, Y+1	; 0x01
     8dc:	9a 81       	ldd	r25, Y+2	; 0x02
     8de:	01 97       	sbiw	r24, 0x01	; 1
     8e0:	9a 83       	std	Y+2, r25	; 0x02
     8e2:	89 83       	std	Y+1, r24	; 0x01
	unsigned char N[8];
	unsigned char *ptr = &N[0];
	for (uint8_t i = 0; i < 8; i++){
		N[i] = ((data32bit >> 4*i) & 0xF);
	}
	for (unsigned char i = 0; i < 8; i++){
     8e4:	8c 81       	ldd	r24, Y+4	; 0x04
     8e6:	8f 5f       	subi	r24, 0xFF	; 255
     8e8:	8c 83       	std	Y+4, r24	; 0x04
     8ea:	8c 81       	ldd	r24, Y+4	; 0x04
     8ec:	88 30       	cpi	r24, 0x08	; 8
     8ee:	38 f2       	brcs	.-114    	; 0x87e <USART_Transmit_32_hex+0x74>
		convert2ASCII_hex(*(ptr+7))	// The MSN is last in the memory so we loop backwards
		USART_Transmit(*(ptr+7));
		ptr--;
	}
	USART_Transmit(0x0A);
     8f0:	8a e0       	ldi	r24, 0x0A	; 10
     8f2:	0e 94 ad 03 	call	0x75a	; 0x75a <USART_Transmit>
}
     8f6:	60 96       	adiw	r28, 0x10	; 16
     8f8:	0f b6       	in	r0, 0x3f	; 63
     8fa:	f8 94       	cli
     8fc:	de bf       	out	0x3e, r29	; 62
     8fe:	0f be       	out	0x3f, r0	; 63
     900:	cd bf       	out	0x3d, r28	; 61
     902:	df 91       	pop	r29
     904:	cf 91       	pop	r28
     906:	08 95       	ret

00000908 <USART_Transmit_16_hex>:


void USART_Transmit_16_hex(int data16bit){
     908:	cf 93       	push	r28
     90a:	df 93       	push	r29
     90c:	00 d0       	rcall	.+0      	; 0x90e <USART_Transmit_16_hex+0x6>
     90e:	00 d0       	rcall	.+0      	; 0x910 <USART_Transmit_16_hex+0x8>
     910:	00 d0       	rcall	.+0      	; 0x912 <USART_Transmit_16_hex+0xa>
     912:	cd b7       	in	r28, 0x3d	; 61
     914:	de b7       	in	r29, 0x3e	; 62
     916:	9e 83       	std	Y+6, r25	; 0x06
     918:	8d 83       	std	Y+5, r24	; 0x05
	unsigned char N_1 = (data16bit & 0x000F);
     91a:	8d 81       	ldd	r24, Y+5	; 0x05
     91c:	8f 70       	andi	r24, 0x0F	; 15
     91e:	89 83       	std	Y+1, r24	; 0x01
	unsigned char N_2 = ((data16bit >> 4 ) & 0x000F);
     920:	8d 81       	ldd	r24, Y+5	; 0x05
     922:	9e 81       	ldd	r25, Y+6	; 0x06
     924:	95 95       	asr	r25
     926:	87 95       	ror	r24
     928:	95 95       	asr	r25
     92a:	87 95       	ror	r24
     92c:	95 95       	asr	r25
     92e:	87 95       	ror	r24
     930:	95 95       	asr	r25
     932:	87 95       	ror	r24
     934:	8f 70       	andi	r24, 0x0F	; 15
     936:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char N_3 = ((data16bit >> 8 ) & 0x000F);
     938:	8d 81       	ldd	r24, Y+5	; 0x05
     93a:	9e 81       	ldd	r25, Y+6	; 0x06
     93c:	89 2f       	mov	r24, r25
     93e:	99 0f       	add	r25, r25
     940:	99 0b       	sbc	r25, r25
     942:	8f 70       	andi	r24, 0x0F	; 15
     944:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char N_4 = ((data16bit >> 12 ) & 0x000F);
     946:	8d 81       	ldd	r24, Y+5	; 0x05
     948:	9e 81       	ldd	r25, Y+6	; 0x06
     94a:	89 2f       	mov	r24, r25
     94c:	99 27       	eor	r25, r25
     94e:	82 95       	swap	r24
     950:	8f 70       	andi	r24, 0x0F	; 15
     952:	8c 83       	std	Y+4, r24	; 0x04

	convert2ASCII_hex(N_1);
     954:	89 81       	ldd	r24, Y+1	; 0x01
     956:	8a 30       	cpi	r24, 0x0A	; 10
     958:	20 f4       	brcc	.+8      	; 0x962 <USART_Transmit_16_hex+0x5a>
     95a:	89 81       	ldd	r24, Y+1	; 0x01
     95c:	80 5d       	subi	r24, 0xD0	; 208
     95e:	89 83       	std	Y+1, r24	; 0x01
     960:	06 c0       	rjmp	.+12     	; 0x96e <USART_Transmit_16_hex+0x66>
     962:	89 81       	ldd	r24, Y+1	; 0x01
     964:	80 31       	cpi	r24, 0x10	; 16
     966:	18 f4       	brcc	.+6      	; 0x96e <USART_Transmit_16_hex+0x66>
     968:	89 81       	ldd	r24, Y+1	; 0x01
     96a:	89 5c       	subi	r24, 0xC9	; 201
     96c:	89 83       	std	Y+1, r24	; 0x01
	convert2ASCII_hex(N_2);
     96e:	8a 81       	ldd	r24, Y+2	; 0x02
     970:	8a 30       	cpi	r24, 0x0A	; 10
     972:	20 f4       	brcc	.+8      	; 0x97c <USART_Transmit_16_hex+0x74>
     974:	8a 81       	ldd	r24, Y+2	; 0x02
     976:	80 5d       	subi	r24, 0xD0	; 208
     978:	8a 83       	std	Y+2, r24	; 0x02
     97a:	06 c0       	rjmp	.+12     	; 0x988 <USART_Transmit_16_hex+0x80>
     97c:	8a 81       	ldd	r24, Y+2	; 0x02
     97e:	80 31       	cpi	r24, 0x10	; 16
     980:	18 f4       	brcc	.+6      	; 0x988 <USART_Transmit_16_hex+0x80>
     982:	8a 81       	ldd	r24, Y+2	; 0x02
     984:	89 5c       	subi	r24, 0xC9	; 201
     986:	8a 83       	std	Y+2, r24	; 0x02
	convert2ASCII_hex(N_3);
     988:	8b 81       	ldd	r24, Y+3	; 0x03
     98a:	8a 30       	cpi	r24, 0x0A	; 10
     98c:	20 f4       	brcc	.+8      	; 0x996 <USART_Transmit_16_hex+0x8e>
     98e:	8b 81       	ldd	r24, Y+3	; 0x03
     990:	80 5d       	subi	r24, 0xD0	; 208
     992:	8b 83       	std	Y+3, r24	; 0x03
     994:	06 c0       	rjmp	.+12     	; 0x9a2 <USART_Transmit_16_hex+0x9a>
     996:	8b 81       	ldd	r24, Y+3	; 0x03
     998:	80 31       	cpi	r24, 0x10	; 16
     99a:	18 f4       	brcc	.+6      	; 0x9a2 <USART_Transmit_16_hex+0x9a>
     99c:	8b 81       	ldd	r24, Y+3	; 0x03
     99e:	89 5c       	subi	r24, 0xC9	; 201
     9a0:	8b 83       	std	Y+3, r24	; 0x03
	convert2ASCII_hex(N_4);
     9a2:	8c 81       	ldd	r24, Y+4	; 0x04
     9a4:	8a 30       	cpi	r24, 0x0A	; 10
     9a6:	20 f4       	brcc	.+8      	; 0x9b0 <USART_Transmit_16_hex+0xa8>
     9a8:	8c 81       	ldd	r24, Y+4	; 0x04
     9aa:	80 5d       	subi	r24, 0xD0	; 208
     9ac:	8c 83       	std	Y+4, r24	; 0x04
     9ae:	06 c0       	rjmp	.+12     	; 0x9bc <USART_Transmit_16_hex+0xb4>
     9b0:	8c 81       	ldd	r24, Y+4	; 0x04
     9b2:	80 31       	cpi	r24, 0x10	; 16
     9b4:	18 f4       	brcc	.+6      	; 0x9bc <USART_Transmit_16_hex+0xb4>
     9b6:	8c 81       	ldd	r24, Y+4	; 0x04
     9b8:	89 5c       	subi	r24, 0xC9	; 201
     9ba:	8c 83       	std	Y+4, r24	; 0x04

	USART_Transmit('0');
     9bc:	80 e3       	ldi	r24, 0x30	; 48
     9be:	0e 94 ad 03 	call	0x75a	; 0x75a <USART_Transmit>
	USART_Transmit('x');
     9c2:	88 e7       	ldi	r24, 0x78	; 120
     9c4:	0e 94 ad 03 	call	0x75a	; 0x75a <USART_Transmit>

	USART_Transmit(N_4);
     9c8:	8c 81       	ldd	r24, Y+4	; 0x04
     9ca:	0e 94 ad 03 	call	0x75a	; 0x75a <USART_Transmit>
	USART_Transmit(N_3);
     9ce:	8b 81       	ldd	r24, Y+3	; 0x03
     9d0:	0e 94 ad 03 	call	0x75a	; 0x75a <USART_Transmit>
	USART_Transmit(N_2);
     9d4:	8a 81       	ldd	r24, Y+2	; 0x02
     9d6:	0e 94 ad 03 	call	0x75a	; 0x75a <USART_Transmit>
	USART_Transmit(N_1);
     9da:	89 81       	ldd	r24, Y+1	; 0x01
     9dc:	0e 94 ad 03 	call	0x75a	; 0x75a <USART_Transmit>
	USART_Transmit(0x0A);
     9e0:	8a e0       	ldi	r24, 0x0A	; 10
     9e2:	0e 94 ad 03 	call	0x75a	; 0x75a <USART_Transmit>
}
     9e6:	26 96       	adiw	r28, 0x06	; 6
     9e8:	0f b6       	in	r0, 0x3f	; 63
     9ea:	f8 94       	cli
     9ec:	de bf       	out	0x3e, r29	; 62
     9ee:	0f be       	out	0x3f, r0	; 63
     9f0:	cd bf       	out	0x3d, r28	; 61
     9f2:	df 91       	pop	r29
     9f4:	cf 91       	pop	r28
     9f6:	08 95       	ret

000009f8 <USART_Transmit_8_hex>:



void USART_Transmit_8_hex(unsigned char byte){
     9f8:	cf 93       	push	r28
     9fa:	df 93       	push	r29
     9fc:	00 d0       	rcall	.+0      	; 0x9fe <USART_Transmit_8_hex+0x6>
     9fe:	1f 92       	push	r1
     a00:	cd b7       	in	r28, 0x3d	; 61
     a02:	de b7       	in	r29, 0x3e	; 62
     a04:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char LSN = (byte & 0x0F);
     a06:	8b 81       	ldd	r24, Y+3	; 0x03
     a08:	8f 70       	andi	r24, 0x0F	; 15
     a0a:	89 83       	std	Y+1, r24	; 0x01
	unsigned char MSN = ((byte >> 4) & 0x0F);
     a0c:	8b 81       	ldd	r24, Y+3	; 0x03
     a0e:	82 95       	swap	r24
     a10:	8f 70       	andi	r24, 0x0F	; 15
     a12:	8a 83       	std	Y+2, r24	; 0x02

	convert2ASCII_hex(LSN);
     a14:	89 81       	ldd	r24, Y+1	; 0x01
     a16:	8a 30       	cpi	r24, 0x0A	; 10
     a18:	20 f4       	brcc	.+8      	; 0xa22 <USART_Transmit_8_hex+0x2a>
     a1a:	89 81       	ldd	r24, Y+1	; 0x01
     a1c:	80 5d       	subi	r24, 0xD0	; 208
     a1e:	89 83       	std	Y+1, r24	; 0x01
     a20:	06 c0       	rjmp	.+12     	; 0xa2e <USART_Transmit_8_hex+0x36>
     a22:	89 81       	ldd	r24, Y+1	; 0x01
     a24:	80 31       	cpi	r24, 0x10	; 16
     a26:	18 f4       	brcc	.+6      	; 0xa2e <USART_Transmit_8_hex+0x36>
     a28:	89 81       	ldd	r24, Y+1	; 0x01
     a2a:	89 5c       	subi	r24, 0xC9	; 201
     a2c:	89 83       	std	Y+1, r24	; 0x01
	convert2ASCII_hex(MSN);
     a2e:	8a 81       	ldd	r24, Y+2	; 0x02
     a30:	8a 30       	cpi	r24, 0x0A	; 10
     a32:	20 f4       	brcc	.+8      	; 0xa3c <USART_Transmit_8_hex+0x44>
     a34:	8a 81       	ldd	r24, Y+2	; 0x02
     a36:	80 5d       	subi	r24, 0xD0	; 208
     a38:	8a 83       	std	Y+2, r24	; 0x02
     a3a:	06 c0       	rjmp	.+12     	; 0xa48 <USART_Transmit_8_hex+0x50>
     a3c:	8a 81       	ldd	r24, Y+2	; 0x02
     a3e:	80 31       	cpi	r24, 0x10	; 16
     a40:	18 f4       	brcc	.+6      	; 0xa48 <USART_Transmit_8_hex+0x50>
     a42:	8a 81       	ldd	r24, Y+2	; 0x02
     a44:	89 5c       	subi	r24, 0xC9	; 201
     a46:	8a 83       	std	Y+2, r24	; 0x02

	USART_Transmit('0');
     a48:	80 e3       	ldi	r24, 0x30	; 48
     a4a:	0e 94 ad 03 	call	0x75a	; 0x75a <USART_Transmit>
	USART_Transmit('x');
     a4e:	88 e7       	ldi	r24, 0x78	; 120
     a50:	0e 94 ad 03 	call	0x75a	; 0x75a <USART_Transmit>
	USART_Transmit(MSN);
     a54:	8a 81       	ldd	r24, Y+2	; 0x02
     a56:	0e 94 ad 03 	call	0x75a	; 0x75a <USART_Transmit>
	USART_Transmit(LSN);
     a5a:	89 81       	ldd	r24, Y+1	; 0x01
     a5c:	0e 94 ad 03 	call	0x75a	; 0x75a <USART_Transmit>
	USART_Transmit(0x0A);
     a60:	8a e0       	ldi	r24, 0x0A	; 10
     a62:	0e 94 ad 03 	call	0x75a	; 0x75a <USART_Transmit>
}
     a66:	0f 90       	pop	r0
     a68:	0f 90       	pop	r0
     a6a:	0f 90       	pop	r0
     a6c:	df 91       	pop	r29
     a6e:	cf 91       	pop	r28
     a70:	08 95       	ret

00000a72 <USART_Transmit_8_dec>:

void USART_Transmit_8_dec(unsigned char byte){
     a72:	cf 93       	push	r28
     a74:	df 93       	push	r29
     a76:	00 d0       	rcall	.+0      	; 0xa78 <USART_Transmit_8_dec+0x6>
     a78:	00 d0       	rcall	.+0      	; 0xa7a <USART_Transmit_8_dec+0x8>
     a7a:	1f 92       	push	r1
     a7c:	cd b7       	in	r28, 0x3d	; 61
     a7e:	de b7       	in	r29, 0x3e	; 62
     a80:	89 83       	std	Y+1, r24	; 0x01
	if(byte < 10){
     a82:	89 81       	ldd	r24, Y+1	; 0x01
     a84:	8a 30       	cpi	r24, 0x0A	; 10
     a86:	40 f4       	brcc	.+16     	; 0xa98 <USART_Transmit_8_dec+0x26>
		USART_Transmit(byte + 48);
     a88:	89 81       	ldd	r24, Y+1	; 0x01
     a8a:	80 5d       	subi	r24, 0xD0	; 208
     a8c:	0e 94 ad 03 	call	0x75a	; 0x75a <USART_Transmit>
		USART_Transmit(0x0A);
     a90:	8a e0       	ldi	r24, 0x0A	; 10
     a92:	0e 94 ad 03 	call	0x75a	; 0x75a <USART_Transmit>
     a96:	6f c0       	rjmp	.+222    	; 0xb76 <USART_Transmit_8_dec+0x104>
	}
	else if(byte < 100){
     a98:	89 81       	ldd	r24, Y+1	; 0x01
     a9a:	84 36       	cpi	r24, 0x64	; 100
     a9c:	10 f5       	brcc	.+68     	; 0xae2 <USART_Transmit_8_dec+0x70>
		USART_Transmit((byte / 10) + 48);
     a9e:	99 81       	ldd	r25, Y+1	; 0x01
     aa0:	8d ec       	ldi	r24, 0xCD	; 205
     aa2:	98 9f       	mul	r25, r24
     aa4:	81 2d       	mov	r24, r1
     aa6:	11 24       	eor	r1, r1
     aa8:	86 95       	lsr	r24
     aaa:	86 95       	lsr	r24
     aac:	86 95       	lsr	r24
     aae:	80 5d       	subi	r24, 0xD0	; 208
     ab0:	0e 94 ad 03 	call	0x75a	; 0x75a <USART_Transmit>
		USART_Transmit((byte % 10) + 48);
     ab4:	99 81       	ldd	r25, Y+1	; 0x01
     ab6:	8d ec       	ldi	r24, 0xCD	; 205
     ab8:	98 9f       	mul	r25, r24
     aba:	81 2d       	mov	r24, r1
     abc:	11 24       	eor	r1, r1
     abe:	86 95       	lsr	r24
     ac0:	86 95       	lsr	r24
     ac2:	86 95       	lsr	r24
     ac4:	88 0f       	add	r24, r24
     ac6:	28 2f       	mov	r18, r24
     ac8:	22 0f       	add	r18, r18
     aca:	22 0f       	add	r18, r18
     acc:	82 0f       	add	r24, r18
     ace:	29 2f       	mov	r18, r25
     ad0:	28 1b       	sub	r18, r24
     ad2:	82 2f       	mov	r24, r18
     ad4:	80 5d       	subi	r24, 0xD0	; 208
     ad6:	0e 94 ad 03 	call	0x75a	; 0x75a <USART_Transmit>
		USART_Transmit(0x0A);
     ada:	8a e0       	ldi	r24, 0x0A	; 10
     adc:	0e 94 ad 03 	call	0x75a	; 0x75a <USART_Transmit>
     ae0:	4a c0       	rjmp	.+148    	; 0xb76 <USART_Transmit_8_dec+0x104>
	}
	else if(byte >= 100){
     ae2:	89 81       	ldd	r24, Y+1	; 0x01
     ae4:	84 36       	cpi	r24, 0x64	; 100
     ae6:	08 f4       	brcc	.+2      	; 0xaea <USART_Transmit_8_dec+0x78>
     ae8:	46 c0       	rjmp	.+140    	; 0xb76 <USART_Transmit_8_dec+0x104>
		USART_Transmit((byte / 100) + 48);
     aea:	99 81       	ldd	r25, Y+1	; 0x01
     aec:	89 e2       	ldi	r24, 0x29	; 41
     aee:	98 9f       	mul	r25, r24
     af0:	81 2d       	mov	r24, r1
     af2:	11 24       	eor	r1, r1
     af4:	82 95       	swap	r24
     af6:	8f 70       	andi	r24, 0x0F	; 15
     af8:	80 5d       	subi	r24, 0xD0	; 208
     afa:	0e 94 ad 03 	call	0x75a	; 0x75a <USART_Transmit>
		USART_Transmit(((byte - (byte/100)*100) / 10) + 48);
     afe:	89 81       	ldd	r24, Y+1	; 0x01
     b00:	28 2f       	mov	r18, r24
     b02:	30 e0       	ldi	r19, 0x00	; 0
     b04:	99 81       	ldd	r25, Y+1	; 0x01
     b06:	89 e2       	ldi	r24, 0x29	; 41
     b08:	98 9f       	mul	r25, r24
     b0a:	81 2d       	mov	r24, r1
     b0c:	11 24       	eor	r1, r1
     b0e:	82 95       	swap	r24
     b10:	8f 70       	andi	r24, 0x0F	; 15
     b12:	48 2f       	mov	r20, r24
     b14:	50 e0       	ldi	r21, 0x00	; 0
     b16:	6c e9       	ldi	r22, 0x9C	; 156
     b18:	64 03       	mulsu	r22, r20
     b1a:	c0 01       	movw	r24, r0
     b1c:	65 9f       	mul	r22, r21
     b1e:	90 0d       	add	r25, r0
     b20:	11 24       	eor	r1, r1
     b22:	82 0f       	add	r24, r18
     b24:	93 1f       	adc	r25, r19
     b26:	2a e0       	ldi	r18, 0x0A	; 10
     b28:	30 e0       	ldi	r19, 0x00	; 0
     b2a:	b9 01       	movw	r22, r18
     b2c:	0e 94 04 0a 	call	0x1408	; 0x1408 <__divmodhi4>
     b30:	cb 01       	movw	r24, r22
     b32:	80 5d       	subi	r24, 0xD0	; 208
     b34:	0e 94 ad 03 	call	0x75a	; 0x75a <USART_Transmit>
		USART_Transmit(((byte - (byte/100)*100) % 10) + 48);
     b38:	89 81       	ldd	r24, Y+1	; 0x01
     b3a:	28 2f       	mov	r18, r24
     b3c:	30 e0       	ldi	r19, 0x00	; 0
     b3e:	99 81       	ldd	r25, Y+1	; 0x01
     b40:	89 e2       	ldi	r24, 0x29	; 41
     b42:	98 9f       	mul	r25, r24
     b44:	81 2d       	mov	r24, r1
     b46:	11 24       	eor	r1, r1
     b48:	82 95       	swap	r24
     b4a:	8f 70       	andi	r24, 0x0F	; 15
     b4c:	48 2f       	mov	r20, r24
     b4e:	50 e0       	ldi	r21, 0x00	; 0
     b50:	6c e9       	ldi	r22, 0x9C	; 156
     b52:	64 03       	mulsu	r22, r20
     b54:	c0 01       	movw	r24, r0
     b56:	65 9f       	mul	r22, r21
     b58:	90 0d       	add	r25, r0
     b5a:	11 24       	eor	r1, r1
     b5c:	82 0f       	add	r24, r18
     b5e:	93 1f       	adc	r25, r19
     b60:	2a e0       	ldi	r18, 0x0A	; 10
     b62:	30 e0       	ldi	r19, 0x00	; 0
     b64:	b9 01       	movw	r22, r18
     b66:	0e 94 04 0a 	call	0x1408	; 0x1408 <__divmodhi4>
     b6a:	80 5d       	subi	r24, 0xD0	; 208
     b6c:	0e 94 ad 03 	call	0x75a	; 0x75a <USART_Transmit>
		USART_Transmit(0x0A);
     b70:	8a e0       	ldi	r24, 0x0A	; 10
     b72:	0e 94 ad 03 	call	0x75a	; 0x75a <USART_Transmit>
	}
}
     b76:	0f 90       	pop	r0
     b78:	0f 90       	pop	r0
     b7a:	0f 90       	pop	r0
     b7c:	0f 90       	pop	r0
     b7e:	0f 90       	pop	r0
     b80:	df 91       	pop	r29
     b82:	cf 91       	pop	r28
     b84:	08 95       	ret

00000b86 <USART_Transmit_16_dec>:

void USART_Transmit_16_dec(unsigned int word){
     b86:	cf 93       	push	r28
     b88:	df 93       	push	r29
     b8a:	00 d0       	rcall	.+0      	; 0xb8c <USART_Transmit_16_dec+0x6>
     b8c:	cd b7       	in	r28, 0x3d	; 61
     b8e:	de b7       	in	r29, 0x3e	; 62
     b90:	9a 83       	std	Y+2, r25	; 0x02
     b92:	89 83       	std	Y+1, r24	; 0x01
	if(word < 10){
     b94:	89 81       	ldd	r24, Y+1	; 0x01
     b96:	9a 81       	ldd	r25, Y+2	; 0x02
     b98:	8a 30       	cpi	r24, 0x0A	; 10
     b9a:	91 05       	cpc	r25, r1
     b9c:	40 f4       	brcc	.+16     	; 0xbae <USART_Transmit_16_dec+0x28>
		USART_Transmit(word + 48);
     b9e:	89 81       	ldd	r24, Y+1	; 0x01
     ba0:	80 5d       	subi	r24, 0xD0	; 208
     ba2:	0e 94 ad 03 	call	0x75a	; 0x75a <USART_Transmit>
		USART_Transmit(0x0A);
     ba6:	8a e0       	ldi	r24, 0x0A	; 10
     ba8:	0e 94 ad 03 	call	0x75a	; 0x75a <USART_Transmit>
     bac:	c5 c1       	rjmp	.+906    	; 0xf38 <USART_Transmit_16_dec+0x3b2>
	}
	else if(word < 100){
     bae:	89 81       	ldd	r24, Y+1	; 0x01
     bb0:	9a 81       	ldd	r25, Y+2	; 0x02
     bb2:	84 36       	cpi	r24, 0x64	; 100
     bb4:	91 05       	cpc	r25, r1
     bb6:	88 f5       	brcc	.+98     	; 0xc1a <USART_Transmit_16_dec+0x94>
		USART_Transmit((word / 10) + 48);
     bb8:	89 81       	ldd	r24, Y+1	; 0x01
     bba:	9a 81       	ldd	r25, Y+2	; 0x02
     bbc:	9c 01       	movw	r18, r24
     bbe:	ad ec       	ldi	r26, 0xCD	; 205
     bc0:	bc ec       	ldi	r27, 0xCC	; 204
     bc2:	0e 94 37 0a 	call	0x146e	; 0x146e <__umulhisi3>
     bc6:	96 95       	lsr	r25
     bc8:	87 95       	ror	r24
     bca:	96 95       	lsr	r25
     bcc:	87 95       	ror	r24
     bce:	96 95       	lsr	r25
     bd0:	87 95       	ror	r24
     bd2:	80 5d       	subi	r24, 0xD0	; 208
     bd4:	0e 94 ad 03 	call	0x75a	; 0x75a <USART_Transmit>
		USART_Transmit((word % 10) + 48);
     bd8:	49 81       	ldd	r20, Y+1	; 0x01
     bda:	5a 81       	ldd	r21, Y+2	; 0x02
     bdc:	9a 01       	movw	r18, r20
     bde:	ad ec       	ldi	r26, 0xCD	; 205
     be0:	bc ec       	ldi	r27, 0xCC	; 204
     be2:	0e 94 37 0a 	call	0x146e	; 0x146e <__umulhisi3>
     be6:	96 95       	lsr	r25
     be8:	87 95       	ror	r24
     bea:	96 95       	lsr	r25
     bec:	87 95       	ror	r24
     bee:	96 95       	lsr	r25
     bf0:	87 95       	ror	r24
     bf2:	88 0f       	add	r24, r24
     bf4:	99 1f       	adc	r25, r25
     bf6:	9c 01       	movw	r18, r24
     bf8:	22 0f       	add	r18, r18
     bfa:	33 1f       	adc	r19, r19
     bfc:	22 0f       	add	r18, r18
     bfe:	33 1f       	adc	r19, r19
     c00:	82 0f       	add	r24, r18
     c02:	93 1f       	adc	r25, r19
     c04:	9a 01       	movw	r18, r20
     c06:	28 1b       	sub	r18, r24
     c08:	39 0b       	sbc	r19, r25
     c0a:	c9 01       	movw	r24, r18
     c0c:	80 5d       	subi	r24, 0xD0	; 208
     c0e:	0e 94 ad 03 	call	0x75a	; 0x75a <USART_Transmit>
		USART_Transmit(0x0A);
     c12:	8a e0       	ldi	r24, 0x0A	; 10
     c14:	0e 94 ad 03 	call	0x75a	; 0x75a <USART_Transmit>
     c18:	8f c1       	rjmp	.+798    	; 0xf38 <USART_Transmit_16_dec+0x3b2>
	}
	else if(word < 1000){
     c1a:	89 81       	ldd	r24, Y+1	; 0x01
     c1c:	9a 81       	ldd	r25, Y+2	; 0x02
     c1e:	88 3e       	cpi	r24, 0xE8	; 232
     c20:	33 e0       	ldi	r19, 0x03	; 3
     c22:	93 07       	cpc	r25, r19
     c24:	08 f0       	brcs	.+2      	; 0xc28 <USART_Transmit_16_dec+0xa2>
     c26:	6c c0       	rjmp	.+216    	; 0xd00 <USART_Transmit_16_dec+0x17a>
		USART_Transmit((word / 100) + 48);
     c28:	89 81       	ldd	r24, Y+1	; 0x01
     c2a:	9a 81       	ldd	r25, Y+2	; 0x02
     c2c:	96 95       	lsr	r25
     c2e:	87 95       	ror	r24
     c30:	96 95       	lsr	r25
     c32:	87 95       	ror	r24
     c34:	9c 01       	movw	r18, r24
     c36:	ab e7       	ldi	r26, 0x7B	; 123
     c38:	b4 e1       	ldi	r27, 0x14	; 20
     c3a:	0e 94 37 0a 	call	0x146e	; 0x146e <__umulhisi3>
     c3e:	96 95       	lsr	r25
     c40:	87 95       	ror	r24
     c42:	80 5d       	subi	r24, 0xD0	; 208
     c44:	0e 94 ad 03 	call	0x75a	; 0x75a <USART_Transmit>
		USART_Transmit(((word - (word/100)*100) / 10) + 48);
     c48:	49 81       	ldd	r20, Y+1	; 0x01
     c4a:	5a 81       	ldd	r21, Y+2	; 0x02
     c4c:	ca 01       	movw	r24, r20
     c4e:	96 95       	lsr	r25
     c50:	87 95       	ror	r24
     c52:	96 95       	lsr	r25
     c54:	87 95       	ror	r24
     c56:	9c 01       	movw	r18, r24
     c58:	ab e7       	ldi	r26, 0x7B	; 123
     c5a:	b4 e1       	ldi	r27, 0x14	; 20
     c5c:	0e 94 37 0a 	call	0x146e	; 0x146e <__umulhisi3>
     c60:	96 95       	lsr	r25
     c62:	87 95       	ror	r24
     c64:	64 e6       	ldi	r22, 0x64	; 100
     c66:	68 9f       	mul	r22, r24
     c68:	90 01       	movw	r18, r0
     c6a:	69 9f       	mul	r22, r25
     c6c:	30 0d       	add	r19, r0
     c6e:	11 24       	eor	r1, r1
     c70:	ca 01       	movw	r24, r20
     c72:	82 1b       	sub	r24, r18
     c74:	93 0b       	sbc	r25, r19
     c76:	9c 01       	movw	r18, r24
     c78:	ad ec       	ldi	r26, 0xCD	; 205
     c7a:	bc ec       	ldi	r27, 0xCC	; 204
     c7c:	0e 94 37 0a 	call	0x146e	; 0x146e <__umulhisi3>
     c80:	96 95       	lsr	r25
     c82:	87 95       	ror	r24
     c84:	96 95       	lsr	r25
     c86:	87 95       	ror	r24
     c88:	96 95       	lsr	r25
     c8a:	87 95       	ror	r24
     c8c:	80 5d       	subi	r24, 0xD0	; 208
     c8e:	0e 94 ad 03 	call	0x75a	; 0x75a <USART_Transmit>
		USART_Transmit(((word - (word/100)*100) % 10) + 48);
     c92:	e9 81       	ldd	r30, Y+1	; 0x01
     c94:	fa 81       	ldd	r31, Y+2	; 0x02
     c96:	cf 01       	movw	r24, r30
     c98:	96 95       	lsr	r25
     c9a:	87 95       	ror	r24
     c9c:	96 95       	lsr	r25
     c9e:	87 95       	ror	r24
     ca0:	9c 01       	movw	r18, r24
     ca2:	ab e7       	ldi	r26, 0x7B	; 123
     ca4:	b4 e1       	ldi	r27, 0x14	; 20
     ca6:	0e 94 37 0a 	call	0x146e	; 0x146e <__umulhisi3>
     caa:	ac 01       	movw	r20, r24
     cac:	56 95       	lsr	r21
     cae:	47 95       	ror	r20
     cb0:	24 e6       	ldi	r18, 0x64	; 100
     cb2:	24 9f       	mul	r18, r20
     cb4:	c0 01       	movw	r24, r0
     cb6:	25 9f       	mul	r18, r21
     cb8:	90 0d       	add	r25, r0
     cba:	11 24       	eor	r1, r1
     cbc:	af 01       	movw	r20, r30
     cbe:	48 1b       	sub	r20, r24
     cc0:	59 0b       	sbc	r21, r25
     cc2:	9a 01       	movw	r18, r20
     cc4:	ad ec       	ldi	r26, 0xCD	; 205
     cc6:	bc ec       	ldi	r27, 0xCC	; 204
     cc8:	0e 94 37 0a 	call	0x146e	; 0x146e <__umulhisi3>
     ccc:	96 95       	lsr	r25
     cce:	87 95       	ror	r24
     cd0:	96 95       	lsr	r25
     cd2:	87 95       	ror	r24
     cd4:	96 95       	lsr	r25
     cd6:	87 95       	ror	r24
     cd8:	88 0f       	add	r24, r24
     cda:	99 1f       	adc	r25, r25
     cdc:	9c 01       	movw	r18, r24
     cde:	22 0f       	add	r18, r18
     ce0:	33 1f       	adc	r19, r19
     ce2:	22 0f       	add	r18, r18
     ce4:	33 1f       	adc	r19, r19
     ce6:	82 0f       	add	r24, r18
     ce8:	93 1f       	adc	r25, r19
     cea:	9a 01       	movw	r18, r20
     cec:	28 1b       	sub	r18, r24
     cee:	39 0b       	sbc	r19, r25
     cf0:	c9 01       	movw	r24, r18
     cf2:	80 5d       	subi	r24, 0xD0	; 208
     cf4:	0e 94 ad 03 	call	0x75a	; 0x75a <USART_Transmit>
		USART_Transmit(0x0A);
     cf8:	8a e0       	ldi	r24, 0x0A	; 10
     cfa:	0e 94 ad 03 	call	0x75a	; 0x75a <USART_Transmit>
     cfe:	1c c1       	rjmp	.+568    	; 0xf38 <USART_Transmit_16_dec+0x3b2>
	}
	else if(word < 10000){
     d00:	89 81       	ldd	r24, Y+1	; 0x01
     d02:	9a 81       	ldd	r25, Y+2	; 0x02
     d04:	80 31       	cpi	r24, 0x10	; 16
     d06:	37 e2       	ldi	r19, 0x27	; 39
     d08:	93 07       	cpc	r25, r19
     d0a:	08 f0       	brcs	.+2      	; 0xd0e <USART_Transmit_16_dec+0x188>
     d0c:	12 c1       	rjmp	.+548    	; 0xf32 <USART_Transmit_16_dec+0x3ac>
		USART_Transmit((word / 1000) + 48);
     d0e:	89 81       	ldd	r24, Y+1	; 0x01
     d10:	9a 81       	ldd	r25, Y+2	; 0x02
     d12:	96 95       	lsr	r25
     d14:	87 95       	ror	r24
     d16:	96 95       	lsr	r25
     d18:	87 95       	ror	r24
     d1a:	96 95       	lsr	r25
     d1c:	87 95       	ror	r24
     d1e:	9c 01       	movw	r18, r24
     d20:	a5 ec       	ldi	r26, 0xC5	; 197
     d22:	b0 e2       	ldi	r27, 0x20	; 32
     d24:	0e 94 37 0a 	call	0x146e	; 0x146e <__umulhisi3>
     d28:	92 95       	swap	r25
     d2a:	82 95       	swap	r24
     d2c:	8f 70       	andi	r24, 0x0F	; 15
     d2e:	89 27       	eor	r24, r25
     d30:	9f 70       	andi	r25, 0x0F	; 15
     d32:	89 27       	eor	r24, r25
     d34:	80 5d       	subi	r24, 0xD0	; 208
     d36:	0e 94 ad 03 	call	0x75a	; 0x75a <USART_Transmit>
		USART_Transmit(((word - (word/1000)*1000) / 100) + 48);
     d3a:	49 81       	ldd	r20, Y+1	; 0x01
     d3c:	5a 81       	ldd	r21, Y+2	; 0x02
     d3e:	ca 01       	movw	r24, r20
     d40:	96 95       	lsr	r25
     d42:	87 95       	ror	r24
     d44:	96 95       	lsr	r25
     d46:	87 95       	ror	r24
     d48:	96 95       	lsr	r25
     d4a:	87 95       	ror	r24
     d4c:	9c 01       	movw	r18, r24
     d4e:	a5 ec       	ldi	r26, 0xC5	; 197
     d50:	b0 e2       	ldi	r27, 0x20	; 32
     d52:	0e 94 37 0a 	call	0x146e	; 0x146e <__umulhisi3>
     d56:	92 95       	swap	r25
     d58:	82 95       	swap	r24
     d5a:	8f 70       	andi	r24, 0x0F	; 15
     d5c:	89 27       	eor	r24, r25
     d5e:	9f 70       	andi	r25, 0x0F	; 15
     d60:	89 27       	eor	r24, r25
     d62:	68 ee       	ldi	r22, 0xE8	; 232
     d64:	73 e0       	ldi	r23, 0x03	; 3
     d66:	86 9f       	mul	r24, r22
     d68:	90 01       	movw	r18, r0
     d6a:	87 9f       	mul	r24, r23
     d6c:	30 0d       	add	r19, r0
     d6e:	96 9f       	mul	r25, r22
     d70:	30 0d       	add	r19, r0
     d72:	11 24       	eor	r1, r1
     d74:	ca 01       	movw	r24, r20
     d76:	82 1b       	sub	r24, r18
     d78:	93 0b       	sbc	r25, r19
     d7a:	96 95       	lsr	r25
     d7c:	87 95       	ror	r24
     d7e:	96 95       	lsr	r25
     d80:	87 95       	ror	r24
     d82:	9c 01       	movw	r18, r24
     d84:	ab e7       	ldi	r26, 0x7B	; 123
     d86:	b4 e1       	ldi	r27, 0x14	; 20
     d88:	0e 94 37 0a 	call	0x146e	; 0x146e <__umulhisi3>
     d8c:	96 95       	lsr	r25
     d8e:	87 95       	ror	r24
     d90:	80 5d       	subi	r24, 0xD0	; 208
     d92:	0e 94 ad 03 	call	0x75a	; 0x75a <USART_Transmit>
		USART_Transmit((((word - (word/1000)*1000) % 100) / 10) + 48);
     d96:	e9 81       	ldd	r30, Y+1	; 0x01
     d98:	fa 81       	ldd	r31, Y+2	; 0x02
     d9a:	cf 01       	movw	r24, r30
     d9c:	96 95       	lsr	r25
     d9e:	87 95       	ror	r24
     da0:	96 95       	lsr	r25
     da2:	87 95       	ror	r24
     da4:	96 95       	lsr	r25
     da6:	87 95       	ror	r24
     da8:	9c 01       	movw	r18, r24
     daa:	a5 ec       	ldi	r26, 0xC5	; 197
     dac:	b0 e2       	ldi	r27, 0x20	; 32
     dae:	0e 94 37 0a 	call	0x146e	; 0x146e <__umulhisi3>
     db2:	ac 01       	movw	r20, r24
     db4:	52 95       	swap	r21
     db6:	42 95       	swap	r20
     db8:	4f 70       	andi	r20, 0x0F	; 15
     dba:	45 27       	eor	r20, r21
     dbc:	5f 70       	andi	r21, 0x0F	; 15
     dbe:	45 27       	eor	r20, r21
     dc0:	28 ee       	ldi	r18, 0xE8	; 232
     dc2:	33 e0       	ldi	r19, 0x03	; 3
     dc4:	42 9f       	mul	r20, r18
     dc6:	c0 01       	movw	r24, r0
     dc8:	43 9f       	mul	r20, r19
     dca:	90 0d       	add	r25, r0
     dcc:	52 9f       	mul	r21, r18
     dce:	90 0d       	add	r25, r0
     dd0:	11 24       	eor	r1, r1
     dd2:	af 01       	movw	r20, r30
     dd4:	48 1b       	sub	r20, r24
     dd6:	59 0b       	sbc	r21, r25
     dd8:	ca 01       	movw	r24, r20
     dda:	96 95       	lsr	r25
     ddc:	87 95       	ror	r24
     dde:	96 95       	lsr	r25
     de0:	87 95       	ror	r24
     de2:	9c 01       	movw	r18, r24
     de4:	ab e7       	ldi	r26, 0x7B	; 123
     de6:	b4 e1       	ldi	r27, 0x14	; 20
     de8:	0e 94 37 0a 	call	0x146e	; 0x146e <__umulhisi3>
     dec:	96 95       	lsr	r25
     dee:	87 95       	ror	r24
     df0:	64 e6       	ldi	r22, 0x64	; 100
     df2:	68 9f       	mul	r22, r24
     df4:	90 01       	movw	r18, r0
     df6:	69 9f       	mul	r22, r25
     df8:	30 0d       	add	r19, r0
     dfa:	11 24       	eor	r1, r1
     dfc:	ca 01       	movw	r24, r20
     dfe:	82 1b       	sub	r24, r18
     e00:	93 0b       	sbc	r25, r19
     e02:	9c 01       	movw	r18, r24
     e04:	ad ec       	ldi	r26, 0xCD	; 205
     e06:	bc ec       	ldi	r27, 0xCC	; 204
     e08:	0e 94 37 0a 	call	0x146e	; 0x146e <__umulhisi3>
     e0c:	96 95       	lsr	r25
     e0e:	87 95       	ror	r24
     e10:	96 95       	lsr	r25
     e12:	87 95       	ror	r24
     e14:	96 95       	lsr	r25
     e16:	87 95       	ror	r24
     e18:	80 5d       	subi	r24, 0xD0	; 208
     e1a:	0e 94 ad 03 	call	0x75a	; 0x75a <USART_Transmit>
		USART_Transmit((( (word - (word/1000)*1000) % 100) - (word - ((word/1000)*1000) % 100)/10)*10 +48);
     e1e:	e9 81       	ldd	r30, Y+1	; 0x01
     e20:	fa 81       	ldd	r31, Y+2	; 0x02
     e22:	cf 01       	movw	r24, r30
     e24:	96 95       	lsr	r25
     e26:	87 95       	ror	r24
     e28:	96 95       	lsr	r25
     e2a:	87 95       	ror	r24
     e2c:	96 95       	lsr	r25
     e2e:	87 95       	ror	r24
     e30:	9c 01       	movw	r18, r24
     e32:	a5 ec       	ldi	r26, 0xC5	; 197
     e34:	b0 e2       	ldi	r27, 0x20	; 32
     e36:	0e 94 37 0a 	call	0x146e	; 0x146e <__umulhisi3>
     e3a:	ac 01       	movw	r20, r24
     e3c:	52 95       	swap	r21
     e3e:	42 95       	swap	r20
     e40:	4f 70       	andi	r20, 0x0F	; 15
     e42:	45 27       	eor	r20, r21
     e44:	5f 70       	andi	r21, 0x0F	; 15
     e46:	45 27       	eor	r20, r21
     e48:	28 ee       	ldi	r18, 0xE8	; 232
     e4a:	33 e0       	ldi	r19, 0x03	; 3
     e4c:	42 9f       	mul	r20, r18
     e4e:	c0 01       	movw	r24, r0
     e50:	43 9f       	mul	r20, r19
     e52:	90 0d       	add	r25, r0
     e54:	52 9f       	mul	r21, r18
     e56:	90 0d       	add	r25, r0
     e58:	11 24       	eor	r1, r1
     e5a:	af 01       	movw	r20, r30
     e5c:	48 1b       	sub	r20, r24
     e5e:	59 0b       	sbc	r21, r25
     e60:	ca 01       	movw	r24, r20
     e62:	96 95       	lsr	r25
     e64:	87 95       	ror	r24
     e66:	96 95       	lsr	r25
     e68:	87 95       	ror	r24
     e6a:	9c 01       	movw	r18, r24
     e6c:	ab e7       	ldi	r26, 0x7B	; 123
     e6e:	b4 e1       	ldi	r27, 0x14	; 20
     e70:	0e 94 37 0a 	call	0x146e	; 0x146e <__umulhisi3>
     e74:	fc 01       	movw	r30, r24
     e76:	f6 95       	lsr	r31
     e78:	e7 95       	ror	r30
     e7a:	24 e6       	ldi	r18, 0x64	; 100
     e7c:	2e 9f       	mul	r18, r30
     e7e:	c0 01       	movw	r24, r0
     e80:	2f 9f       	mul	r18, r31
     e82:	90 0d       	add	r25, r0
     e84:	11 24       	eor	r1, r1
     e86:	fa 01       	movw	r30, r20
     e88:	e8 1b       	sub	r30, r24
     e8a:	f9 0b       	sbc	r31, r25
     e8c:	89 81       	ldd	r24, Y+1	; 0x01
     e8e:	9a 81       	ldd	r25, Y+2	; 0x02
     e90:	96 95       	lsr	r25
     e92:	87 95       	ror	r24
     e94:	96 95       	lsr	r25
     e96:	87 95       	ror	r24
     e98:	96 95       	lsr	r25
     e9a:	87 95       	ror	r24
     e9c:	9c 01       	movw	r18, r24
     e9e:	a5 ec       	ldi	r26, 0xC5	; 197
     ea0:	b0 e2       	ldi	r27, 0x20	; 32
     ea2:	0e 94 37 0a 	call	0x146e	; 0x146e <__umulhisi3>
     ea6:	9c 01       	movw	r18, r24
     ea8:	32 95       	swap	r19
     eaa:	22 95       	swap	r18
     eac:	2f 70       	andi	r18, 0x0F	; 15
     eae:	23 27       	eor	r18, r19
     eb0:	3f 70       	andi	r19, 0x0F	; 15
     eb2:	23 27       	eor	r18, r19
     eb4:	88 ee       	ldi	r24, 0xE8	; 232
     eb6:	93 e0       	ldi	r25, 0x03	; 3
     eb8:	28 9f       	mul	r18, r24
     eba:	a0 01       	movw	r20, r0
     ebc:	29 9f       	mul	r18, r25
     ebe:	50 0d       	add	r21, r0
     ec0:	38 9f       	mul	r19, r24
     ec2:	50 0d       	add	r21, r0
     ec4:	11 24       	eor	r1, r1
     ec6:	ca 01       	movw	r24, r20
     ec8:	96 95       	lsr	r25
     eca:	87 95       	ror	r24
     ecc:	96 95       	lsr	r25
     ece:	87 95       	ror	r24
     ed0:	9c 01       	movw	r18, r24
     ed2:	ab e7       	ldi	r26, 0x7B	; 123
     ed4:	b4 e1       	ldi	r27, 0x14	; 20
     ed6:	0e 94 37 0a 	call	0x146e	; 0x146e <__umulhisi3>
     eda:	96 95       	lsr	r25
     edc:	87 95       	ror	r24
     ede:	64 e6       	ldi	r22, 0x64	; 100
     ee0:	68 9f       	mul	r22, r24
     ee2:	90 01       	movw	r18, r0
     ee4:	69 9f       	mul	r22, r25
     ee6:	30 0d       	add	r19, r0
     ee8:	11 24       	eor	r1, r1
     eea:	ca 01       	movw	r24, r20
     eec:	82 1b       	sub	r24, r18
     eee:	93 0b       	sbc	r25, r19
     ef0:	29 81       	ldd	r18, Y+1	; 0x01
     ef2:	3a 81       	ldd	r19, Y+2	; 0x02
     ef4:	a9 01       	movw	r20, r18
     ef6:	48 1b       	sub	r20, r24
     ef8:	59 0b       	sbc	r21, r25
     efa:	ca 01       	movw	r24, r20
     efc:	9c 01       	movw	r18, r24
     efe:	ad ec       	ldi	r26, 0xCD	; 205
     f00:	bc ec       	ldi	r27, 0xCC	; 204
     f02:	0e 94 37 0a 	call	0x146e	; 0x146e <__umulhisi3>
     f06:	96 95       	lsr	r25
     f08:	87 95       	ror	r24
     f0a:	96 95       	lsr	r25
     f0c:	87 95       	ror	r24
     f0e:	96 95       	lsr	r25
     f10:	87 95       	ror	r24
     f12:	9f 01       	movw	r18, r30
     f14:	28 1b       	sub	r18, r24
     f16:	39 0b       	sbc	r19, r25
     f18:	c9 01       	movw	r24, r18
     f1a:	88 0f       	add	r24, r24
     f1c:	98 2f       	mov	r25, r24
     f1e:	99 0f       	add	r25, r25
     f20:	99 0f       	add	r25, r25
     f22:	89 0f       	add	r24, r25
     f24:	80 5d       	subi	r24, 0xD0	; 208
     f26:	0e 94 ad 03 	call	0x75a	; 0x75a <USART_Transmit>
		USART_Transmit(0x0A);
     f2a:	8a e0       	ldi	r24, 0x0A	; 10
     f2c:	0e 94 ad 03 	call	0x75a	; 0x75a <USART_Transmit>
     f30:	03 c0       	rjmp	.+6      	; 0xf38 <USART_Transmit_16_dec+0x3b2>
	}
	else{
		USART_Transmit('q');
     f32:	81 e7       	ldi	r24, 0x71	; 113
     f34:	0e 94 ad 03 	call	0x75a	; 0x75a <USART_Transmit>
	}
}
     f38:	0f 90       	pop	r0
     f3a:	0f 90       	pop	r0
     f3c:	df 91       	pop	r29
     f3e:	cf 91       	pop	r28
     f40:	08 95       	ret

00000f42 <USART_Transmit_16_dec_signed>:


void USART_Transmit_16_dec_signed(int word){
     f42:	cf 93       	push	r28
     f44:	df 93       	push	r29
     f46:	cd b7       	in	r28, 0x3d	; 61
     f48:	de b7       	in	r29, 0x3e	; 62
     f4a:	a6 97       	sbiw	r28, 0x26	; 38
     f4c:	0f b6       	in	r0, 0x3f	; 63
     f4e:	f8 94       	cli
     f50:	de bf       	out	0x3e, r29	; 62
     f52:	0f be       	out	0x3f, r0	; 63
     f54:	cd bf       	out	0x3d, r28	; 61
     f56:	9a 83       	std	Y+2, r25	; 0x02
     f58:	89 83       	std	Y+1, r24	; 0x01
		if (word < 0){
     f5a:	89 81       	ldd	r24, Y+1	; 0x01
     f5c:	9a 81       	ldd	r25, Y+2	; 0x02
     f5e:	99 23       	and	r25, r25
     f60:	54 f4       	brge	.+20     	; 0xf76 <USART_Transmit_16_dec_signed+0x34>
			USART_Transmit(0x2D);	// Minus sign
     f62:	8d e2       	ldi	r24, 0x2D	; 45
     f64:	0e 94 ad 03 	call	0x75a	; 0x75a <USART_Transmit>
			word = ~word + 1;
     f68:	89 81       	ldd	r24, Y+1	; 0x01
     f6a:	9a 81       	ldd	r25, Y+2	; 0x02
     f6c:	91 95       	neg	r25
     f6e:	81 95       	neg	r24
     f70:	91 09       	sbc	r25, r1
     f72:	9a 83       	std	Y+2, r25	; 0x02
     f74:	89 83       	std	Y+1, r24	; 0x01
		}

		if(word < 10){
     f76:	89 81       	ldd	r24, Y+1	; 0x01
     f78:	9a 81       	ldd	r25, Y+2	; 0x02
     f7a:	8a 30       	cpi	r24, 0x0A	; 10
     f7c:	91 05       	cpc	r25, r1
     f7e:	44 f4       	brge	.+16     	; 0xf90 <USART_Transmit_16_dec_signed+0x4e>
			USART_Transmit(word + 48);
     f80:	89 81       	ldd	r24, Y+1	; 0x01
     f82:	80 5d       	subi	r24, 0xD0	; 208
     f84:	0e 94 ad 03 	call	0x75a	; 0x75a <USART_Transmit>
			USART_Transmit(0x0A);
     f88:	8a e0       	ldi	r24, 0x0A	; 10
     f8a:	0e 94 ad 03 	call	0x75a	; 0x75a <USART_Transmit>
     f8e:	cc c0       	rjmp	.+408    	; 0x1128 <USART_Transmit_16_dec_signed+0x1e6>
		}
		else if(word < 100){
     f90:	89 81       	ldd	r24, Y+1	; 0x01
     f92:	9a 81       	ldd	r25, Y+2	; 0x02
     f94:	84 36       	cpi	r24, 0x64	; 100
     f96:	91 05       	cpc	r25, r1
     f98:	cc f4       	brge	.+50     	; 0xfcc <USART_Transmit_16_dec_signed+0x8a>
			USART_Transmit((word / 10) + 48);
     f9a:	89 81       	ldd	r24, Y+1	; 0x01
     f9c:	9a 81       	ldd	r25, Y+2	; 0x02
     f9e:	2a e0       	ldi	r18, 0x0A	; 10
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	b9 01       	movw	r22, r18
     fa4:	0e 94 04 0a 	call	0x1408	; 0x1408 <__divmodhi4>
     fa8:	cb 01       	movw	r24, r22
     faa:	80 5d       	subi	r24, 0xD0	; 208
     fac:	0e 94 ad 03 	call	0x75a	; 0x75a <USART_Transmit>
			USART_Transmit((word % 10) + 48);
     fb0:	89 81       	ldd	r24, Y+1	; 0x01
     fb2:	9a 81       	ldd	r25, Y+2	; 0x02
     fb4:	2a e0       	ldi	r18, 0x0A	; 10
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	b9 01       	movw	r22, r18
     fba:	0e 94 04 0a 	call	0x1408	; 0x1408 <__divmodhi4>
     fbe:	80 5d       	subi	r24, 0xD0	; 208
     fc0:	0e 94 ad 03 	call	0x75a	; 0x75a <USART_Transmit>
			USART_Transmit(0x0A);
     fc4:	8a e0       	ldi	r24, 0x0A	; 10
     fc6:	0e 94 ad 03 	call	0x75a	; 0x75a <USART_Transmit>
     fca:	ae c0       	rjmp	.+348    	; 0x1128 <USART_Transmit_16_dec_signed+0x1e6>
		}
		else if(word < 1000){
     fcc:	89 81       	ldd	r24, Y+1	; 0x01
     fce:	9a 81       	ldd	r25, Y+2	; 0x02
     fd0:	88 3e       	cpi	r24, 0xE8	; 232
     fd2:	23 e0       	ldi	r18, 0x03	; 3
     fd4:	92 07       	cpc	r25, r18
     fd6:	74 f5       	brge	.+92     	; 0x1034 <USART_Transmit_16_dec_signed+0xf2>
			USART_Transmit((word / 100) + 48);
     fd8:	89 81       	ldd	r24, Y+1	; 0x01
     fda:	9a 81       	ldd	r25, Y+2	; 0x02
     fdc:	24 e6       	ldi	r18, 0x64	; 100
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	b9 01       	movw	r22, r18
     fe2:	0e 94 04 0a 	call	0x1408	; 0x1408 <__divmodhi4>
     fe6:	cb 01       	movw	r24, r22
     fe8:	80 5d       	subi	r24, 0xD0	; 208
     fea:	0e 94 ad 03 	call	0x75a	; 0x75a <USART_Transmit>
			USART_Transmit(((word - (word/100)*100) / 10) + 48);
     fee:	89 81       	ldd	r24, Y+1	; 0x01
     ff0:	9a 81       	ldd	r25, Y+2	; 0x02
     ff2:	24 e6       	ldi	r18, 0x64	; 100
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	b9 01       	movw	r22, r18
     ff8:	0e 94 04 0a 	call	0x1408	; 0x1408 <__divmodhi4>
     ffc:	2a e0       	ldi	r18, 0x0A	; 10
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	b9 01       	movw	r22, r18
    1002:	0e 94 04 0a 	call	0x1408	; 0x1408 <__divmodhi4>
    1006:	cb 01       	movw	r24, r22
    1008:	80 5d       	subi	r24, 0xD0	; 208
    100a:	0e 94 ad 03 	call	0x75a	; 0x75a <USART_Transmit>
			USART_Transmit(((word - (word/100)*100) % 10) + 48);
    100e:	89 81       	ldd	r24, Y+1	; 0x01
    1010:	9a 81       	ldd	r25, Y+2	; 0x02
    1012:	24 e6       	ldi	r18, 0x64	; 100
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	b9 01       	movw	r22, r18
    1018:	0e 94 04 0a 	call	0x1408	; 0x1408 <__divmodhi4>
    101c:	2a e0       	ldi	r18, 0x0A	; 10
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	b9 01       	movw	r22, r18
    1022:	0e 94 04 0a 	call	0x1408	; 0x1408 <__divmodhi4>
    1026:	80 5d       	subi	r24, 0xD0	; 208
    1028:	0e 94 ad 03 	call	0x75a	; 0x75a <USART_Transmit>
			USART_Transmit(0x0A);
    102c:	8a e0       	ldi	r24, 0x0A	; 10
    102e:	0e 94 ad 03 	call	0x75a	; 0x75a <USART_Transmit>
    1032:	7a c0       	rjmp	.+244    	; 0x1128 <USART_Transmit_16_dec_signed+0x1e6>
		}
		else if(word < 10000){
    1034:	89 81       	ldd	r24, Y+1	; 0x01
    1036:	9a 81       	ldd	r25, Y+2	; 0x02
    1038:	80 31       	cpi	r24, 0x10	; 16
    103a:	47 e2       	ldi	r20, 0x27	; 39
    103c:	94 07       	cpc	r25, r20
    103e:	0c f0       	brlt	.+2      	; 0x1042 <USART_Transmit_16_dec_signed+0x100>
    1040:	70 c0       	rjmp	.+224    	; 0x1122 <USART_Transmit_16_dec_signed+0x1e0>
			USART_Transmit((word / 1000) + 48);
    1042:	89 81       	ldd	r24, Y+1	; 0x01
    1044:	9a 81       	ldd	r25, Y+2	; 0x02
    1046:	28 ee       	ldi	r18, 0xE8	; 232
    1048:	33 e0       	ldi	r19, 0x03	; 3
    104a:	b9 01       	movw	r22, r18
    104c:	0e 94 04 0a 	call	0x1408	; 0x1408 <__divmodhi4>
    1050:	cb 01       	movw	r24, r22
    1052:	80 5d       	subi	r24, 0xD0	; 208
    1054:	0e 94 ad 03 	call	0x75a	; 0x75a <USART_Transmit>
			USART_Transmit(((word - (word/1000)*1000) / 100) + 48);
    1058:	89 81       	ldd	r24, Y+1	; 0x01
    105a:	9a 81       	ldd	r25, Y+2	; 0x02
    105c:	28 ee       	ldi	r18, 0xE8	; 232
    105e:	33 e0       	ldi	r19, 0x03	; 3
    1060:	b9 01       	movw	r22, r18
    1062:	0e 94 04 0a 	call	0x1408	; 0x1408 <__divmodhi4>
    1066:	24 e6       	ldi	r18, 0x64	; 100
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	b9 01       	movw	r22, r18
    106c:	0e 94 04 0a 	call	0x1408	; 0x1408 <__divmodhi4>
    1070:	cb 01       	movw	r24, r22
    1072:	80 5d       	subi	r24, 0xD0	; 208
    1074:	0e 94 ad 03 	call	0x75a	; 0x75a <USART_Transmit>
			USART_Transmit((((word - (word/1000)*1000) % 100) / 10) + 48);
    1078:	89 81       	ldd	r24, Y+1	; 0x01
    107a:	9a 81       	ldd	r25, Y+2	; 0x02
    107c:	28 ee       	ldi	r18, 0xE8	; 232
    107e:	33 e0       	ldi	r19, 0x03	; 3
    1080:	b9 01       	movw	r22, r18
    1082:	0e 94 04 0a 	call	0x1408	; 0x1408 <__divmodhi4>
    1086:	24 e6       	ldi	r18, 0x64	; 100
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	b9 01       	movw	r22, r18
    108c:	0e 94 04 0a 	call	0x1408	; 0x1408 <__divmodhi4>
    1090:	2a e0       	ldi	r18, 0x0A	; 10
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	b9 01       	movw	r22, r18
    1096:	0e 94 04 0a 	call	0x1408	; 0x1408 <__divmodhi4>
    109a:	cb 01       	movw	r24, r22
    109c:	80 5d       	subi	r24, 0xD0	; 208
    109e:	0e 94 ad 03 	call	0x75a	; 0x75a <USART_Transmit>
			USART_Transmit((( (word - (word/1000)*1000) % 100) - (word - ((word/1000)*1000) % 100)/10)*10 +48);
    10a2:	89 81       	ldd	r24, Y+1	; 0x01
    10a4:	9a 81       	ldd	r25, Y+2	; 0x02
    10a6:	28 ee       	ldi	r18, 0xE8	; 232
    10a8:	33 e0       	ldi	r19, 0x03	; 3
    10aa:	b9 01       	movw	r22, r18
    10ac:	0e 94 04 0a 	call	0x1408	; 0x1408 <__divmodhi4>
    10b0:	24 e6       	ldi	r18, 0x64	; 100
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	b9 01       	movw	r22, r18
    10b6:	0e 94 04 0a 	call	0x1408	; 0x1408 <__divmodhi4>
    10ba:	9c 01       	movw	r18, r24
    10bc:	89 81       	ldd	r24, Y+1	; 0x01
    10be:	9a 81       	ldd	r25, Y+2	; 0x02
    10c0:	48 ee       	ldi	r20, 0xE8	; 232
    10c2:	53 e0       	ldi	r21, 0x03	; 3
    10c4:	ba 01       	movw	r22, r20
    10c6:	0e 94 04 0a 	call	0x1408	; 0x1408 <__divmodhi4>
    10ca:	cb 01       	movw	r24, r22
    10cc:	bc 01       	movw	r22, r24
    10ce:	48 ee       	ldi	r20, 0xE8	; 232
    10d0:	53 e0       	ldi	r21, 0x03	; 3
    10d2:	64 9f       	mul	r22, r20
    10d4:	c0 01       	movw	r24, r0
    10d6:	65 9f       	mul	r22, r21
    10d8:	90 0d       	add	r25, r0
    10da:	74 9f       	mul	r23, r20
    10dc:	90 0d       	add	r25, r0
    10de:	11 24       	eor	r1, r1
    10e0:	44 e6       	ldi	r20, 0x64	; 100
    10e2:	50 e0       	ldi	r21, 0x00	; 0
    10e4:	ba 01       	movw	r22, r20
    10e6:	0e 94 04 0a 	call	0x1408	; 0x1408 <__divmodhi4>
    10ea:	49 81       	ldd	r20, Y+1	; 0x01
    10ec:	5a 81       	ldd	r21, Y+2	; 0x02
    10ee:	ba 01       	movw	r22, r20
    10f0:	68 1b       	sub	r22, r24
    10f2:	79 0b       	sbc	r23, r25
    10f4:	cb 01       	movw	r24, r22
    10f6:	4a e0       	ldi	r20, 0x0A	; 10
    10f8:	50 e0       	ldi	r21, 0x00	; 0
    10fa:	ba 01       	movw	r22, r20
    10fc:	0e 94 04 0a 	call	0x1408	; 0x1408 <__divmodhi4>
    1100:	cb 01       	movw	r24, r22
    1102:	a9 01       	movw	r20, r18
    1104:	48 1b       	sub	r20, r24
    1106:	59 0b       	sbc	r21, r25
    1108:	ca 01       	movw	r24, r20
    110a:	88 0f       	add	r24, r24
    110c:	98 2f       	mov	r25, r24
    110e:	99 0f       	add	r25, r25
    1110:	99 0f       	add	r25, r25
    1112:	89 0f       	add	r24, r25
    1114:	80 5d       	subi	r24, 0xD0	; 208
    1116:	0e 94 ad 03 	call	0x75a	; 0x75a <USART_Transmit>
			USART_Transmit(0x0A);
    111a:	8a e0       	ldi	r24, 0x0A	; 10
    111c:	0e 94 ad 03 	call	0x75a	; 0x75a <USART_Transmit>
    1120:	03 c0       	rjmp	.+6      	; 0x1128 <USART_Transmit_16_dec_signed+0x1e6>
		}
		else{
			USART_Transmit('q');
    1122:	81 e7       	ldi	r24, 0x71	; 113
    1124:	0e 94 ad 03 	call	0x75a	; 0x75a <USART_Transmit>
		}
	}
    1128:	a6 96       	adiw	r28, 0x26	; 38
    112a:	0f b6       	in	r0, 0x3f	; 63
    112c:	f8 94       	cli
    112e:	de bf       	out	0x3e, r29	; 62
    1130:	0f be       	out	0x3f, r0	; 63
    1132:	cd bf       	out	0x3d, r28	; 61
    1134:	df 91       	pop	r29
    1136:	cf 91       	pop	r28
    1138:	08 95       	ret

0000113a <USART_Transmit_dec>:

void USART_Transmit_dec(int word){
    113a:	cf 93       	push	r28
    113c:	df 93       	push	r29
    113e:	cd b7       	in	r28, 0x3d	; 61
    1140:	de b7       	in	r29, 0x3e	; 62
    1142:	6d 97       	sbiw	r28, 0x1d	; 29
    1144:	0f b6       	in	r0, 0x3f	; 63
    1146:	f8 94       	cli
    1148:	de bf       	out	0x3e, r29	; 62
    114a:	0f be       	out	0x3f, r0	; 63
    114c:	cd bf       	out	0x3d, r28	; 61
    114e:	99 8f       	std	Y+25, r25	; 0x19
    1150:	88 8f       	std	Y+24, r24	; 0x18
	if (word < 0){
    1152:	88 8d       	ldd	r24, Y+24	; 0x18
    1154:	99 8d       	ldd	r25, Y+25	; 0x19
    1156:	99 23       	and	r25, r25
    1158:	54 f4       	brge	.+20     	; 0x116e <USART_Transmit_dec+0x34>
				USART_Transmit(0x2D);	// Minus sign
    115a:	8d e2       	ldi	r24, 0x2D	; 45
    115c:	0e 94 ad 03 	call	0x75a	; 0x75a <USART_Transmit>
				word = ~word + 1;
    1160:	88 8d       	ldd	r24, Y+24	; 0x18
    1162:	99 8d       	ldd	r25, Y+25	; 0x19
    1164:	91 95       	neg	r25
    1166:	81 95       	neg	r24
    1168:	91 09       	sbc	r25, r1
    116a:	99 8f       	std	Y+25, r25	; 0x19
    116c:	88 8f       	std	Y+24, r24	; 0x18
	}

	char tmp[20];
	char count = 0;
    116e:	19 82       	std	Y+1, r1	; 0x01
	while(word > 9){
    1170:	1e c0       	rjmp	.+60     	; 0x11ae <USART_Transmit_dec+0x74>
		tmp[count] = word%10;
    1172:	89 81       	ldd	r24, Y+1	; 0x01
    1174:	28 2f       	mov	r18, r24
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	88 8d       	ldd	r24, Y+24	; 0x18
    117a:	99 8d       	ldd	r25, Y+25	; 0x19
    117c:	4a e0       	ldi	r20, 0x0A	; 10
    117e:	50 e0       	ldi	r21, 0x00	; 0
    1180:	ba 01       	movw	r22, r20
    1182:	0e 94 04 0a 	call	0x1408	; 0x1408 <__divmodhi4>
    1186:	48 2f       	mov	r20, r24
    1188:	ce 01       	movw	r24, r28
    118a:	04 96       	adiw	r24, 0x04	; 4
    118c:	82 0f       	add	r24, r18
    118e:	93 1f       	adc	r25, r19
    1190:	fc 01       	movw	r30, r24
    1192:	40 83       	st	Z, r20
		word = word/10;
    1194:	88 8d       	ldd	r24, Y+24	; 0x18
    1196:	99 8d       	ldd	r25, Y+25	; 0x19
    1198:	2a e0       	ldi	r18, 0x0A	; 10
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	b9 01       	movw	r22, r18
    119e:	0e 94 04 0a 	call	0x1408	; 0x1408 <__divmodhi4>
    11a2:	cb 01       	movw	r24, r22
    11a4:	99 8f       	std	Y+25, r25	; 0x19
    11a6:	88 8f       	std	Y+24, r24	; 0x18
		count++;
    11a8:	89 81       	ldd	r24, Y+1	; 0x01
    11aa:	8f 5f       	subi	r24, 0xFF	; 255
    11ac:	89 83       	std	Y+1, r24	; 0x01
				word = ~word + 1;
	}

	char tmp[20];
	char count = 0;
	while(word > 9){
    11ae:	88 8d       	ldd	r24, Y+24	; 0x18
    11b0:	99 8d       	ldd	r25, Y+25	; 0x19
    11b2:	8a 30       	cpi	r24, 0x0A	; 10
    11b4:	91 05       	cpc	r25, r1
    11b6:	ec f6       	brge	.-70     	; 0x1172 <USART_Transmit_dec+0x38>
		tmp[count] = word%10;
		word = word/10;
		count++;
	}
	tmp[count] = word;
    11b8:	89 81       	ldd	r24, Y+1	; 0x01
    11ba:	88 2f       	mov	r24, r24
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	48 8d       	ldd	r20, Y+24	; 0x18
    11c0:	9e 01       	movw	r18, r28
    11c2:	2c 5f       	subi	r18, 0xFC	; 252
    11c4:	3f 4f       	sbci	r19, 0xFF	; 255
    11c6:	82 0f       	add	r24, r18
    11c8:	93 1f       	adc	r25, r19
    11ca:	fc 01       	movw	r30, r24
    11cc:	40 83       	st	Z, r20
	for(int i = count; i >= 0; i--){
    11ce:	89 81       	ldd	r24, Y+1	; 0x01
    11d0:	88 2f       	mov	r24, r24
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	9b 83       	std	Y+3, r25	; 0x03
    11d6:	8a 83       	std	Y+2, r24	; 0x02
    11d8:	11 c0       	rjmp	.+34     	; 0x11fc <USART_Transmit_dec+0xc2>
		USART_Transmit(tmp[i] + 48);
    11da:	9e 01       	movw	r18, r28
    11dc:	2c 5f       	subi	r18, 0xFC	; 252
    11de:	3f 4f       	sbci	r19, 0xFF	; 255
    11e0:	8a 81       	ldd	r24, Y+2	; 0x02
    11e2:	9b 81       	ldd	r25, Y+3	; 0x03
    11e4:	82 0f       	add	r24, r18
    11e6:	93 1f       	adc	r25, r19
    11e8:	fc 01       	movw	r30, r24
    11ea:	80 81       	ld	r24, Z
    11ec:	80 5d       	subi	r24, 0xD0	; 208
    11ee:	0e 94 ad 03 	call	0x75a	; 0x75a <USART_Transmit>
		tmp[count] = word%10;
		word = word/10;
		count++;
	}
	tmp[count] = word;
	for(int i = count; i >= 0; i--){
    11f2:	8a 81       	ldd	r24, Y+2	; 0x02
    11f4:	9b 81       	ldd	r25, Y+3	; 0x03
    11f6:	01 97       	sbiw	r24, 0x01	; 1
    11f8:	9b 83       	std	Y+3, r25	; 0x03
    11fa:	8a 83       	std	Y+2, r24	; 0x02
    11fc:	8a 81       	ldd	r24, Y+2	; 0x02
    11fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1200:	99 23       	and	r25, r25
    1202:	5c f7       	brge	.-42     	; 0x11da <USART_Transmit_dec+0xa0>
		USART_Transmit(tmp[i] + 48);
	}
}
    1204:	6d 96       	adiw	r28, 0x1d	; 29
    1206:	0f b6       	in	r0, 0x3f	; 63
    1208:	f8 94       	cli
    120a:	de bf       	out	0x3e, r29	; 62
    120c:	0f be       	out	0x3f, r0	; 63
    120e:	cd bf       	out	0x3d, r28	; 61
    1210:	df 91       	pop	r29
    1212:	cf 91       	pop	r28
    1214:	08 95       	ret

00001216 <myPrintNL>:




void myPrintNL(unsigned char str[], unsigned char len){
    1216:	cf 93       	push	r28
    1218:	df 93       	push	r29
    121a:	00 d0       	rcall	.+0      	; 0x121c <myPrintNL+0x6>
    121c:	00 d0       	rcall	.+0      	; 0x121e <myPrintNL+0x8>
    121e:	cd b7       	in	r28, 0x3d	; 61
    1220:	de b7       	in	r29, 0x3e	; 62
    1222:	9b 83       	std	Y+3, r25	; 0x03
    1224:	8a 83       	std	Y+2, r24	; 0x02
    1226:	6c 83       	std	Y+4, r22	; 0x04
	for(unsigned char i = 0; i < len; i++){
    1228:	19 82       	std	Y+1, r1	; 0x01
    122a:	1a c0       	rjmp	.+52     	; 0x1260 <myPrintNL+0x4a>
		if(str[i] == '\0'){
    122c:	89 81       	ldd	r24, Y+1	; 0x01
    122e:	88 2f       	mov	r24, r24
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	2a 81       	ldd	r18, Y+2	; 0x02
    1234:	3b 81       	ldd	r19, Y+3	; 0x03
    1236:	82 0f       	add	r24, r18
    1238:	93 1f       	adc	r25, r19
    123a:	fc 01       	movw	r30, r24
    123c:	80 81       	ld	r24, Z
    123e:	88 23       	and	r24, r24
    1240:	09 f4       	brne	.+2      	; 0x1244 <myPrintNL+0x2e>
			break;
    1242:	12 c0       	rjmp	.+36     	; 0x1268 <myPrintNL+0x52>
		}
		USART_Transmit(str[i]);
    1244:	89 81       	ldd	r24, Y+1	; 0x01
    1246:	88 2f       	mov	r24, r24
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	2a 81       	ldd	r18, Y+2	; 0x02
    124c:	3b 81       	ldd	r19, Y+3	; 0x03
    124e:	82 0f       	add	r24, r18
    1250:	93 1f       	adc	r25, r19
    1252:	fc 01       	movw	r30, r24
    1254:	80 81       	ld	r24, Z
    1256:	0e 94 ad 03 	call	0x75a	; 0x75a <USART_Transmit>




void myPrintNL(unsigned char str[], unsigned char len){
	for(unsigned char i = 0; i < len; i++){
    125a:	89 81       	ldd	r24, Y+1	; 0x01
    125c:	8f 5f       	subi	r24, 0xFF	; 255
    125e:	89 83       	std	Y+1, r24	; 0x01
    1260:	99 81       	ldd	r25, Y+1	; 0x01
    1262:	8c 81       	ldd	r24, Y+4	; 0x04
    1264:	98 17       	cp	r25, r24
    1266:	10 f3       	brcs	.-60     	; 0x122c <myPrintNL+0x16>
		if(str[i] == '\0'){
			break;
		}
		USART_Transmit(str[i]);
	}
	USART_Transmit(0x0A);
    1268:	8a e0       	ldi	r24, 0x0A	; 10
    126a:	0e 94 ad 03 	call	0x75a	; 0x75a <USART_Transmit>
}
    126e:	0f 90       	pop	r0
    1270:	0f 90       	pop	r0
    1272:	0f 90       	pop	r0
    1274:	0f 90       	pop	r0
    1276:	df 91       	pop	r29
    1278:	cf 91       	pop	r28
    127a:	08 95       	ret

0000127c <myPrint>:

void myPrint(unsigned char str[], unsigned char len){
    127c:	cf 93       	push	r28
    127e:	df 93       	push	r29
    1280:	00 d0       	rcall	.+0      	; 0x1282 <myPrint+0x6>
    1282:	00 d0       	rcall	.+0      	; 0x1284 <myPrint+0x8>
    1284:	cd b7       	in	r28, 0x3d	; 61
    1286:	de b7       	in	r29, 0x3e	; 62
    1288:	9b 83       	std	Y+3, r25	; 0x03
    128a:	8a 83       	std	Y+2, r24	; 0x02
    128c:	6c 83       	std	Y+4, r22	; 0x04
	for(unsigned char i = 0; i < len; i++){
    128e:	19 82       	std	Y+1, r1	; 0x01
    1290:	1a c0       	rjmp	.+52     	; 0x12c6 <myPrint+0x4a>
		if(str[i] == '\0'){
    1292:	89 81       	ldd	r24, Y+1	; 0x01
    1294:	88 2f       	mov	r24, r24
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	2a 81       	ldd	r18, Y+2	; 0x02
    129a:	3b 81       	ldd	r19, Y+3	; 0x03
    129c:	82 0f       	add	r24, r18
    129e:	93 1f       	adc	r25, r19
    12a0:	fc 01       	movw	r30, r24
    12a2:	80 81       	ld	r24, Z
    12a4:	88 23       	and	r24, r24
    12a6:	09 f4       	brne	.+2      	; 0x12aa <myPrint+0x2e>
			break;
    12a8:	12 c0       	rjmp	.+36     	; 0x12ce <myPrint+0x52>
		}
		USART_Transmit(str[i]);
    12aa:	89 81       	ldd	r24, Y+1	; 0x01
    12ac:	88 2f       	mov	r24, r24
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	2a 81       	ldd	r18, Y+2	; 0x02
    12b2:	3b 81       	ldd	r19, Y+3	; 0x03
    12b4:	82 0f       	add	r24, r18
    12b6:	93 1f       	adc	r25, r19
    12b8:	fc 01       	movw	r30, r24
    12ba:	80 81       	ld	r24, Z
    12bc:	0e 94 ad 03 	call	0x75a	; 0x75a <USART_Transmit>
	}
	USART_Transmit(0x0A);
}

void myPrint(unsigned char str[], unsigned char len){
	for(unsigned char i = 0; i < len; i++){
    12c0:	89 81       	ldd	r24, Y+1	; 0x01
    12c2:	8f 5f       	subi	r24, 0xFF	; 255
    12c4:	89 83       	std	Y+1, r24	; 0x01
    12c6:	99 81       	ldd	r25, Y+1	; 0x01
    12c8:	8c 81       	ldd	r24, Y+4	; 0x04
    12ca:	98 17       	cp	r25, r24
    12cc:	10 f3       	brcs	.-60     	; 0x1292 <myPrint+0x16>
		if(str[i] == '\0'){
			break;
		}
		USART_Transmit(str[i]);
	}
}
    12ce:	0f 90       	pop	r0
    12d0:	0f 90       	pop	r0
    12d2:	0f 90       	pop	r0
    12d4:	0f 90       	pop	r0
    12d6:	df 91       	pop	r29
    12d8:	cf 91       	pop	r28
    12da:	08 95       	ret

000012dc <__vector_18>:


ISR(USART_RX_vect){
    12dc:	1f 92       	push	r1
    12de:	0f 92       	push	r0
    12e0:	00 90 5f 00 	lds	r0, 0x005F
    12e4:	0f 92       	push	r0
    12e6:	11 24       	eor	r1, r1
    12e8:	8f 93       	push	r24
    12ea:	9f 93       	push	r25
    12ec:	ef 93       	push	r30
    12ee:	ff 93       	push	r31
    12f0:	cf 93       	push	r28
    12f2:	df 93       	push	r29
    12f4:	cd b7       	in	r28, 0x3d	; 61
    12f6:	de b7       	in	r29, 0x3e	; 62
	// dataReceived variable to allow the main function to know when new data is available
	dataReceived = 1;
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	80 93 65 01 	sts	0x0165, r24
	// Write the data from the USART I/O register to a buffer
	rxBuffer = UDR0;
    12fe:	86 ec       	ldi	r24, 0xC6	; 198
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	fc 01       	movw	r30, r24
    1304:	80 81       	ld	r24, Z
    1306:	80 93 66 01 	sts	0x0166, r24
}
    130a:	df 91       	pop	r29
    130c:	cf 91       	pop	r28
    130e:	ff 91       	pop	r31
    1310:	ef 91       	pop	r30
    1312:	9f 91       	pop	r25
    1314:	8f 91       	pop	r24
    1316:	0f 90       	pop	r0
    1318:	00 92 5f 00 	sts	0x005F, r0
    131c:	0f 90       	pop	r0
    131e:	1f 90       	pop	r1
    1320:	18 95       	reti

00001322 <SPI_MasterInit>:


#include "spi_comm.h"
#include "myUSART.h"

void SPI_MasterInit(void){
    1322:	cf 93       	push	r28
    1324:	df 93       	push	r29
    1326:	cd b7       	in	r28, 0x3d	; 61
    1328:	de b7       	in	r29, 0x3e	; 62
    132a:	e2 97       	sbiw	r28, 0x32	; 50
    132c:	0f b6       	in	r0, 0x3f	; 63
    132e:	f8 94       	cli
    1330:	de bf       	out	0x3e, r29	; 62
    1332:	0f be       	out	0x3f, r0	; 63
    1334:	cd bf       	out	0x3d, r28	; 61
	unsigned char initializingSPI[50] = "Initializing SPI now\0";
    1336:	26 e1       	ldi	r18, 0x16	; 22
    1338:	e2 e3       	ldi	r30, 0x32	; 50
    133a:	f1 e0       	ldi	r31, 0x01	; 1
    133c:	ce 01       	movw	r24, r28
    133e:	01 96       	adiw	r24, 0x01	; 1
    1340:	dc 01       	movw	r26, r24
    1342:	01 90       	ld	r0, Z+
    1344:	0d 92       	st	X+, r0
    1346:	2a 95       	dec	r18
    1348:	e1 f7       	brne	.-8      	; 0x1342 <SPI_MasterInit+0x20>
    134a:	2c e1       	ldi	r18, 0x1C	; 28
    134c:	ce 01       	movw	r24, r28
    134e:	47 96       	adiw	r24, 0x17	; 23
    1350:	fc 01       	movw	r30, r24
    1352:	32 2f       	mov	r19, r18
    1354:	11 92       	st	Z+, r1
    1356:	3a 95       	dec	r19
    1358:	e9 f7       	brne	.-6      	; 0x1354 <SPI_MasterInit+0x32>
	myPrint(initializingSPI,21);
    135a:	65 e1       	ldi	r22, 0x15	; 21
    135c:	ce 01       	movw	r24, r28
    135e:	01 96       	adiw	r24, 0x01	; 1
    1360:	0e 94 3e 09 	call	0x127c	; 0x127c <myPrint>
	// set MOSI, SCK and SS as output, all others are inputs.
	DDR_SPI = ( 1 << SPI_MOSI ) | ( 1 << SPI_SCK ) | ( 1 << SPI_SS );
    1364:	84 e2       	ldi	r24, 0x24	; 36
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	2c e2       	ldi	r18, 0x2C	; 44
    136a:	fc 01       	movw	r30, r24
    136c:	20 83       	st	Z, r18

	// Ensure that the SS line is high (no transmission) when the initialization is finished
	SPI_PORT |= ( 1 << SPI_SS );
    136e:	85 e2       	ldi	r24, 0x25	; 37
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	25 e2       	ldi	r18, 0x25	; 37
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	f9 01       	movw	r30, r18
    1378:	20 81       	ld	r18, Z
    137a:	24 60       	ori	r18, 0x04	; 4
    137c:	fc 01       	movw	r30, r24
    137e:	20 83       	st	Z, r18

	// SPI Control Register
	// SPE bit: SPI Enable
	// MSTR bit: Master select bit
	// SPR0 bit: Clock select bit, sets clock rate to Fosc/16
	SPCR = ( 1 << SPE ) | ( 1 << MSTR ) | ( 1 << SPR1 );// | ( 1 << SPR0 );
    1380:	8c e4       	ldi	r24, 0x4C	; 76
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	22 e5       	ldi	r18, 0x52	; 82
    1386:	fc 01       	movw	r30, r24
    1388:	20 83       	st	Z, r18

	// Set data sampling at the trailing edge of SCK, sets the clock polarity such that SCK is high when idle
	SPCR |= ( 1 << CPHA ) | ( 1 << CPOL );
    138a:	8c e4       	ldi	r24, 0x4C	; 76
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	2c e4       	ldi	r18, 0x4C	; 76
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	f9 01       	movw	r30, r18
    1394:	20 81       	ld	r18, Z
    1396:	2c 60       	ori	r18, 0x0C	; 12
    1398:	fc 01       	movw	r30, r24
    139a:	20 83       	st	Z, r18
}
    139c:	e2 96       	adiw	r28, 0x32	; 50
    139e:	0f b6       	in	r0, 0x3f	; 63
    13a0:	f8 94       	cli
    13a2:	de bf       	out	0x3e, r29	; 62
    13a4:	0f be       	out	0x3f, r0	; 63
    13a6:	cd bf       	out	0x3d, r28	; 61
    13a8:	df 91       	pop	r29
    13aa:	cf 91       	pop	r28
    13ac:	08 95       	ret

000013ae <SPI_MasterTransmit>:

char SPI_MasterTransmit(char cData){
    13ae:	cf 93       	push	r28
    13b0:	df 93       	push	r29
    13b2:	1f 92       	push	r1
    13b4:	cd b7       	in	r28, 0x3d	; 61
    13b6:	de b7       	in	r29, 0x3e	; 62
    13b8:	89 83       	std	Y+1, r24	; 0x01
	//unsigned char transmitting[50] = "Transmitting over SPI now\0";
	//myPrint(transmitting,30);
	// SPI Data Register, transfers data between register file and the SPI shift register
	//USART_Transmit_8_hex(cData);
	SPDR = cData;
    13ba:	8e e4       	ldi	r24, 0x4E	; 78
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	29 81       	ldd	r18, Y+1	; 0x01
    13c0:	fc 01       	movw	r30, r24
    13c2:	20 83       	st	Z, r18
	//asm volatile("nop");	// This is supposed to help

	// Wait for transmission to complete
	// SPI Status Register
	// SPIF bit: SPI Interrupt Flag, it is set when a serial transfer is complete
	while ( !( SPSR & ( 1 << SPIF ) ) );
    13c4:	00 00       	nop
    13c6:	8d e4       	ldi	r24, 0x4D	; 77
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	fc 01       	movw	r30, r24
    13cc:	80 81       	ld	r24, Z
    13ce:	88 23       	and	r24, r24
    13d0:	d4 f7       	brge	.-12     	; 0x13c6 <SPI_MasterTransmit+0x18>
	if(!(SPCR & ( 1 << MSTR) ) ){SPCR |= ( 1 << MSTR);}
    13d2:	8c e4       	ldi	r24, 0x4C	; 76
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	fc 01       	movw	r30, r24
    13d8:	80 81       	ld	r24, Z
    13da:	88 2f       	mov	r24, r24
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	80 71       	andi	r24, 0x10	; 16
    13e0:	99 27       	eor	r25, r25
    13e2:	00 97       	sbiw	r24, 0x00	; 0
    13e4:	49 f4       	brne	.+18     	; 0x13f8 <SPI_MasterTransmit+0x4a>
    13e6:	8c e4       	ldi	r24, 0x4C	; 76
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	2c e4       	ldi	r18, 0x4C	; 76
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	f9 01       	movw	r30, r18
    13f0:	20 81       	ld	r18, Z
    13f2:	20 61       	ori	r18, 0x10	; 16
    13f4:	fc 01       	movw	r30, r24
    13f6:	20 83       	st	Z, r18

	return SPDR;
    13f8:	8e e4       	ldi	r24, 0x4E	; 78
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	fc 01       	movw	r30, r24
    13fe:	80 81       	ld	r24, Z
}
    1400:	0f 90       	pop	r0
    1402:	df 91       	pop	r29
    1404:	cf 91       	pop	r28
    1406:	08 95       	ret

00001408 <__divmodhi4>:
    1408:	97 fb       	bst	r25, 7
    140a:	07 2e       	mov	r0, r23
    140c:	16 f4       	brtc	.+4      	; 0x1412 <__divmodhi4+0xa>
    140e:	00 94       	com	r0
    1410:	07 d0       	rcall	.+14     	; 0x1420 <__divmodhi4_neg1>
    1412:	77 fd       	sbrc	r23, 7
    1414:	09 d0       	rcall	.+18     	; 0x1428 <__divmodhi4_neg2>
    1416:	0e 94 46 0a 	call	0x148c	; 0x148c <__udivmodhi4>
    141a:	07 fc       	sbrc	r0, 7
    141c:	05 d0       	rcall	.+10     	; 0x1428 <__divmodhi4_neg2>
    141e:	3e f4       	brtc	.+14     	; 0x142e <__divmodhi4_exit>

00001420 <__divmodhi4_neg1>:
    1420:	90 95       	com	r25
    1422:	81 95       	neg	r24
    1424:	9f 4f       	sbci	r25, 0xFF	; 255
    1426:	08 95       	ret

00001428 <__divmodhi4_neg2>:
    1428:	70 95       	com	r23
    142a:	61 95       	neg	r22
    142c:	7f 4f       	sbci	r23, 0xFF	; 255

0000142e <__divmodhi4_exit>:
    142e:	08 95       	ret

00001430 <__divmodsi4>:
    1430:	05 2e       	mov	r0, r21
    1432:	97 fb       	bst	r25, 7
    1434:	1e f4       	brtc	.+6      	; 0x143c <__divmodsi4+0xc>
    1436:	00 94       	com	r0
    1438:	0e 94 2f 0a 	call	0x145e	; 0x145e <__negsi2>
    143c:	57 fd       	sbrc	r21, 7
    143e:	07 d0       	rcall	.+14     	; 0x144e <__divmodsi4_neg2>
    1440:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__udivmodsi4>
    1444:	07 fc       	sbrc	r0, 7
    1446:	03 d0       	rcall	.+6      	; 0x144e <__divmodsi4_neg2>
    1448:	4e f4       	brtc	.+18     	; 0x145c <__divmodsi4_exit>
    144a:	0c 94 2f 0a 	jmp	0x145e	; 0x145e <__negsi2>

0000144e <__divmodsi4_neg2>:
    144e:	50 95       	com	r21
    1450:	40 95       	com	r20
    1452:	30 95       	com	r19
    1454:	21 95       	neg	r18
    1456:	3f 4f       	sbci	r19, 0xFF	; 255
    1458:	4f 4f       	sbci	r20, 0xFF	; 255
    145a:	5f 4f       	sbci	r21, 0xFF	; 255

0000145c <__divmodsi4_exit>:
    145c:	08 95       	ret

0000145e <__negsi2>:
    145e:	90 95       	com	r25
    1460:	80 95       	com	r24
    1462:	70 95       	com	r23
    1464:	61 95       	neg	r22
    1466:	7f 4f       	sbci	r23, 0xFF	; 255
    1468:	8f 4f       	sbci	r24, 0xFF	; 255
    146a:	9f 4f       	sbci	r25, 0xFF	; 255
    146c:	08 95       	ret

0000146e <__umulhisi3>:
    146e:	a2 9f       	mul	r26, r18
    1470:	b0 01       	movw	r22, r0
    1472:	b3 9f       	mul	r27, r19
    1474:	c0 01       	movw	r24, r0
    1476:	a3 9f       	mul	r26, r19
    1478:	70 0d       	add	r23, r0
    147a:	81 1d       	adc	r24, r1
    147c:	11 24       	eor	r1, r1
    147e:	91 1d       	adc	r25, r1
    1480:	b2 9f       	mul	r27, r18
    1482:	70 0d       	add	r23, r0
    1484:	81 1d       	adc	r24, r1
    1486:	11 24       	eor	r1, r1
    1488:	91 1d       	adc	r25, r1
    148a:	08 95       	ret

0000148c <__udivmodhi4>:
    148c:	aa 1b       	sub	r26, r26
    148e:	bb 1b       	sub	r27, r27
    1490:	51 e1       	ldi	r21, 0x11	; 17
    1492:	07 c0       	rjmp	.+14     	; 0x14a2 <__udivmodhi4_ep>

00001494 <__udivmodhi4_loop>:
    1494:	aa 1f       	adc	r26, r26
    1496:	bb 1f       	adc	r27, r27
    1498:	a6 17       	cp	r26, r22
    149a:	b7 07       	cpc	r27, r23
    149c:	10 f0       	brcs	.+4      	; 0x14a2 <__udivmodhi4_ep>
    149e:	a6 1b       	sub	r26, r22
    14a0:	b7 0b       	sbc	r27, r23

000014a2 <__udivmodhi4_ep>:
    14a2:	88 1f       	adc	r24, r24
    14a4:	99 1f       	adc	r25, r25
    14a6:	5a 95       	dec	r21
    14a8:	a9 f7       	brne	.-22     	; 0x1494 <__udivmodhi4_loop>
    14aa:	80 95       	com	r24
    14ac:	90 95       	com	r25
    14ae:	bc 01       	movw	r22, r24
    14b0:	cd 01       	movw	r24, r26
    14b2:	08 95       	ret

000014b4 <__udivmodsi4>:
    14b4:	a1 e2       	ldi	r26, 0x21	; 33
    14b6:	1a 2e       	mov	r1, r26
    14b8:	aa 1b       	sub	r26, r26
    14ba:	bb 1b       	sub	r27, r27
    14bc:	fd 01       	movw	r30, r26
    14be:	0d c0       	rjmp	.+26     	; 0x14da <__udivmodsi4_ep>

000014c0 <__udivmodsi4_loop>:
    14c0:	aa 1f       	adc	r26, r26
    14c2:	bb 1f       	adc	r27, r27
    14c4:	ee 1f       	adc	r30, r30
    14c6:	ff 1f       	adc	r31, r31
    14c8:	a2 17       	cp	r26, r18
    14ca:	b3 07       	cpc	r27, r19
    14cc:	e4 07       	cpc	r30, r20
    14ce:	f5 07       	cpc	r31, r21
    14d0:	20 f0       	brcs	.+8      	; 0x14da <__udivmodsi4_ep>
    14d2:	a2 1b       	sub	r26, r18
    14d4:	b3 0b       	sbc	r27, r19
    14d6:	e4 0b       	sbc	r30, r20
    14d8:	f5 0b       	sbc	r31, r21

000014da <__udivmodsi4_ep>:
    14da:	66 1f       	adc	r22, r22
    14dc:	77 1f       	adc	r23, r23
    14de:	88 1f       	adc	r24, r24
    14e0:	99 1f       	adc	r25, r25
    14e2:	1a 94       	dec	r1
    14e4:	69 f7       	brne	.-38     	; 0x14c0 <__udivmodsi4_loop>
    14e6:	60 95       	com	r22
    14e8:	70 95       	com	r23
    14ea:	80 95       	com	r24
    14ec:	90 95       	com	r25
    14ee:	9b 01       	movw	r18, r22
    14f0:	ac 01       	movw	r20, r24
    14f2:	bd 01       	movw	r22, r26
    14f4:	cf 01       	movw	r24, r30
    14f6:	08 95       	ret

000014f8 <__cmpsf2>:
    14f8:	d4 d0       	rcall	.+424    	; 0x16a2 <__fp_cmp>
    14fa:	08 f4       	brcc	.+2      	; 0x14fe <__cmpsf2+0x6>
    14fc:	81 e0       	ldi	r24, 0x01	; 1
    14fe:	08 95       	ret

00001500 <__divsf3>:
    1500:	0c d0       	rcall	.+24     	; 0x151a <__divsf3x>
    1502:	0a c1       	rjmp	.+532    	; 0x1718 <__fp_round>
    1504:	02 d1       	rcall	.+516    	; 0x170a <__fp_pscB>
    1506:	40 f0       	brcs	.+16     	; 0x1518 <__divsf3+0x18>
    1508:	f9 d0       	rcall	.+498    	; 0x16fc <__fp_pscA>
    150a:	30 f0       	brcs	.+12     	; 0x1518 <__divsf3+0x18>
    150c:	21 f4       	brne	.+8      	; 0x1516 <__divsf3+0x16>
    150e:	5f 3f       	cpi	r21, 0xFF	; 255
    1510:	19 f0       	breq	.+6      	; 0x1518 <__divsf3+0x18>
    1512:	eb c0       	rjmp	.+470    	; 0x16ea <__fp_inf>
    1514:	51 11       	cpse	r21, r1
    1516:	34 c1       	rjmp	.+616    	; 0x1780 <__fp_szero>
    1518:	ee c0       	rjmp	.+476    	; 0x16f6 <__fp_nan>

0000151a <__divsf3x>:
    151a:	0f d1       	rcall	.+542    	; 0x173a <__fp_split3>
    151c:	98 f3       	brcs	.-26     	; 0x1504 <__divsf3+0x4>

0000151e <__divsf3_pse>:
    151e:	99 23       	and	r25, r25
    1520:	c9 f3       	breq	.-14     	; 0x1514 <__divsf3+0x14>
    1522:	55 23       	and	r21, r21
    1524:	b1 f3       	breq	.-20     	; 0x1512 <__divsf3+0x12>
    1526:	95 1b       	sub	r25, r21
    1528:	55 0b       	sbc	r21, r21
    152a:	bb 27       	eor	r27, r27
    152c:	aa 27       	eor	r26, r26
    152e:	62 17       	cp	r22, r18
    1530:	73 07       	cpc	r23, r19
    1532:	84 07       	cpc	r24, r20
    1534:	38 f0       	brcs	.+14     	; 0x1544 <__divsf3_pse+0x26>
    1536:	9f 5f       	subi	r25, 0xFF	; 255
    1538:	5f 4f       	sbci	r21, 0xFF	; 255
    153a:	22 0f       	add	r18, r18
    153c:	33 1f       	adc	r19, r19
    153e:	44 1f       	adc	r20, r20
    1540:	aa 1f       	adc	r26, r26
    1542:	a9 f3       	breq	.-22     	; 0x152e <__divsf3_pse+0x10>
    1544:	33 d0       	rcall	.+102    	; 0x15ac <__divsf3_pse+0x8e>
    1546:	0e 2e       	mov	r0, r30
    1548:	3a f0       	brmi	.+14     	; 0x1558 <__divsf3_pse+0x3a>
    154a:	e0 e8       	ldi	r30, 0x80	; 128
    154c:	30 d0       	rcall	.+96     	; 0x15ae <__divsf3_pse+0x90>
    154e:	91 50       	subi	r25, 0x01	; 1
    1550:	50 40       	sbci	r21, 0x00	; 0
    1552:	e6 95       	lsr	r30
    1554:	00 1c       	adc	r0, r0
    1556:	ca f7       	brpl	.-14     	; 0x154a <__divsf3_pse+0x2c>
    1558:	29 d0       	rcall	.+82     	; 0x15ac <__divsf3_pse+0x8e>
    155a:	fe 2f       	mov	r31, r30
    155c:	27 d0       	rcall	.+78     	; 0x15ac <__divsf3_pse+0x8e>
    155e:	66 0f       	add	r22, r22
    1560:	77 1f       	adc	r23, r23
    1562:	88 1f       	adc	r24, r24
    1564:	bb 1f       	adc	r27, r27
    1566:	26 17       	cp	r18, r22
    1568:	37 07       	cpc	r19, r23
    156a:	48 07       	cpc	r20, r24
    156c:	ab 07       	cpc	r26, r27
    156e:	b0 e8       	ldi	r27, 0x80	; 128
    1570:	09 f0       	breq	.+2      	; 0x1574 <__divsf3_pse+0x56>
    1572:	bb 0b       	sbc	r27, r27
    1574:	80 2d       	mov	r24, r0
    1576:	bf 01       	movw	r22, r30
    1578:	ff 27       	eor	r31, r31
    157a:	93 58       	subi	r25, 0x83	; 131
    157c:	5f 4f       	sbci	r21, 0xFF	; 255
    157e:	2a f0       	brmi	.+10     	; 0x158a <__divsf3_pse+0x6c>
    1580:	9e 3f       	cpi	r25, 0xFE	; 254
    1582:	51 05       	cpc	r21, r1
    1584:	68 f0       	brcs	.+26     	; 0x15a0 <__divsf3_pse+0x82>
    1586:	b1 c0       	rjmp	.+354    	; 0x16ea <__fp_inf>
    1588:	fb c0       	rjmp	.+502    	; 0x1780 <__fp_szero>
    158a:	5f 3f       	cpi	r21, 0xFF	; 255
    158c:	ec f3       	brlt	.-6      	; 0x1588 <__divsf3_pse+0x6a>
    158e:	98 3e       	cpi	r25, 0xE8	; 232
    1590:	dc f3       	brlt	.-10     	; 0x1588 <__divsf3_pse+0x6a>
    1592:	86 95       	lsr	r24
    1594:	77 95       	ror	r23
    1596:	67 95       	ror	r22
    1598:	b7 95       	ror	r27
    159a:	f7 95       	ror	r31
    159c:	9f 5f       	subi	r25, 0xFF	; 255
    159e:	c9 f7       	brne	.-14     	; 0x1592 <__divsf3_pse+0x74>
    15a0:	88 0f       	add	r24, r24
    15a2:	91 1d       	adc	r25, r1
    15a4:	96 95       	lsr	r25
    15a6:	87 95       	ror	r24
    15a8:	97 f9       	bld	r25, 7
    15aa:	08 95       	ret
    15ac:	e1 e0       	ldi	r30, 0x01	; 1
    15ae:	66 0f       	add	r22, r22
    15b0:	77 1f       	adc	r23, r23
    15b2:	88 1f       	adc	r24, r24
    15b4:	bb 1f       	adc	r27, r27
    15b6:	62 17       	cp	r22, r18
    15b8:	73 07       	cpc	r23, r19
    15ba:	84 07       	cpc	r24, r20
    15bc:	ba 07       	cpc	r27, r26
    15be:	20 f0       	brcs	.+8      	; 0x15c8 <__divsf3_pse+0xaa>
    15c0:	62 1b       	sub	r22, r18
    15c2:	73 0b       	sbc	r23, r19
    15c4:	84 0b       	sbc	r24, r20
    15c6:	ba 0b       	sbc	r27, r26
    15c8:	ee 1f       	adc	r30, r30
    15ca:	88 f7       	brcc	.-30     	; 0x15ae <__divsf3_pse+0x90>
    15cc:	e0 95       	com	r30
    15ce:	08 95       	ret

000015d0 <__fixunssfsi>:
    15d0:	bc d0       	rcall	.+376    	; 0x174a <__fp_splitA>
    15d2:	88 f0       	brcs	.+34     	; 0x15f6 <__fixunssfsi+0x26>
    15d4:	9f 57       	subi	r25, 0x7F	; 127
    15d6:	90 f0       	brcs	.+36     	; 0x15fc <__fixunssfsi+0x2c>
    15d8:	b9 2f       	mov	r27, r25
    15da:	99 27       	eor	r25, r25
    15dc:	b7 51       	subi	r27, 0x17	; 23
    15de:	a0 f0       	brcs	.+40     	; 0x1608 <__fixunssfsi+0x38>
    15e0:	d1 f0       	breq	.+52     	; 0x1616 <__fixunssfsi+0x46>
    15e2:	66 0f       	add	r22, r22
    15e4:	77 1f       	adc	r23, r23
    15e6:	88 1f       	adc	r24, r24
    15e8:	99 1f       	adc	r25, r25
    15ea:	1a f0       	brmi	.+6      	; 0x15f2 <__fixunssfsi+0x22>
    15ec:	ba 95       	dec	r27
    15ee:	c9 f7       	brne	.-14     	; 0x15e2 <__fixunssfsi+0x12>
    15f0:	12 c0       	rjmp	.+36     	; 0x1616 <__fixunssfsi+0x46>
    15f2:	b1 30       	cpi	r27, 0x01	; 1
    15f4:	81 f0       	breq	.+32     	; 0x1616 <__fixunssfsi+0x46>
    15f6:	c3 d0       	rcall	.+390    	; 0x177e <__fp_zero>
    15f8:	b1 e0       	ldi	r27, 0x01	; 1
    15fa:	08 95       	ret
    15fc:	c0 c0       	rjmp	.+384    	; 0x177e <__fp_zero>
    15fe:	67 2f       	mov	r22, r23
    1600:	78 2f       	mov	r23, r24
    1602:	88 27       	eor	r24, r24
    1604:	b8 5f       	subi	r27, 0xF8	; 248
    1606:	39 f0       	breq	.+14     	; 0x1616 <__fixunssfsi+0x46>
    1608:	b9 3f       	cpi	r27, 0xF9	; 249
    160a:	cc f3       	brlt	.-14     	; 0x15fe <__fixunssfsi+0x2e>
    160c:	86 95       	lsr	r24
    160e:	77 95       	ror	r23
    1610:	67 95       	ror	r22
    1612:	b3 95       	inc	r27
    1614:	d9 f7       	brne	.-10     	; 0x160c <__fixunssfsi+0x3c>
    1616:	3e f4       	brtc	.+14     	; 0x1626 <__fixunssfsi+0x56>
    1618:	90 95       	com	r25
    161a:	80 95       	com	r24
    161c:	70 95       	com	r23
    161e:	61 95       	neg	r22
    1620:	7f 4f       	sbci	r23, 0xFF	; 255
    1622:	8f 4f       	sbci	r24, 0xFF	; 255
    1624:	9f 4f       	sbci	r25, 0xFF	; 255
    1626:	08 95       	ret

00001628 <__floatunsisf>:
    1628:	e8 94       	clt
    162a:	09 c0       	rjmp	.+18     	; 0x163e <__floatsisf+0x12>

0000162c <__floatsisf>:
    162c:	97 fb       	bst	r25, 7
    162e:	3e f4       	brtc	.+14     	; 0x163e <__floatsisf+0x12>
    1630:	90 95       	com	r25
    1632:	80 95       	com	r24
    1634:	70 95       	com	r23
    1636:	61 95       	neg	r22
    1638:	7f 4f       	sbci	r23, 0xFF	; 255
    163a:	8f 4f       	sbci	r24, 0xFF	; 255
    163c:	9f 4f       	sbci	r25, 0xFF	; 255
    163e:	99 23       	and	r25, r25
    1640:	a9 f0       	breq	.+42     	; 0x166c <__floatsisf+0x40>
    1642:	f9 2f       	mov	r31, r25
    1644:	96 e9       	ldi	r25, 0x96	; 150
    1646:	bb 27       	eor	r27, r27
    1648:	93 95       	inc	r25
    164a:	f6 95       	lsr	r31
    164c:	87 95       	ror	r24
    164e:	77 95       	ror	r23
    1650:	67 95       	ror	r22
    1652:	b7 95       	ror	r27
    1654:	f1 11       	cpse	r31, r1
    1656:	f8 cf       	rjmp	.-16     	; 0x1648 <__floatsisf+0x1c>
    1658:	fa f4       	brpl	.+62     	; 0x1698 <__floatsisf+0x6c>
    165a:	bb 0f       	add	r27, r27
    165c:	11 f4       	brne	.+4      	; 0x1662 <__floatsisf+0x36>
    165e:	60 ff       	sbrs	r22, 0
    1660:	1b c0       	rjmp	.+54     	; 0x1698 <__floatsisf+0x6c>
    1662:	6f 5f       	subi	r22, 0xFF	; 255
    1664:	7f 4f       	sbci	r23, 0xFF	; 255
    1666:	8f 4f       	sbci	r24, 0xFF	; 255
    1668:	9f 4f       	sbci	r25, 0xFF	; 255
    166a:	16 c0       	rjmp	.+44     	; 0x1698 <__floatsisf+0x6c>
    166c:	88 23       	and	r24, r24
    166e:	11 f0       	breq	.+4      	; 0x1674 <__floatsisf+0x48>
    1670:	96 e9       	ldi	r25, 0x96	; 150
    1672:	11 c0       	rjmp	.+34     	; 0x1696 <__floatsisf+0x6a>
    1674:	77 23       	and	r23, r23
    1676:	21 f0       	breq	.+8      	; 0x1680 <__floatsisf+0x54>
    1678:	9e e8       	ldi	r25, 0x8E	; 142
    167a:	87 2f       	mov	r24, r23
    167c:	76 2f       	mov	r23, r22
    167e:	05 c0       	rjmp	.+10     	; 0x168a <__floatsisf+0x5e>
    1680:	66 23       	and	r22, r22
    1682:	71 f0       	breq	.+28     	; 0x16a0 <__floatsisf+0x74>
    1684:	96 e8       	ldi	r25, 0x86	; 134
    1686:	86 2f       	mov	r24, r22
    1688:	70 e0       	ldi	r23, 0x00	; 0
    168a:	60 e0       	ldi	r22, 0x00	; 0
    168c:	2a f0       	brmi	.+10     	; 0x1698 <__floatsisf+0x6c>
    168e:	9a 95       	dec	r25
    1690:	66 0f       	add	r22, r22
    1692:	77 1f       	adc	r23, r23
    1694:	88 1f       	adc	r24, r24
    1696:	da f7       	brpl	.-10     	; 0x168e <__floatsisf+0x62>
    1698:	88 0f       	add	r24, r24
    169a:	96 95       	lsr	r25
    169c:	87 95       	ror	r24
    169e:	97 f9       	bld	r25, 7
    16a0:	08 95       	ret

000016a2 <__fp_cmp>:
    16a2:	99 0f       	add	r25, r25
    16a4:	00 08       	sbc	r0, r0
    16a6:	55 0f       	add	r21, r21
    16a8:	aa 0b       	sbc	r26, r26
    16aa:	e0 e8       	ldi	r30, 0x80	; 128
    16ac:	fe ef       	ldi	r31, 0xFE	; 254
    16ae:	16 16       	cp	r1, r22
    16b0:	17 06       	cpc	r1, r23
    16b2:	e8 07       	cpc	r30, r24
    16b4:	f9 07       	cpc	r31, r25
    16b6:	c0 f0       	brcs	.+48     	; 0x16e8 <__fp_cmp+0x46>
    16b8:	12 16       	cp	r1, r18
    16ba:	13 06       	cpc	r1, r19
    16bc:	e4 07       	cpc	r30, r20
    16be:	f5 07       	cpc	r31, r21
    16c0:	98 f0       	brcs	.+38     	; 0x16e8 <__fp_cmp+0x46>
    16c2:	62 1b       	sub	r22, r18
    16c4:	73 0b       	sbc	r23, r19
    16c6:	84 0b       	sbc	r24, r20
    16c8:	95 0b       	sbc	r25, r21
    16ca:	39 f4       	brne	.+14     	; 0x16da <__fp_cmp+0x38>
    16cc:	0a 26       	eor	r0, r26
    16ce:	61 f0       	breq	.+24     	; 0x16e8 <__fp_cmp+0x46>
    16d0:	23 2b       	or	r18, r19
    16d2:	24 2b       	or	r18, r20
    16d4:	25 2b       	or	r18, r21
    16d6:	21 f4       	brne	.+8      	; 0x16e0 <__fp_cmp+0x3e>
    16d8:	08 95       	ret
    16da:	0a 26       	eor	r0, r26
    16dc:	09 f4       	brne	.+2      	; 0x16e0 <__fp_cmp+0x3e>
    16de:	a1 40       	sbci	r26, 0x01	; 1
    16e0:	a6 95       	lsr	r26
    16e2:	8f ef       	ldi	r24, 0xFF	; 255
    16e4:	81 1d       	adc	r24, r1
    16e6:	81 1d       	adc	r24, r1
    16e8:	08 95       	ret

000016ea <__fp_inf>:
    16ea:	97 f9       	bld	r25, 7
    16ec:	9f 67       	ori	r25, 0x7F	; 127
    16ee:	80 e8       	ldi	r24, 0x80	; 128
    16f0:	70 e0       	ldi	r23, 0x00	; 0
    16f2:	60 e0       	ldi	r22, 0x00	; 0
    16f4:	08 95       	ret

000016f6 <__fp_nan>:
    16f6:	9f ef       	ldi	r25, 0xFF	; 255
    16f8:	80 ec       	ldi	r24, 0xC0	; 192
    16fa:	08 95       	ret

000016fc <__fp_pscA>:
    16fc:	00 24       	eor	r0, r0
    16fe:	0a 94       	dec	r0
    1700:	16 16       	cp	r1, r22
    1702:	17 06       	cpc	r1, r23
    1704:	18 06       	cpc	r1, r24
    1706:	09 06       	cpc	r0, r25
    1708:	08 95       	ret

0000170a <__fp_pscB>:
    170a:	00 24       	eor	r0, r0
    170c:	0a 94       	dec	r0
    170e:	12 16       	cp	r1, r18
    1710:	13 06       	cpc	r1, r19
    1712:	14 06       	cpc	r1, r20
    1714:	05 06       	cpc	r0, r21
    1716:	08 95       	ret

00001718 <__fp_round>:
    1718:	09 2e       	mov	r0, r25
    171a:	03 94       	inc	r0
    171c:	00 0c       	add	r0, r0
    171e:	11 f4       	brne	.+4      	; 0x1724 <__fp_round+0xc>
    1720:	88 23       	and	r24, r24
    1722:	52 f0       	brmi	.+20     	; 0x1738 <__fp_round+0x20>
    1724:	bb 0f       	add	r27, r27
    1726:	40 f4       	brcc	.+16     	; 0x1738 <__fp_round+0x20>
    1728:	bf 2b       	or	r27, r31
    172a:	11 f4       	brne	.+4      	; 0x1730 <__fp_round+0x18>
    172c:	60 ff       	sbrs	r22, 0
    172e:	04 c0       	rjmp	.+8      	; 0x1738 <__fp_round+0x20>
    1730:	6f 5f       	subi	r22, 0xFF	; 255
    1732:	7f 4f       	sbci	r23, 0xFF	; 255
    1734:	8f 4f       	sbci	r24, 0xFF	; 255
    1736:	9f 4f       	sbci	r25, 0xFF	; 255
    1738:	08 95       	ret

0000173a <__fp_split3>:
    173a:	57 fd       	sbrc	r21, 7
    173c:	90 58       	subi	r25, 0x80	; 128
    173e:	44 0f       	add	r20, r20
    1740:	55 1f       	adc	r21, r21
    1742:	59 f0       	breq	.+22     	; 0x175a <__fp_splitA+0x10>
    1744:	5f 3f       	cpi	r21, 0xFF	; 255
    1746:	71 f0       	breq	.+28     	; 0x1764 <__fp_splitA+0x1a>
    1748:	47 95       	ror	r20

0000174a <__fp_splitA>:
    174a:	88 0f       	add	r24, r24
    174c:	97 fb       	bst	r25, 7
    174e:	99 1f       	adc	r25, r25
    1750:	61 f0       	breq	.+24     	; 0x176a <__fp_splitA+0x20>
    1752:	9f 3f       	cpi	r25, 0xFF	; 255
    1754:	79 f0       	breq	.+30     	; 0x1774 <__fp_splitA+0x2a>
    1756:	87 95       	ror	r24
    1758:	08 95       	ret
    175a:	12 16       	cp	r1, r18
    175c:	13 06       	cpc	r1, r19
    175e:	14 06       	cpc	r1, r20
    1760:	55 1f       	adc	r21, r21
    1762:	f2 cf       	rjmp	.-28     	; 0x1748 <__fp_split3+0xe>
    1764:	46 95       	lsr	r20
    1766:	f1 df       	rcall	.-30     	; 0x174a <__fp_splitA>
    1768:	08 c0       	rjmp	.+16     	; 0x177a <__fp_splitA+0x30>
    176a:	16 16       	cp	r1, r22
    176c:	17 06       	cpc	r1, r23
    176e:	18 06       	cpc	r1, r24
    1770:	99 1f       	adc	r25, r25
    1772:	f1 cf       	rjmp	.-30     	; 0x1756 <__fp_splitA+0xc>
    1774:	86 95       	lsr	r24
    1776:	71 05       	cpc	r23, r1
    1778:	61 05       	cpc	r22, r1
    177a:	08 94       	sec
    177c:	08 95       	ret

0000177e <__fp_zero>:
    177e:	e8 94       	clt

00001780 <__fp_szero>:
    1780:	bb 27       	eor	r27, r27
    1782:	66 27       	eor	r22, r22
    1784:	77 27       	eor	r23, r23
    1786:	cb 01       	movw	r24, r22
    1788:	97 f9       	bld	r25, 7
    178a:	08 95       	ret

0000178c <__mulsf3>:
    178c:	0b d0       	rcall	.+22     	; 0x17a4 <__mulsf3x>
    178e:	c4 cf       	rjmp	.-120    	; 0x1718 <__fp_round>
    1790:	b5 df       	rcall	.-150    	; 0x16fc <__fp_pscA>
    1792:	28 f0       	brcs	.+10     	; 0x179e <__mulsf3+0x12>
    1794:	ba df       	rcall	.-140    	; 0x170a <__fp_pscB>
    1796:	18 f0       	brcs	.+6      	; 0x179e <__mulsf3+0x12>
    1798:	95 23       	and	r25, r21
    179a:	09 f0       	breq	.+2      	; 0x179e <__mulsf3+0x12>
    179c:	a6 cf       	rjmp	.-180    	; 0x16ea <__fp_inf>
    179e:	ab cf       	rjmp	.-170    	; 0x16f6 <__fp_nan>
    17a0:	11 24       	eor	r1, r1
    17a2:	ee cf       	rjmp	.-36     	; 0x1780 <__fp_szero>

000017a4 <__mulsf3x>:
    17a4:	ca df       	rcall	.-108    	; 0x173a <__fp_split3>
    17a6:	a0 f3       	brcs	.-24     	; 0x1790 <__mulsf3+0x4>

000017a8 <__mulsf3_pse>:
    17a8:	95 9f       	mul	r25, r21
    17aa:	d1 f3       	breq	.-12     	; 0x17a0 <__mulsf3+0x14>
    17ac:	95 0f       	add	r25, r21
    17ae:	50 e0       	ldi	r21, 0x00	; 0
    17b0:	55 1f       	adc	r21, r21
    17b2:	62 9f       	mul	r22, r18
    17b4:	f0 01       	movw	r30, r0
    17b6:	72 9f       	mul	r23, r18
    17b8:	bb 27       	eor	r27, r27
    17ba:	f0 0d       	add	r31, r0
    17bc:	b1 1d       	adc	r27, r1
    17be:	63 9f       	mul	r22, r19
    17c0:	aa 27       	eor	r26, r26
    17c2:	f0 0d       	add	r31, r0
    17c4:	b1 1d       	adc	r27, r1
    17c6:	aa 1f       	adc	r26, r26
    17c8:	64 9f       	mul	r22, r20
    17ca:	66 27       	eor	r22, r22
    17cc:	b0 0d       	add	r27, r0
    17ce:	a1 1d       	adc	r26, r1
    17d0:	66 1f       	adc	r22, r22
    17d2:	82 9f       	mul	r24, r18
    17d4:	22 27       	eor	r18, r18
    17d6:	b0 0d       	add	r27, r0
    17d8:	a1 1d       	adc	r26, r1
    17da:	62 1f       	adc	r22, r18
    17dc:	73 9f       	mul	r23, r19
    17de:	b0 0d       	add	r27, r0
    17e0:	a1 1d       	adc	r26, r1
    17e2:	62 1f       	adc	r22, r18
    17e4:	83 9f       	mul	r24, r19
    17e6:	a0 0d       	add	r26, r0
    17e8:	61 1d       	adc	r22, r1
    17ea:	22 1f       	adc	r18, r18
    17ec:	74 9f       	mul	r23, r20
    17ee:	33 27       	eor	r19, r19
    17f0:	a0 0d       	add	r26, r0
    17f2:	61 1d       	adc	r22, r1
    17f4:	23 1f       	adc	r18, r19
    17f6:	84 9f       	mul	r24, r20
    17f8:	60 0d       	add	r22, r0
    17fa:	21 1d       	adc	r18, r1
    17fc:	82 2f       	mov	r24, r18
    17fe:	76 2f       	mov	r23, r22
    1800:	6a 2f       	mov	r22, r26
    1802:	11 24       	eor	r1, r1
    1804:	9f 57       	subi	r25, 0x7F	; 127
    1806:	50 40       	sbci	r21, 0x00	; 0
    1808:	8a f0       	brmi	.+34     	; 0x182c <__mulsf3_pse+0x84>
    180a:	e1 f0       	breq	.+56     	; 0x1844 <__mulsf3_pse+0x9c>
    180c:	88 23       	and	r24, r24
    180e:	4a f0       	brmi	.+18     	; 0x1822 <__mulsf3_pse+0x7a>
    1810:	ee 0f       	add	r30, r30
    1812:	ff 1f       	adc	r31, r31
    1814:	bb 1f       	adc	r27, r27
    1816:	66 1f       	adc	r22, r22
    1818:	77 1f       	adc	r23, r23
    181a:	88 1f       	adc	r24, r24
    181c:	91 50       	subi	r25, 0x01	; 1
    181e:	50 40       	sbci	r21, 0x00	; 0
    1820:	a9 f7       	brne	.-22     	; 0x180c <__mulsf3_pse+0x64>
    1822:	9e 3f       	cpi	r25, 0xFE	; 254
    1824:	51 05       	cpc	r21, r1
    1826:	70 f0       	brcs	.+28     	; 0x1844 <__mulsf3_pse+0x9c>
    1828:	60 cf       	rjmp	.-320    	; 0x16ea <__fp_inf>
    182a:	aa cf       	rjmp	.-172    	; 0x1780 <__fp_szero>
    182c:	5f 3f       	cpi	r21, 0xFF	; 255
    182e:	ec f3       	brlt	.-6      	; 0x182a <__mulsf3_pse+0x82>
    1830:	98 3e       	cpi	r25, 0xE8	; 232
    1832:	dc f3       	brlt	.-10     	; 0x182a <__mulsf3_pse+0x82>
    1834:	86 95       	lsr	r24
    1836:	77 95       	ror	r23
    1838:	67 95       	ror	r22
    183a:	b7 95       	ror	r27
    183c:	f7 95       	ror	r31
    183e:	e7 95       	ror	r30
    1840:	9f 5f       	subi	r25, 0xFF	; 255
    1842:	c1 f7       	brne	.-16     	; 0x1834 <__mulsf3_pse+0x8c>
    1844:	fe 2b       	or	r31, r30
    1846:	88 0f       	add	r24, r24
    1848:	91 1d       	adc	r25, r1
    184a:	96 95       	lsr	r25
    184c:	87 95       	ror	r24
    184e:	97 f9       	bld	r25, 7
    1850:	08 95       	ret

00001852 <_exit>:
    1852:	f8 94       	cli

00001854 <__stop_program>:
    1854:	ff cf       	rjmp	.-2      	; 0x1854 <__stop_program>
