
imu_spi_com.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000070  00800100  00001a7c  00001b10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a7c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800170  00800170  00001b80  2**0
                  ALLOC
  3 .stab         00001ed8  00000000  00000000  00001b80  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000126d  00000000  00000000  00003a58  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00004cc5  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000160  00000000  00000000  00004cd8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000082a  00000000  00000000  00004e38  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000000dc  00000000  00000000  00005662  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000470  00000000  00000000  0000573e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 7a 08 	jmp	0x10f4	; 0x10f4 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec e7       	ldi	r30, 0x7C	; 124
      7c:	fa e1       	ldi	r31, 0x1A	; 26
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a0 37       	cpi	r26, 0x70	; 112
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	a0 e7       	ldi	r26, 0x70	; 112
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a8 37       	cpi	r26, 0x78	; 120
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 9c 01 	call	0x338	; 0x338 <main>
      9e:	0c 94 3c 0d 	jmp	0x1a78	; 0x1a78 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <IMU_init>:
#include "IMU_module.h"
#include "myUSART.h"
#include <util/delay.h>


void IMU_init(){
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
      aa:	00 d0       	rcall	.+0      	; 0xac <IMU_init+0x6>
      ac:	cd b7       	in	r28, 0x3d	; 61
      ae:	de b7       	in	r29, 0x3e	; 62
	SPI_MasterInit();
      b0:	0e 94 9d 08 	call	0x113a	; 0x113a <SPI_MasterInit>
	// The bit pattern to turn on acceleration sensing in the Z,Y and X directions
	char setCtrlReg5 = ( 1 << ACC_Z ) | ( 1 << ACC_Y ) | ( 1 << ACC_X );
      b4:	88 e3       	ldi	r24, 0x38	; 56
      b6:	89 83       	std	Y+1, r24	; 0x01

	// Send write address
	SPI_Initiate_Transmission();
      b8:	85 e2       	ldi	r24, 0x25	; 37
      ba:	90 e0       	ldi	r25, 0x00	; 0
      bc:	25 e2       	ldi	r18, 0x25	; 37
      be:	30 e0       	ldi	r19, 0x00	; 0
      c0:	f9 01       	movw	r30, r18
      c2:	20 81       	ld	r18, Z
      c4:	2b 7f       	andi	r18, 0xFB	; 251
      c6:	fc 01       	movw	r30, r24
      c8:	20 83       	st	Z, r18
	SPI_MasterTransmit( WRITE | CTRL_REG5_XL );
      ca:	8f e1       	ldi	r24, 0x1F	; 31
      cc:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <SPI_MasterTransmit>

	// Send ctrlReg5 bit pattern to turn on X,Y,Z acceleration sensors
	SPI_MasterTransmit( setCtrlReg5 );
      d0:	89 81       	ldd	r24, Y+1	; 0x01
      d2:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <SPI_MasterTransmit>
	SPI_End_Transmission();
      d6:	85 e2       	ldi	r24, 0x25	; 37
      d8:	90 e0       	ldi	r25, 0x00	; 0
      da:	25 e2       	ldi	r18, 0x25	; 37
      dc:	30 e0       	ldi	r19, 0x00	; 0
      de:	f9 01       	movw	r30, r18
      e0:	20 81       	ld	r18, Z
      e2:	24 60       	ori	r18, 0x04	; 4
      e4:	fc 01       	movw	r30, r24
      e6:	20 83       	st	Z, r18


	char setCtrlReg8 = ( 1 << IF_ADD_INC );
      e8:	84 e0       	ldi	r24, 0x04	; 4
      ea:	8a 83       	std	Y+2, r24	; 0x02

	// Send write address
		SPI_Initiate_Transmission();
      ec:	85 e2       	ldi	r24, 0x25	; 37
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	25 e2       	ldi	r18, 0x25	; 37
      f2:	30 e0       	ldi	r19, 0x00	; 0
      f4:	f9 01       	movw	r30, r18
      f6:	20 81       	ld	r18, Z
      f8:	2b 7f       	andi	r18, 0xFB	; 251
      fa:	fc 01       	movw	r30, r24
      fc:	20 83       	st	Z, r18

	SPI_MasterTransmit( WRITE | CTRL_REG8 );
      fe:	82 e2       	ldi	r24, 0x22	; 34
     100:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <SPI_MasterTransmit>
	// Send setCtrlReg8 bit pattern to turn auto increment registers on
	SPI_MasterTransmit( setCtrlReg8 );
     104:	8a 81       	ldd	r24, Y+2	; 0x02
     106:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <SPI_MasterTransmit>
		SPI_End_Transmission();
     10a:	85 e2       	ldi	r24, 0x25	; 37
     10c:	90 e0       	ldi	r25, 0x00	; 0
     10e:	25 e2       	ldi	r18, 0x25	; 37
     110:	30 e0       	ldi	r19, 0x00	; 0
     112:	f9 01       	movw	r30, r18
     114:	20 81       	ld	r18, Z
     116:	24 60       	ori	r18, 0x04	; 4
     118:	fc 01       	movw	r30, r24
     11a:	20 83       	st	Z, r18
	//unsigned char doneIMU[50] = "Finished initializing IMU\0";
	//myPrint(doneIMU,30);
}
     11c:	0f 90       	pop	r0
     11e:	0f 90       	pop	r0
     120:	df 91       	pop	r29
     122:	cf 91       	pop	r28
     124:	08 95       	ret

00000126 <IMU_read_acc>:

void IMU_read_acc(int *accBuffer){
     126:	0f 93       	push	r16
     128:	1f 93       	push	r17
     12a:	cf 93       	push	r28
     12c:	df 93       	push	r29
     12e:	cd b7       	in	r28, 0x3d	; 61
     130:	de b7       	in	r29, 0x3e	; 62
     132:	2d 97       	sbiw	r28, 0x0d	; 13
     134:	0f b6       	in	r0, 0x3f	; 63
     136:	f8 94       	cli
     138:	de bf       	out	0x3e, r29	; 62
     13a:	0f be       	out	0x3f, r0	; 63
     13c:	cd bf       	out	0x3d, r28	; 61
     13e:	9d 87       	std	Y+13, r25	; 0x0d
     140:	8c 87       	std	Y+12, r24	; 0x0c
	// char sendingRequest[27] = "Now sending request to IMU\n";
	// char readingFromSPDR[18] = "Reading from SPDR\n";

	char spiBuffer[6];
	int *acc = accBuffer;
     142:	8c 85       	ldd	r24, Y+12	; 0x0c
     144:	9d 85       	ldd	r25, Y+13	; 0x0d
     146:	9d 83       	std	Y+5, r25	; 0x05
     148:	8c 83       	std	Y+4, r24	; 0x04

	// Select the IMU as an SPI Slave

	SPI_Initiate_Transmission();
     14a:	85 e2       	ldi	r24, 0x25	; 37
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	25 e2       	ldi	r18, 0x25	; 37
     150:	30 e0       	ldi	r19, 0x00	; 0
     152:	f9 01       	movw	r30, r18
     154:	20 81       	ld	r18, Z
     156:	2b 7f       	andi	r18, 0xFB	; 251
     158:	fc 01       	movw	r30, r24
     15a:	20 83       	st	Z, r18


	// Send "read from acceleration output register" signal
	SPI_MasterTransmit( READ | OUT_Z_XL );
     15c:	8c ea       	ldi	r24, 0xAC	; 172
     15e:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <SPI_MasterTransmit>
	for (unsigned char i = 0; i < 2; i++){
     162:	19 82       	std	Y+1, r1	; 0x01
     164:	10 c0       	rjmp	.+32     	; 0x186 <IMU_read_acc+0x60>
			spiBuffer[i] = SPI_MasterTransmit(0x00);
     166:	89 81       	ldd	r24, Y+1	; 0x01
     168:	08 2f       	mov	r16, r24
     16a:	10 e0       	ldi	r17, 0x00	; 0
     16c:	80 e0       	ldi	r24, 0x00	; 0
     16e:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <SPI_MasterTransmit>
     172:	28 2f       	mov	r18, r24
     174:	ce 01       	movw	r24, r28
     176:	06 96       	adiw	r24, 0x06	; 6
     178:	80 0f       	add	r24, r16
     17a:	91 1f       	adc	r25, r17
     17c:	fc 01       	movw	r30, r24
     17e:	20 83       	st	Z, r18
	SPI_Initiate_Transmission();


	// Send "read from acceleration output register" signal
	SPI_MasterTransmit( READ | OUT_Z_XL );
	for (unsigned char i = 0; i < 2; i++){
     180:	89 81       	ldd	r24, Y+1	; 0x01
     182:	8f 5f       	subi	r24, 0xFF	; 255
     184:	89 83       	std	Y+1, r24	; 0x01
     186:	89 81       	ldd	r24, Y+1	; 0x01
     188:	82 30       	cpi	r24, 0x02	; 2
     18a:	68 f3       	brcs	.-38     	; 0x166 <IMU_read_acc+0x40>
			spiBuffer[i] = SPI_MasterTransmit(0x00);
	}
	SPI_End_Transmission();
     18c:	85 e2       	ldi	r24, 0x25	; 37
     18e:	90 e0       	ldi	r25, 0x00	; 0
     190:	25 e2       	ldi	r18, 0x25	; 37
     192:	30 e0       	ldi	r19, 0x00	; 0
     194:	f9 01       	movw	r30, r18
     196:	20 81       	ld	r18, Z
     198:	24 60       	ori	r18, 0x04	; 4
     19a:	fc 01       	movw	r30, r24
     19c:	20 83       	st	Z, r18

	SPI_Initiate_Transmission();
     19e:	85 e2       	ldi	r24, 0x25	; 37
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	25 e2       	ldi	r18, 0x25	; 37
     1a4:	30 e0       	ldi	r19, 0x00	; 0
     1a6:	f9 01       	movw	r30, r18
     1a8:	20 81       	ld	r18, Z
     1aa:	2b 7f       	andi	r18, 0xFB	; 251
     1ac:	fc 01       	movw	r30, r24
     1ae:	20 83       	st	Z, r18
	SPI_MasterTransmit( READ | OUT_Y_XL );
     1b0:	8a ea       	ldi	r24, 0xAA	; 170
     1b2:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <SPI_MasterTransmit>
	for (unsigned char i = 2; i < 4; i++){
     1b6:	82 e0       	ldi	r24, 0x02	; 2
     1b8:	8a 83       	std	Y+2, r24	; 0x02
     1ba:	10 c0       	rjmp	.+32     	; 0x1dc <IMU_read_acc+0xb6>
			spiBuffer[i] = SPI_MasterTransmit(0x00);
     1bc:	8a 81       	ldd	r24, Y+2	; 0x02
     1be:	08 2f       	mov	r16, r24
     1c0:	10 e0       	ldi	r17, 0x00	; 0
     1c2:	80 e0       	ldi	r24, 0x00	; 0
     1c4:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <SPI_MasterTransmit>
     1c8:	28 2f       	mov	r18, r24
     1ca:	ce 01       	movw	r24, r28
     1cc:	06 96       	adiw	r24, 0x06	; 6
     1ce:	80 0f       	add	r24, r16
     1d0:	91 1f       	adc	r25, r17
     1d2:	fc 01       	movw	r30, r24
     1d4:	20 83       	st	Z, r18
	}
	SPI_End_Transmission();

	SPI_Initiate_Transmission();
	SPI_MasterTransmit( READ | OUT_Y_XL );
	for (unsigned char i = 2; i < 4; i++){
     1d6:	8a 81       	ldd	r24, Y+2	; 0x02
     1d8:	8f 5f       	subi	r24, 0xFF	; 255
     1da:	8a 83       	std	Y+2, r24	; 0x02
     1dc:	8a 81       	ldd	r24, Y+2	; 0x02
     1de:	84 30       	cpi	r24, 0x04	; 4
     1e0:	68 f3       	brcs	.-38     	; 0x1bc <IMU_read_acc+0x96>
			spiBuffer[i] = SPI_MasterTransmit(0x00);
	}
	SPI_End_Transmission();
     1e2:	85 e2       	ldi	r24, 0x25	; 37
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	25 e2       	ldi	r18, 0x25	; 37
     1e8:	30 e0       	ldi	r19, 0x00	; 0
     1ea:	f9 01       	movw	r30, r18
     1ec:	20 81       	ld	r18, Z
     1ee:	24 60       	ori	r18, 0x04	; 4
     1f0:	fc 01       	movw	r30, r24
     1f2:	20 83       	st	Z, r18

	SPI_Initiate_Transmission();
     1f4:	85 e2       	ldi	r24, 0x25	; 37
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	25 e2       	ldi	r18, 0x25	; 37
     1fa:	30 e0       	ldi	r19, 0x00	; 0
     1fc:	f9 01       	movw	r30, r18
     1fe:	20 81       	ld	r18, Z
     200:	2b 7f       	andi	r18, 0xFB	; 251
     202:	fc 01       	movw	r30, r24
     204:	20 83       	st	Z, r18
	SPI_MasterTransmit( READ | OUT_Z_XL );
     206:	8c ea       	ldi	r24, 0xAC	; 172
     208:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <SPI_MasterTransmit>
	for (unsigned char i = 4; i < 6; i++){
     20c:	84 e0       	ldi	r24, 0x04	; 4
     20e:	8b 83       	std	Y+3, r24	; 0x03
     210:	10 c0       	rjmp	.+32     	; 0x232 <IMU_read_acc+0x10c>
		spiBuffer[i] = SPI_MasterTransmit(0x00);
     212:	8b 81       	ldd	r24, Y+3	; 0x03
     214:	08 2f       	mov	r16, r24
     216:	10 e0       	ldi	r17, 0x00	; 0
     218:	80 e0       	ldi	r24, 0x00	; 0
     21a:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <SPI_MasterTransmit>
     21e:	28 2f       	mov	r18, r24
     220:	ce 01       	movw	r24, r28
     222:	06 96       	adiw	r24, 0x06	; 6
     224:	80 0f       	add	r24, r16
     226:	91 1f       	adc	r25, r17
     228:	fc 01       	movw	r30, r24
     22a:	20 83       	st	Z, r18
	}
	SPI_End_Transmission();

	SPI_Initiate_Transmission();
	SPI_MasterTransmit( READ | OUT_Z_XL );
	for (unsigned char i = 4; i < 6; i++){
     22c:	8b 81       	ldd	r24, Y+3	; 0x03
     22e:	8f 5f       	subi	r24, 0xFF	; 255
     230:	8b 83       	std	Y+3, r24	; 0x03
     232:	8b 81       	ldd	r24, Y+3	; 0x03
     234:	86 30       	cpi	r24, 0x06	; 6
     236:	68 f3       	brcs	.-38     	; 0x212 <IMU_read_acc+0xec>
		spiBuffer[i] = SPI_MasterTransmit(0x00);
	}
	SPI_End_Transmission();
     238:	85 e2       	ldi	r24, 0x25	; 37
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	25 e2       	ldi	r18, 0x25	; 37
     23e:	30 e0       	ldi	r19, 0x00	; 0
     240:	f9 01       	movw	r30, r18
     242:	20 81       	ld	r18, Z
     244:	24 60       	ori	r18, 0x04	; 4
     246:	fc 01       	movw	r30, r24
     248:	20 83       	st	Z, r18


	acc[0] = (spiBuffer[1] << 8 | spiBuffer[0]);
     24a:	8f 81       	ldd	r24, Y+7	; 0x07
     24c:	88 2f       	mov	r24, r24
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	38 2f       	mov	r19, r24
     252:	22 27       	eor	r18, r18
     254:	8e 81       	ldd	r24, Y+6	; 0x06
     256:	88 2f       	mov	r24, r24
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	28 2b       	or	r18, r24
     25c:	39 2b       	or	r19, r25
     25e:	8c 81       	ldd	r24, Y+4	; 0x04
     260:	9d 81       	ldd	r25, Y+5	; 0x05
     262:	fc 01       	movw	r30, r24
     264:	31 83       	std	Z+1, r19	; 0x01
     266:	20 83       	st	Z, r18
	acc[1] = (spiBuffer[3] << 8 | spiBuffer[2]);
     268:	8c 81       	ldd	r24, Y+4	; 0x04
     26a:	9d 81       	ldd	r25, Y+5	; 0x05
     26c:	02 96       	adiw	r24, 0x02	; 2
     26e:	29 85       	ldd	r18, Y+9	; 0x09
     270:	22 2f       	mov	r18, r18
     272:	30 e0       	ldi	r19, 0x00	; 0
     274:	52 2f       	mov	r21, r18
     276:	44 27       	eor	r20, r20
     278:	28 85       	ldd	r18, Y+8	; 0x08
     27a:	22 2f       	mov	r18, r18
     27c:	30 e0       	ldi	r19, 0x00	; 0
     27e:	24 2b       	or	r18, r20
     280:	35 2b       	or	r19, r21
     282:	fc 01       	movw	r30, r24
     284:	31 83       	std	Z+1, r19	; 0x01
     286:	20 83       	st	Z, r18
	acc[2] = (spiBuffer[5] << 8 | spiBuffer[4]);
     288:	8c 81       	ldd	r24, Y+4	; 0x04
     28a:	9d 81       	ldd	r25, Y+5	; 0x05
     28c:	04 96       	adiw	r24, 0x04	; 4
     28e:	2b 85       	ldd	r18, Y+11	; 0x0b
     290:	22 2f       	mov	r18, r18
     292:	30 e0       	ldi	r19, 0x00	; 0
     294:	52 2f       	mov	r21, r18
     296:	44 27       	eor	r20, r20
     298:	2a 85       	ldd	r18, Y+10	; 0x0a
     29a:	22 2f       	mov	r18, r18
     29c:	30 e0       	ldi	r19, 0x00	; 0
     29e:	24 2b       	or	r18, r20
     2a0:	35 2b       	or	r19, r21
     2a2:	fc 01       	movw	r30, r24
     2a4:	31 83       	std	Z+1, r19	; 0x01
     2a6:	20 83       	st	Z, r18
}
     2a8:	2d 96       	adiw	r28, 0x0d	; 13
     2aa:	0f b6       	in	r0, 0x3f	; 63
     2ac:	f8 94       	cli
     2ae:	de bf       	out	0x3e, r29	; 62
     2b0:	0f be       	out	0x3f, r0	; 63
     2b2:	cd bf       	out	0x3d, r28	; 61
     2b4:	df 91       	pop	r29
     2b6:	cf 91       	pop	r28
     2b8:	1f 91       	pop	r17
     2ba:	0f 91       	pop	r16
     2bc:	08 95       	ret

000002be <whoami>:

char whoami(void){
     2be:	cf 93       	push	r28
     2c0:	df 93       	push	r29
     2c2:	1f 92       	push	r1
     2c4:	cd b7       	in	r28, 0x3d	; 61
     2c6:	de b7       	in	r29, 0x3e	; 62
	char buff;
	SPI_Initiate_Transmission();
     2c8:	85 e2       	ldi	r24, 0x25	; 37
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	25 e2       	ldi	r18, 0x25	; 37
     2ce:	30 e0       	ldi	r19, 0x00	; 0
     2d0:	f9 01       	movw	r30, r18
     2d2:	20 81       	ld	r18, Z
     2d4:	2b 7f       	andi	r18, 0xFB	; 251
     2d6:	fc 01       	movw	r30, r24
     2d8:	20 83       	st	Z, r18
	SPI_MasterTransmit( READ | WHO_AM_I );	// Request Identification
     2da:	8f e8       	ldi	r24, 0x8F	; 143
     2dc:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <SPI_MasterTransmit>
	buff = SPI_MasterTransmit(0x00);	// Store Identification
     2e0:	80 e0       	ldi	r24, 0x00	; 0
     2e2:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <SPI_MasterTransmit>
     2e6:	89 83       	std	Y+1, r24	; 0x01
	SPI_End_Transmission();
     2e8:	85 e2       	ldi	r24, 0x25	; 37
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	25 e2       	ldi	r18, 0x25	; 37
     2ee:	30 e0       	ldi	r19, 0x00	; 0
     2f0:	f9 01       	movw	r30, r18
     2f2:	20 81       	ld	r18, Z
     2f4:	24 60       	ori	r18, 0x04	; 4
     2f6:	fc 01       	movw	r30, r24
     2f8:	20 83       	st	Z, r18

	return buff;
     2fa:	89 81       	ldd	r24, Y+1	; 0x01
}
     2fc:	0f 90       	pop	r0
     2fe:	df 91       	pop	r29
     300:	cf 91       	pop	r28
     302:	08 95       	ret

00000304 <usart_putchar_printf>:
#include "myUSART.h"
#include <stdio.h>

#define BAUD 9600

int usart_putchar_printf(char var, FILE *stream){
     304:	cf 93       	push	r28
     306:	df 93       	push	r29
     308:	00 d0       	rcall	.+0      	; 0x30a <usart_putchar_printf+0x6>
     30a:	1f 92       	push	r1
     30c:	cd b7       	in	r28, 0x3d	; 61
     30e:	de b7       	in	r29, 0x3e	; 62
     310:	89 83       	std	Y+1, r24	; 0x01
     312:	7b 83       	std	Y+3, r23	; 0x03
     314:	6a 83       	std	Y+2, r22	; 0x02
	if(var == 'n'){USART_Transmit('\r');}
     316:	89 81       	ldd	r24, Y+1	; 0x01
     318:	8e 36       	cpi	r24, 0x6E	; 110
     31a:	19 f4       	brne	.+6      	; 0x322 <usart_putchar_printf+0x1e>
     31c:	8d e0       	ldi	r24, 0x0D	; 13
     31e:	0e 94 b9 02 	call	0x572	; 0x572 <USART_Transmit>
	USART_Transmit(var);
     322:	89 81       	ldd	r24, Y+1	; 0x01
     324:	0e 94 b9 02 	call	0x572	; 0x572 <USART_Transmit>
	return 0;
     328:	80 e0       	ldi	r24, 0x00	; 0
     32a:	90 e0       	ldi	r25, 0x00	; 0
}
     32c:	0f 90       	pop	r0
     32e:	0f 90       	pop	r0
     330:	0f 90       	pop	r0
     332:	df 91       	pop	r29
     334:	cf 91       	pop	r28
     336:	08 95       	ret

00000338 <main>:
static FILE mystdout = FDEV_SETUP_STREAM(usart_putchar_printf, NULL, _FDEV_SETUP_WRITE);


int main(){
     338:	cf 93       	push	r28
     33a:	df 93       	push	r29
     33c:	cd b7       	in	r28, 0x3d	; 61
     33e:	de b7       	in	r29, 0x3e	; 62
     340:	a9 97       	sbiw	r28, 0x29	; 41
     342:	0f b6       	in	r0, 0x3f	; 63
     344:	f8 94       	cli
     346:	de bf       	out	0x3e, r29	; 62
     348:	0f be       	out	0x3f, r0	; 63
     34a:	cd bf       	out	0x3d, r28	; 61
	stdout = &mystdout;
     34c:	80 e0       	ldi	r24, 0x00	; 0
     34e:	91 e0       	ldi	r25, 0x01	; 1
     350:	90 93 75 01 	sts	0x0175, r25
     354:	80 93 74 01 	sts	0x0174, r24
	asm("sei");
     358:	78 94       	sei
	USART_init(BAUD);
     35a:	80 e8       	ldi	r24, 0x80	; 128
     35c:	95 e2       	ldi	r25, 0x25	; 37
     35e:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <USART_init>
	IMU_init();
     362:	0e 94 53 00 	call	0xa6	; 0xa6 <IMU_init>
	int acc_data[3];
	unsigned char X[10] = "X: \0";
     366:	85 e0       	ldi	r24, 0x05	; 5
     368:	e0 e2       	ldi	r30, 0x20	; 32
     36a:	f1 e0       	ldi	r31, 0x01	; 1
     36c:	de 01       	movw	r26, r28
     36e:	1c 96       	adiw	r26, 0x0c	; 12
     370:	01 90       	ld	r0, Z+
     372:	0d 92       	st	X+, r0
     374:	8a 95       	dec	r24
     376:	e1 f7       	brne	.-8      	; 0x370 <main+0x38>
     378:	25 e0       	ldi	r18, 0x05	; 5
     37a:	ce 01       	movw	r24, r28
     37c:	41 96       	adiw	r24, 0x11	; 17
     37e:	fc 01       	movw	r30, r24
     380:	32 2f       	mov	r19, r18
     382:	11 92       	st	Z+, r1
     384:	3a 95       	dec	r19
     386:	e9 f7       	brne	.-6      	; 0x382 <main+0x4a>
	unsigned char Y[10] = "Y: \0";
     388:	85 e0       	ldi	r24, 0x05	; 5
     38a:	ea e2       	ldi	r30, 0x2A	; 42
     38c:	f1 e0       	ldi	r31, 0x01	; 1
     38e:	de 01       	movw	r26, r28
     390:	56 96       	adiw	r26, 0x16	; 22
     392:	01 90       	ld	r0, Z+
     394:	0d 92       	st	X+, r0
     396:	8a 95       	dec	r24
     398:	e1 f7       	brne	.-8      	; 0x392 <main+0x5a>
     39a:	25 e0       	ldi	r18, 0x05	; 5
     39c:	ce 01       	movw	r24, r28
     39e:	4b 96       	adiw	r24, 0x1b	; 27
     3a0:	fc 01       	movw	r30, r24
     3a2:	32 2f       	mov	r19, r18
     3a4:	11 92       	st	Z+, r1
     3a6:	3a 95       	dec	r19
     3a8:	e9 f7       	brne	.-6      	; 0x3a4 <main+0x6c>
	unsigned char Z[10] = "Z: \0";
     3aa:	85 e0       	ldi	r24, 0x05	; 5
     3ac:	e4 e3       	ldi	r30, 0x34	; 52
     3ae:	f1 e0       	ldi	r31, 0x01	; 1
     3b0:	de 01       	movw	r26, r28
     3b2:	90 96       	adiw	r26, 0x20	; 32
     3b4:	01 90       	ld	r0, Z+
     3b6:	0d 92       	st	X+, r0
     3b8:	8a 95       	dec	r24
     3ba:	e1 f7       	brne	.-8      	; 0x3b4 <main+0x7c>
     3bc:	25 e0       	ldi	r18, 0x05	; 5
     3be:	ce 01       	movw	r24, r28
     3c0:	85 96       	adiw	r24, 0x25	; 37
     3c2:	fc 01       	movw	r30, r24
     3c4:	32 2f       	mov	r19, r18
     3c6:	11 92       	st	Z+, r1
     3c8:	3a 95       	dec	r19
     3ca:	e9 f7       	brne	.-6      	; 0x3c6 <main+0x8e>
	float acc_res = 4/65536;
     3cc:	1a 82       	std	Y+2, r1	; 0x02
     3ce:	1b 82       	std	Y+3, r1	; 0x03
     3d0:	1c 82       	std	Y+4, r1	; 0x04
     3d2:	1d 82       	std	Y+5, r1	; 0x05

	while(1){
		if(dataReceived){
     3d4:	80 91 70 01 	lds	r24, 0x0170
     3d8:	88 23       	and	r24, r24
     3da:	09 f4       	brne	.+2      	; 0x3de <main+0xa6>
     3dc:	c9 c0       	rjmp	.+402    	; 0x570 <main+0x238>
			if (rxBuffer == '0' ){dataReceived = 0;};
     3de:	80 91 71 01 	lds	r24, 0x0171
     3e2:	80 33       	cpi	r24, 0x30	; 48
     3e4:	11 f4       	brne	.+4      	; 0x3ea <main+0xb2>
     3e6:	10 92 70 01 	sts	0x0170, r1
			IMU_read_acc(acc_data);
     3ea:	ce 01       	movw	r24, r28
     3ec:	06 96       	adiw	r24, 0x06	; 6
     3ee:	0e 94 93 00 	call	0x126	; 0x126 <IMU_read_acc>

			for (unsigned char i = 0; i < 3; i++){
     3f2:	19 82       	std	Y+1, r1	; 0x01
     3f4:	23 c0       	rjmp	.+70     	; 0x43c <main+0x104>
				acc_data[i] = ~acc_data[i] + 1;
     3f6:	89 81       	ldd	r24, Y+1	; 0x01
     3f8:	88 2f       	mov	r24, r24
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	29 81       	ldd	r18, Y+1	; 0x01
     3fe:	22 2f       	mov	r18, r18
     400:	30 e0       	ldi	r19, 0x00	; 0
     402:	22 0f       	add	r18, r18
     404:	33 1f       	adc	r19, r19
     406:	ae 01       	movw	r20, r28
     408:	4f 5f       	subi	r20, 0xFF	; 255
     40a:	5f 4f       	sbci	r21, 0xFF	; 255
     40c:	24 0f       	add	r18, r20
     40e:	35 1f       	adc	r19, r21
     410:	2b 5f       	subi	r18, 0xFB	; 251
     412:	3f 4f       	sbci	r19, 0xFF	; 255
     414:	f9 01       	movw	r30, r18
     416:	20 81       	ld	r18, Z
     418:	31 81       	ldd	r19, Z+1	; 0x01
     41a:	31 95       	neg	r19
     41c:	21 95       	neg	r18
     41e:	31 09       	sbc	r19, r1
     420:	88 0f       	add	r24, r24
     422:	99 1f       	adc	r25, r25
     424:	ae 01       	movw	r20, r28
     426:	4f 5f       	subi	r20, 0xFF	; 255
     428:	5f 4f       	sbci	r21, 0xFF	; 255
     42a:	84 0f       	add	r24, r20
     42c:	95 1f       	adc	r25, r21
     42e:	05 96       	adiw	r24, 0x05	; 5
     430:	fc 01       	movw	r30, r24
     432:	31 83       	std	Z+1, r19	; 0x01
     434:	20 83       	st	Z, r18
	while(1){
		if(dataReceived){
			if (rxBuffer == '0' ){dataReceived = 0;};
			IMU_read_acc(acc_data);

			for (unsigned char i = 0; i < 3; i++){
     436:	89 81       	ldd	r24, Y+1	; 0x01
     438:	8f 5f       	subi	r24, 0xFF	; 255
     43a:	89 83       	std	Y+1, r24	; 0x01
     43c:	89 81       	ldd	r24, Y+1	; 0x01
     43e:	83 30       	cpi	r24, 0x03	; 3
     440:	d0 f2       	brcs	.-76     	; 0x3f6 <main+0xbe>
				acc_data[i] = ~acc_data[i] + 1;
			}
			//myPrint(X,10);
			USART_Transmit(0x20);
     442:	80 e2       	ldi	r24, 0x20	; 32
     444:	0e 94 b9 02 	call	0x572	; 0x572 <USART_Transmit>
			printf("X: %f", acc_res*acc_data[0]);
     448:	8e 81       	ldd	r24, Y+6	; 0x06
     44a:	9f 81       	ldd	r25, Y+7	; 0x07
     44c:	aa 27       	eor	r26, r26
     44e:	97 fd       	sbrc	r25, 7
     450:	a0 95       	com	r26
     452:	ba 2f       	mov	r27, r26
     454:	bc 01       	movw	r22, r24
     456:	cd 01       	movw	r24, r26
     458:	0e 94 8a 09 	call	0x1314	; 0x1314 <__floatsisf>
     45c:	dc 01       	movw	r26, r24
     45e:	cb 01       	movw	r24, r22
     460:	2a 81       	ldd	r18, Y+2	; 0x02
     462:	3b 81       	ldd	r19, Y+3	; 0x03
     464:	4c 81       	ldd	r20, Y+4	; 0x04
     466:	5d 81       	ldd	r21, Y+5	; 0x05
     468:	bc 01       	movw	r22, r24
     46a:	cd 01       	movw	r24, r26
     46c:	0e 94 c5 09 	call	0x138a	; 0x138a <__mulsf3>
     470:	dc 01       	movw	r26, r24
     472:	cb 01       	movw	r24, r22
     474:	2b 2f       	mov	r18, r27
     476:	2f 93       	push	r18
     478:	2a 2f       	mov	r18, r26
     47a:	2f 93       	push	r18
     47c:	29 2f       	mov	r18, r25
     47e:	2f 93       	push	r18
     480:	8f 93       	push	r24
     482:	8e e0       	ldi	r24, 0x0E	; 14
     484:	91 e0       	ldi	r25, 0x01	; 1
     486:	89 2f       	mov	r24, r25
     488:	8f 93       	push	r24
     48a:	8e e0       	ldi	r24, 0x0E	; 14
     48c:	91 e0       	ldi	r25, 0x01	; 1
     48e:	8f 93       	push	r24
     490:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <printf>
     494:	0f 90       	pop	r0
     496:	0f 90       	pop	r0
     498:	0f 90       	pop	r0
     49a:	0f 90       	pop	r0
     49c:	0f 90       	pop	r0
     49e:	0f 90       	pop	r0
			//USART_Transmit_dec((int)acc_res*acc_data[0]);
			USART_Transmit(0x20);
     4a0:	80 e2       	ldi	r24, 0x20	; 32
     4a2:	0e 94 b9 02 	call	0x572	; 0x572 <USART_Transmit>
			//myPrint(Y,10);
			USART_Transmit(0x20);
     4a6:	80 e2       	ldi	r24, 0x20	; 32
     4a8:	0e 94 b9 02 	call	0x572	; 0x572 <USART_Transmit>
			printf("Y: %f", acc_res*acc_data[1]);
     4ac:	88 85       	ldd	r24, Y+8	; 0x08
     4ae:	99 85       	ldd	r25, Y+9	; 0x09
     4b0:	aa 27       	eor	r26, r26
     4b2:	97 fd       	sbrc	r25, 7
     4b4:	a0 95       	com	r26
     4b6:	ba 2f       	mov	r27, r26
     4b8:	bc 01       	movw	r22, r24
     4ba:	cd 01       	movw	r24, r26
     4bc:	0e 94 8a 09 	call	0x1314	; 0x1314 <__floatsisf>
     4c0:	dc 01       	movw	r26, r24
     4c2:	cb 01       	movw	r24, r22
     4c4:	2a 81       	ldd	r18, Y+2	; 0x02
     4c6:	3b 81       	ldd	r19, Y+3	; 0x03
     4c8:	4c 81       	ldd	r20, Y+4	; 0x04
     4ca:	5d 81       	ldd	r21, Y+5	; 0x05
     4cc:	bc 01       	movw	r22, r24
     4ce:	cd 01       	movw	r24, r26
     4d0:	0e 94 c5 09 	call	0x138a	; 0x138a <__mulsf3>
     4d4:	dc 01       	movw	r26, r24
     4d6:	cb 01       	movw	r24, r22
     4d8:	2b 2f       	mov	r18, r27
     4da:	2f 93       	push	r18
     4dc:	2a 2f       	mov	r18, r26
     4de:	2f 93       	push	r18
     4e0:	29 2f       	mov	r18, r25
     4e2:	2f 93       	push	r18
     4e4:	8f 93       	push	r24
     4e6:	84 e1       	ldi	r24, 0x14	; 20
     4e8:	91 e0       	ldi	r25, 0x01	; 1
     4ea:	89 2f       	mov	r24, r25
     4ec:	8f 93       	push	r24
     4ee:	84 e1       	ldi	r24, 0x14	; 20
     4f0:	91 e0       	ldi	r25, 0x01	; 1
     4f2:	8f 93       	push	r24
     4f4:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <printf>
     4f8:	0f 90       	pop	r0
     4fa:	0f 90       	pop	r0
     4fc:	0f 90       	pop	r0
     4fe:	0f 90       	pop	r0
     500:	0f 90       	pop	r0
     502:	0f 90       	pop	r0
			//USART_Transmit_dec((int)acc_res*acc_data[1]);
			USART_Transmit(0x20);
     504:	80 e2       	ldi	r24, 0x20	; 32
     506:	0e 94 b9 02 	call	0x572	; 0x572 <USART_Transmit>
			//myPrint(Z,10);
			USART_Transmit(0x20);
     50a:	80 e2       	ldi	r24, 0x20	; 32
     50c:	0e 94 b9 02 	call	0x572	; 0x572 <USART_Transmit>
			printf("Z: %f", acc_res*acc_data[2]);
     510:	8a 85       	ldd	r24, Y+10	; 0x0a
     512:	9b 85       	ldd	r25, Y+11	; 0x0b
     514:	aa 27       	eor	r26, r26
     516:	97 fd       	sbrc	r25, 7
     518:	a0 95       	com	r26
     51a:	ba 2f       	mov	r27, r26
     51c:	bc 01       	movw	r22, r24
     51e:	cd 01       	movw	r24, r26
     520:	0e 94 8a 09 	call	0x1314	; 0x1314 <__floatsisf>
     524:	dc 01       	movw	r26, r24
     526:	cb 01       	movw	r24, r22
     528:	2a 81       	ldd	r18, Y+2	; 0x02
     52a:	3b 81       	ldd	r19, Y+3	; 0x03
     52c:	4c 81       	ldd	r20, Y+4	; 0x04
     52e:	5d 81       	ldd	r21, Y+5	; 0x05
     530:	bc 01       	movw	r22, r24
     532:	cd 01       	movw	r24, r26
     534:	0e 94 c5 09 	call	0x138a	; 0x138a <__mulsf3>
     538:	dc 01       	movw	r26, r24
     53a:	cb 01       	movw	r24, r22
     53c:	2b 2f       	mov	r18, r27
     53e:	2f 93       	push	r18
     540:	2a 2f       	mov	r18, r26
     542:	2f 93       	push	r18
     544:	29 2f       	mov	r18, r25
     546:	2f 93       	push	r18
     548:	8f 93       	push	r24
     54a:	8a e1       	ldi	r24, 0x1A	; 26
     54c:	91 e0       	ldi	r25, 0x01	; 1
     54e:	89 2f       	mov	r24, r25
     550:	8f 93       	push	r24
     552:	8a e1       	ldi	r24, 0x1A	; 26
     554:	91 e0       	ldi	r25, 0x01	; 1
     556:	8f 93       	push	r24
     558:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <printf>
     55c:	0f 90       	pop	r0
     55e:	0f 90       	pop	r0
     560:	0f 90       	pop	r0
     562:	0f 90       	pop	r0
     564:	0f 90       	pop	r0
     566:	0f 90       	pop	r0
			//USART_Transmit_dec((int)acc_res*acc_data[2]);
			USART_Transmit(0x0A); //Newline
     568:	8a e0       	ldi	r24, 0x0A	; 10
     56a:	0e 94 b9 02 	call	0x572	; 0x572 <USART_Transmit>
			//dataReceived = 0;
		}


	}
     56e:	32 cf       	rjmp	.-412    	; 0x3d4 <main+0x9c>
     570:	31 cf       	rjmp	.-414    	; 0x3d4 <main+0x9c>

00000572 <USART_Transmit>:
#define convert2ASCII_hex(byte){	\
	if(byte <= 0x09){byte += 0x30;}			\
	else if(byte <= 0x0F){byte += 0x37;};	\
}

void USART_Transmit(unsigned char data){
     572:	cf 93       	push	r28
     574:	df 93       	push	r29
     576:	1f 92       	push	r1
     578:	cd b7       	in	r28, 0x3d	; 61
     57a:	de b7       	in	r29, 0x3e	; 62
     57c:	89 83       	std	Y+1, r24	; 0x01
	/* While the transmit buffer is not empty (UDRE0 flag in UCSR0A)	*/
	while( !(UCSR0A & (1 << UDRE0)) ){};
     57e:	00 00       	nop
     580:	80 ec       	ldi	r24, 0xC0	; 192
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	fc 01       	movw	r30, r24
     586:	80 81       	ld	r24, Z
     588:	88 2f       	mov	r24, r24
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	80 72       	andi	r24, 0x20	; 32
     58e:	99 27       	eor	r25, r25
     590:	00 97       	sbiw	r24, 0x00	; 0
     592:	b1 f3       	breq	.-20     	; 0x580 <USART_Transmit+0xe>
	/* Write the data into the USART Data I/O register	*/
	UDR0 = data;
     594:	86 ec       	ldi	r24, 0xC6	; 198
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	29 81       	ldd	r18, Y+1	; 0x01
     59a:	fc 01       	movw	r30, r24
     59c:	20 83       	st	Z, r18
}
     59e:	0f 90       	pop	r0
     5a0:	df 91       	pop	r29
     5a2:	cf 91       	pop	r28
     5a4:	08 95       	ret

000005a6 <USART_init>:


void USART_init(unsigned int br){
     5a6:	cf 93       	push	r28
     5a8:	df 93       	push	r29
     5aa:	cd b7       	in	r28, 0x3d	; 61
     5ac:	de b7       	in	r29, 0x3e	; 62
     5ae:	28 97       	sbiw	r28, 0x08	; 8
     5b0:	0f b6       	in	r0, 0x3f	; 63
     5b2:	f8 94       	cli
     5b4:	de bf       	out	0x3e, r29	; 62
     5b6:	0f be       	out	0x3f, r0	; 63
     5b8:	cd bf       	out	0x3d, r28	; 61
     5ba:	9c 83       	std	Y+4, r25	; 0x04
     5bc:	8b 83       	std	Y+3, r24	; 0x03
	unsigned int ubrr = 16000000/16/br - 1;
     5be:	8b 81       	ldd	r24, Y+3	; 0x03
     5c0:	9c 81       	ldd	r25, Y+4	; 0x04
     5c2:	9c 01       	movw	r18, r24
     5c4:	40 e0       	ldi	r20, 0x00	; 0
     5c6:	50 e0       	ldi	r21, 0x00	; 0
     5c8:	80 e4       	ldi	r24, 0x40	; 64
     5ca:	92 e4       	ldi	r25, 0x42	; 66
     5cc:	af e0       	ldi	r26, 0x0F	; 15
     5ce:	b0 e0       	ldi	r27, 0x00	; 0
     5d0:	bc 01       	movw	r22, r24
     5d2:	cd 01       	movw	r24, r26
     5d4:	0e 94 24 09 	call	0x1248	; 0x1248 <__divmodsi4>
     5d8:	da 01       	movw	r26, r20
     5da:	c9 01       	movw	r24, r18
     5dc:	01 97       	sbiw	r24, 0x01	; 1
     5de:	9a 83       	std	Y+2, r25	; 0x02
     5e0:	89 83       	std	Y+1, r24	; 0x01
	// Settin Baud Rate to br
	UBRR0H = (unsigned char) (ubrr >> 8);
     5e2:	85 ec       	ldi	r24, 0xC5	; 197
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	29 81       	ldd	r18, Y+1	; 0x01
     5e8:	3a 81       	ldd	r19, Y+2	; 0x02
     5ea:	23 2f       	mov	r18, r19
     5ec:	33 27       	eor	r19, r19
     5ee:	fc 01       	movw	r30, r24
     5f0:	20 83       	st	Z, r18
	UBRR0L = (unsigned char) ubrr;
     5f2:	84 ec       	ldi	r24, 0xC4	; 196
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	29 81       	ldd	r18, Y+1	; 0x01
     5f8:	fc 01       	movw	r30, r24
     5fa:	20 83       	st	Z, r18

	// Enabling Receive (RXEN0) and transmit (TXEN0) and
	// the RX Complete Interrupt in the USART
	//Control and Status Register 0B
	UCSR0B = (1 << RXEN0) | ( 1 << TXEN0 ) | ( 1 << RXCIE0);
     5fc:	81 ec       	ldi	r24, 0xC1	; 193
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	28 e9       	ldi	r18, 0x98	; 152
     602:	fc 01       	movw	r30, r24
     604:	20 83       	st	Z, r18

	// Setting frame format:
			// 2 stop bits		8 bit
	UCSR0C = (1 << USBS0) | (3 << UCSZ00);
     606:	82 ec       	ldi	r24, 0xC2	; 194
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	2e e0       	ldi	r18, 0x0E	; 14
     60c:	fc 01       	movw	r30, r24
     60e:	20 83       	st	Z, r18
}
     610:	28 96       	adiw	r28, 0x08	; 8
     612:	0f b6       	in	r0, 0x3f	; 63
     614:	f8 94       	cli
     616:	de bf       	out	0x3e, r29	; 62
     618:	0f be       	out	0x3f, r0	; 63
     61a:	cd bf       	out	0x3d, r28	; 61
     61c:	df 91       	pop	r29
     61e:	cf 91       	pop	r28
     620:	08 95       	ret

00000622 <USART_Transmit_32_hex>:


void USART_Transmit_32_hex(long data32bit){
     622:	cf 93       	push	r28
     624:	df 93       	push	r29
     626:	cd b7       	in	r28, 0x3d	; 61
     628:	de b7       	in	r29, 0x3e	; 62
     62a:	60 97       	sbiw	r28, 0x10	; 16
     62c:	0f b6       	in	r0, 0x3f	; 63
     62e:	f8 94       	cli
     630:	de bf       	out	0x3e, r29	; 62
     632:	0f be       	out	0x3f, r0	; 63
     634:	cd bf       	out	0x3d, r28	; 61
     636:	6d 87       	std	Y+13, r22	; 0x0d
     638:	7e 87       	std	Y+14, r23	; 0x0e
     63a:	8f 87       	std	Y+15, r24	; 0x0f
     63c:	98 8b       	std	Y+16, r25	; 0x10
	unsigned char N[8];
	unsigned char *ptr = &N[0];
     63e:	ce 01       	movw	r24, r28
     640:	05 96       	adiw	r24, 0x05	; 5
     642:	9a 83       	std	Y+2, r25	; 0x02
     644:	89 83       	std	Y+1, r24	; 0x01
	for (uint8_t i = 0; i < 8; i++){
     646:	1b 82       	std	Y+3, r1	; 0x03
     648:	21 c0       	rjmp	.+66     	; 0x68c <USART_Transmit_32_hex+0x6a>
		N[i] = ((data32bit >> 4*i) & 0xF);
     64a:	8b 81       	ldd	r24, Y+3	; 0x03
     64c:	28 2f       	mov	r18, r24
     64e:	30 e0       	ldi	r19, 0x00	; 0
     650:	8b 81       	ldd	r24, Y+3	; 0x03
     652:	88 2f       	mov	r24, r24
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	ac 01       	movw	r20, r24
     658:	44 0f       	add	r20, r20
     65a:	55 1f       	adc	r21, r21
     65c:	44 0f       	add	r20, r20
     65e:	55 1f       	adc	r21, r21
     660:	8d 85       	ldd	r24, Y+13	; 0x0d
     662:	9e 85       	ldd	r25, Y+14	; 0x0e
     664:	af 85       	ldd	r26, Y+15	; 0x0f
     666:	b8 89       	ldd	r27, Y+16	; 0x10
     668:	04 c0       	rjmp	.+8      	; 0x672 <USART_Transmit_32_hex+0x50>
     66a:	b5 95       	asr	r27
     66c:	a7 95       	ror	r26
     66e:	97 95       	ror	r25
     670:	87 95       	ror	r24
     672:	4a 95       	dec	r20
     674:	d2 f7       	brpl	.-12     	; 0x66a <USART_Transmit_32_hex+0x48>
     676:	48 2f       	mov	r20, r24
     678:	4f 70       	andi	r20, 0x0F	; 15
     67a:	ce 01       	movw	r24, r28
     67c:	05 96       	adiw	r24, 0x05	; 5
     67e:	82 0f       	add	r24, r18
     680:	93 1f       	adc	r25, r19
     682:	fc 01       	movw	r30, r24
     684:	40 83       	st	Z, r20


void USART_Transmit_32_hex(long data32bit){
	unsigned char N[8];
	unsigned char *ptr = &N[0];
	for (uint8_t i = 0; i < 8; i++){
     686:	8b 81       	ldd	r24, Y+3	; 0x03
     688:	8f 5f       	subi	r24, 0xFF	; 255
     68a:	8b 83       	std	Y+3, r24	; 0x03
     68c:	8b 81       	ldd	r24, Y+3	; 0x03
     68e:	88 30       	cpi	r24, 0x08	; 8
     690:	e0 f2       	brcs	.-72     	; 0x64a <USART_Transmit_32_hex+0x28>
		N[i] = ((data32bit >> 4*i) & 0xF);
	}
	for (unsigned char i = 0; i < 8; i++){
     692:	1c 82       	std	Y+4, r1	; 0x04
     694:	36 c0       	rjmp	.+108    	; 0x702 <USART_Transmit_32_hex+0xe0>
		convert2ASCII_hex(*(ptr+7))	// The MSN is last in the memory so we loop backwards
     696:	89 81       	ldd	r24, Y+1	; 0x01
     698:	9a 81       	ldd	r25, Y+2	; 0x02
     69a:	07 96       	adiw	r24, 0x07	; 7
     69c:	fc 01       	movw	r30, r24
     69e:	80 81       	ld	r24, Z
     6a0:	8a 30       	cpi	r24, 0x0A	; 10
     6a2:	68 f4       	brcc	.+26     	; 0x6be <USART_Transmit_32_hex+0x9c>
     6a4:	89 81       	ldd	r24, Y+1	; 0x01
     6a6:	9a 81       	ldd	r25, Y+2	; 0x02
     6a8:	07 96       	adiw	r24, 0x07	; 7
     6aa:	29 81       	ldd	r18, Y+1	; 0x01
     6ac:	3a 81       	ldd	r19, Y+2	; 0x02
     6ae:	29 5f       	subi	r18, 0xF9	; 249
     6b0:	3f 4f       	sbci	r19, 0xFF	; 255
     6b2:	f9 01       	movw	r30, r18
     6b4:	20 81       	ld	r18, Z
     6b6:	20 5d       	subi	r18, 0xD0	; 208
     6b8:	fc 01       	movw	r30, r24
     6ba:	20 83       	st	Z, r18
     6bc:	13 c0       	rjmp	.+38     	; 0x6e4 <USART_Transmit_32_hex+0xc2>
     6be:	89 81       	ldd	r24, Y+1	; 0x01
     6c0:	9a 81       	ldd	r25, Y+2	; 0x02
     6c2:	07 96       	adiw	r24, 0x07	; 7
     6c4:	fc 01       	movw	r30, r24
     6c6:	80 81       	ld	r24, Z
     6c8:	80 31       	cpi	r24, 0x10	; 16
     6ca:	60 f4       	brcc	.+24     	; 0x6e4 <USART_Transmit_32_hex+0xc2>
     6cc:	89 81       	ldd	r24, Y+1	; 0x01
     6ce:	9a 81       	ldd	r25, Y+2	; 0x02
     6d0:	07 96       	adiw	r24, 0x07	; 7
     6d2:	29 81       	ldd	r18, Y+1	; 0x01
     6d4:	3a 81       	ldd	r19, Y+2	; 0x02
     6d6:	29 5f       	subi	r18, 0xF9	; 249
     6d8:	3f 4f       	sbci	r19, 0xFF	; 255
     6da:	f9 01       	movw	r30, r18
     6dc:	20 81       	ld	r18, Z
     6de:	29 5c       	subi	r18, 0xC9	; 201
     6e0:	fc 01       	movw	r30, r24
     6e2:	20 83       	st	Z, r18
		USART_Transmit(*(ptr+7));
     6e4:	89 81       	ldd	r24, Y+1	; 0x01
     6e6:	9a 81       	ldd	r25, Y+2	; 0x02
     6e8:	07 96       	adiw	r24, 0x07	; 7
     6ea:	fc 01       	movw	r30, r24
     6ec:	80 81       	ld	r24, Z
     6ee:	0e 94 b9 02 	call	0x572	; 0x572 <USART_Transmit>
		ptr--;
     6f2:	89 81       	ldd	r24, Y+1	; 0x01
     6f4:	9a 81       	ldd	r25, Y+2	; 0x02
     6f6:	01 97       	sbiw	r24, 0x01	; 1
     6f8:	9a 83       	std	Y+2, r25	; 0x02
     6fa:	89 83       	std	Y+1, r24	; 0x01
	unsigned char N[8];
	unsigned char *ptr = &N[0];
	for (uint8_t i = 0; i < 8; i++){
		N[i] = ((data32bit >> 4*i) & 0xF);
	}
	for (unsigned char i = 0; i < 8; i++){
     6fc:	8c 81       	ldd	r24, Y+4	; 0x04
     6fe:	8f 5f       	subi	r24, 0xFF	; 255
     700:	8c 83       	std	Y+4, r24	; 0x04
     702:	8c 81       	ldd	r24, Y+4	; 0x04
     704:	88 30       	cpi	r24, 0x08	; 8
     706:	38 f2       	brcs	.-114    	; 0x696 <USART_Transmit_32_hex+0x74>
		convert2ASCII_hex(*(ptr+7))	// The MSN is last in the memory so we loop backwards
		USART_Transmit(*(ptr+7));
		ptr--;
	}
	USART_Transmit(0x0A);
     708:	8a e0       	ldi	r24, 0x0A	; 10
     70a:	0e 94 b9 02 	call	0x572	; 0x572 <USART_Transmit>
}
     70e:	60 96       	adiw	r28, 0x10	; 16
     710:	0f b6       	in	r0, 0x3f	; 63
     712:	f8 94       	cli
     714:	de bf       	out	0x3e, r29	; 62
     716:	0f be       	out	0x3f, r0	; 63
     718:	cd bf       	out	0x3d, r28	; 61
     71a:	df 91       	pop	r29
     71c:	cf 91       	pop	r28
     71e:	08 95       	ret

00000720 <USART_Transmit_16_hex>:


void USART_Transmit_16_hex(int data16bit){
     720:	cf 93       	push	r28
     722:	df 93       	push	r29
     724:	00 d0       	rcall	.+0      	; 0x726 <USART_Transmit_16_hex+0x6>
     726:	00 d0       	rcall	.+0      	; 0x728 <USART_Transmit_16_hex+0x8>
     728:	00 d0       	rcall	.+0      	; 0x72a <USART_Transmit_16_hex+0xa>
     72a:	cd b7       	in	r28, 0x3d	; 61
     72c:	de b7       	in	r29, 0x3e	; 62
     72e:	9e 83       	std	Y+6, r25	; 0x06
     730:	8d 83       	std	Y+5, r24	; 0x05
	unsigned char N_1 = (data16bit & 0x000F);
     732:	8d 81       	ldd	r24, Y+5	; 0x05
     734:	8f 70       	andi	r24, 0x0F	; 15
     736:	89 83       	std	Y+1, r24	; 0x01
	unsigned char N_2 = ((data16bit >> 4 ) & 0x000F);
     738:	8d 81       	ldd	r24, Y+5	; 0x05
     73a:	9e 81       	ldd	r25, Y+6	; 0x06
     73c:	95 95       	asr	r25
     73e:	87 95       	ror	r24
     740:	95 95       	asr	r25
     742:	87 95       	ror	r24
     744:	95 95       	asr	r25
     746:	87 95       	ror	r24
     748:	95 95       	asr	r25
     74a:	87 95       	ror	r24
     74c:	8f 70       	andi	r24, 0x0F	; 15
     74e:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char N_3 = ((data16bit >> 8 ) & 0x000F);
     750:	8d 81       	ldd	r24, Y+5	; 0x05
     752:	9e 81       	ldd	r25, Y+6	; 0x06
     754:	89 2f       	mov	r24, r25
     756:	99 0f       	add	r25, r25
     758:	99 0b       	sbc	r25, r25
     75a:	8f 70       	andi	r24, 0x0F	; 15
     75c:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char N_4 = ((data16bit >> 12 ) & 0x000F);
     75e:	8d 81       	ldd	r24, Y+5	; 0x05
     760:	9e 81       	ldd	r25, Y+6	; 0x06
     762:	89 2f       	mov	r24, r25
     764:	99 27       	eor	r25, r25
     766:	82 95       	swap	r24
     768:	8f 70       	andi	r24, 0x0F	; 15
     76a:	8c 83       	std	Y+4, r24	; 0x04

	convert2ASCII_hex(N_1);
     76c:	89 81       	ldd	r24, Y+1	; 0x01
     76e:	8a 30       	cpi	r24, 0x0A	; 10
     770:	20 f4       	brcc	.+8      	; 0x77a <USART_Transmit_16_hex+0x5a>
     772:	89 81       	ldd	r24, Y+1	; 0x01
     774:	80 5d       	subi	r24, 0xD0	; 208
     776:	89 83       	std	Y+1, r24	; 0x01
     778:	06 c0       	rjmp	.+12     	; 0x786 <USART_Transmit_16_hex+0x66>
     77a:	89 81       	ldd	r24, Y+1	; 0x01
     77c:	80 31       	cpi	r24, 0x10	; 16
     77e:	18 f4       	brcc	.+6      	; 0x786 <USART_Transmit_16_hex+0x66>
     780:	89 81       	ldd	r24, Y+1	; 0x01
     782:	89 5c       	subi	r24, 0xC9	; 201
     784:	89 83       	std	Y+1, r24	; 0x01
	convert2ASCII_hex(N_2);
     786:	8a 81       	ldd	r24, Y+2	; 0x02
     788:	8a 30       	cpi	r24, 0x0A	; 10
     78a:	20 f4       	brcc	.+8      	; 0x794 <USART_Transmit_16_hex+0x74>
     78c:	8a 81       	ldd	r24, Y+2	; 0x02
     78e:	80 5d       	subi	r24, 0xD0	; 208
     790:	8a 83       	std	Y+2, r24	; 0x02
     792:	06 c0       	rjmp	.+12     	; 0x7a0 <USART_Transmit_16_hex+0x80>
     794:	8a 81       	ldd	r24, Y+2	; 0x02
     796:	80 31       	cpi	r24, 0x10	; 16
     798:	18 f4       	brcc	.+6      	; 0x7a0 <USART_Transmit_16_hex+0x80>
     79a:	8a 81       	ldd	r24, Y+2	; 0x02
     79c:	89 5c       	subi	r24, 0xC9	; 201
     79e:	8a 83       	std	Y+2, r24	; 0x02
	convert2ASCII_hex(N_3);
     7a0:	8b 81       	ldd	r24, Y+3	; 0x03
     7a2:	8a 30       	cpi	r24, 0x0A	; 10
     7a4:	20 f4       	brcc	.+8      	; 0x7ae <USART_Transmit_16_hex+0x8e>
     7a6:	8b 81       	ldd	r24, Y+3	; 0x03
     7a8:	80 5d       	subi	r24, 0xD0	; 208
     7aa:	8b 83       	std	Y+3, r24	; 0x03
     7ac:	06 c0       	rjmp	.+12     	; 0x7ba <USART_Transmit_16_hex+0x9a>
     7ae:	8b 81       	ldd	r24, Y+3	; 0x03
     7b0:	80 31       	cpi	r24, 0x10	; 16
     7b2:	18 f4       	brcc	.+6      	; 0x7ba <USART_Transmit_16_hex+0x9a>
     7b4:	8b 81       	ldd	r24, Y+3	; 0x03
     7b6:	89 5c       	subi	r24, 0xC9	; 201
     7b8:	8b 83       	std	Y+3, r24	; 0x03
	convert2ASCII_hex(N_4);
     7ba:	8c 81       	ldd	r24, Y+4	; 0x04
     7bc:	8a 30       	cpi	r24, 0x0A	; 10
     7be:	20 f4       	brcc	.+8      	; 0x7c8 <USART_Transmit_16_hex+0xa8>
     7c0:	8c 81       	ldd	r24, Y+4	; 0x04
     7c2:	80 5d       	subi	r24, 0xD0	; 208
     7c4:	8c 83       	std	Y+4, r24	; 0x04
     7c6:	06 c0       	rjmp	.+12     	; 0x7d4 <USART_Transmit_16_hex+0xb4>
     7c8:	8c 81       	ldd	r24, Y+4	; 0x04
     7ca:	80 31       	cpi	r24, 0x10	; 16
     7cc:	18 f4       	brcc	.+6      	; 0x7d4 <USART_Transmit_16_hex+0xb4>
     7ce:	8c 81       	ldd	r24, Y+4	; 0x04
     7d0:	89 5c       	subi	r24, 0xC9	; 201
     7d2:	8c 83       	std	Y+4, r24	; 0x04

	USART_Transmit('0');
     7d4:	80 e3       	ldi	r24, 0x30	; 48
     7d6:	0e 94 b9 02 	call	0x572	; 0x572 <USART_Transmit>
	USART_Transmit('x');
     7da:	88 e7       	ldi	r24, 0x78	; 120
     7dc:	0e 94 b9 02 	call	0x572	; 0x572 <USART_Transmit>

	USART_Transmit(N_4);
     7e0:	8c 81       	ldd	r24, Y+4	; 0x04
     7e2:	0e 94 b9 02 	call	0x572	; 0x572 <USART_Transmit>
	USART_Transmit(N_3);
     7e6:	8b 81       	ldd	r24, Y+3	; 0x03
     7e8:	0e 94 b9 02 	call	0x572	; 0x572 <USART_Transmit>
	USART_Transmit(N_2);
     7ec:	8a 81       	ldd	r24, Y+2	; 0x02
     7ee:	0e 94 b9 02 	call	0x572	; 0x572 <USART_Transmit>
	USART_Transmit(N_1);
     7f2:	89 81       	ldd	r24, Y+1	; 0x01
     7f4:	0e 94 b9 02 	call	0x572	; 0x572 <USART_Transmit>
	USART_Transmit(0x0A);
     7f8:	8a e0       	ldi	r24, 0x0A	; 10
     7fa:	0e 94 b9 02 	call	0x572	; 0x572 <USART_Transmit>
}
     7fe:	26 96       	adiw	r28, 0x06	; 6
     800:	0f b6       	in	r0, 0x3f	; 63
     802:	f8 94       	cli
     804:	de bf       	out	0x3e, r29	; 62
     806:	0f be       	out	0x3f, r0	; 63
     808:	cd bf       	out	0x3d, r28	; 61
     80a:	df 91       	pop	r29
     80c:	cf 91       	pop	r28
     80e:	08 95       	ret

00000810 <USART_Transmit_8_hex>:



void USART_Transmit_8_hex(unsigned char byte){
     810:	cf 93       	push	r28
     812:	df 93       	push	r29
     814:	00 d0       	rcall	.+0      	; 0x816 <USART_Transmit_8_hex+0x6>
     816:	1f 92       	push	r1
     818:	cd b7       	in	r28, 0x3d	; 61
     81a:	de b7       	in	r29, 0x3e	; 62
     81c:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char LSN = (byte & 0x0F);
     81e:	8b 81       	ldd	r24, Y+3	; 0x03
     820:	8f 70       	andi	r24, 0x0F	; 15
     822:	89 83       	std	Y+1, r24	; 0x01
	unsigned char MSN = ((byte >> 4) & 0x0F);
     824:	8b 81       	ldd	r24, Y+3	; 0x03
     826:	82 95       	swap	r24
     828:	8f 70       	andi	r24, 0x0F	; 15
     82a:	8a 83       	std	Y+2, r24	; 0x02

	convert2ASCII_hex(LSN);
     82c:	89 81       	ldd	r24, Y+1	; 0x01
     82e:	8a 30       	cpi	r24, 0x0A	; 10
     830:	20 f4       	brcc	.+8      	; 0x83a <USART_Transmit_8_hex+0x2a>
     832:	89 81       	ldd	r24, Y+1	; 0x01
     834:	80 5d       	subi	r24, 0xD0	; 208
     836:	89 83       	std	Y+1, r24	; 0x01
     838:	06 c0       	rjmp	.+12     	; 0x846 <USART_Transmit_8_hex+0x36>
     83a:	89 81       	ldd	r24, Y+1	; 0x01
     83c:	80 31       	cpi	r24, 0x10	; 16
     83e:	18 f4       	brcc	.+6      	; 0x846 <USART_Transmit_8_hex+0x36>
     840:	89 81       	ldd	r24, Y+1	; 0x01
     842:	89 5c       	subi	r24, 0xC9	; 201
     844:	89 83       	std	Y+1, r24	; 0x01
	convert2ASCII_hex(MSN);
     846:	8a 81       	ldd	r24, Y+2	; 0x02
     848:	8a 30       	cpi	r24, 0x0A	; 10
     84a:	20 f4       	brcc	.+8      	; 0x854 <USART_Transmit_8_hex+0x44>
     84c:	8a 81       	ldd	r24, Y+2	; 0x02
     84e:	80 5d       	subi	r24, 0xD0	; 208
     850:	8a 83       	std	Y+2, r24	; 0x02
     852:	06 c0       	rjmp	.+12     	; 0x860 <USART_Transmit_8_hex+0x50>
     854:	8a 81       	ldd	r24, Y+2	; 0x02
     856:	80 31       	cpi	r24, 0x10	; 16
     858:	18 f4       	brcc	.+6      	; 0x860 <USART_Transmit_8_hex+0x50>
     85a:	8a 81       	ldd	r24, Y+2	; 0x02
     85c:	89 5c       	subi	r24, 0xC9	; 201
     85e:	8a 83       	std	Y+2, r24	; 0x02

	USART_Transmit('0');
     860:	80 e3       	ldi	r24, 0x30	; 48
     862:	0e 94 b9 02 	call	0x572	; 0x572 <USART_Transmit>
	USART_Transmit('x');
     866:	88 e7       	ldi	r24, 0x78	; 120
     868:	0e 94 b9 02 	call	0x572	; 0x572 <USART_Transmit>
	USART_Transmit(MSN);
     86c:	8a 81       	ldd	r24, Y+2	; 0x02
     86e:	0e 94 b9 02 	call	0x572	; 0x572 <USART_Transmit>
	USART_Transmit(LSN);
     872:	89 81       	ldd	r24, Y+1	; 0x01
     874:	0e 94 b9 02 	call	0x572	; 0x572 <USART_Transmit>
	USART_Transmit(0x0A);
     878:	8a e0       	ldi	r24, 0x0A	; 10
     87a:	0e 94 b9 02 	call	0x572	; 0x572 <USART_Transmit>
}
     87e:	0f 90       	pop	r0
     880:	0f 90       	pop	r0
     882:	0f 90       	pop	r0
     884:	df 91       	pop	r29
     886:	cf 91       	pop	r28
     888:	08 95       	ret

0000088a <USART_Transmit_8_dec>:

void USART_Transmit_8_dec(unsigned char byte){
     88a:	cf 93       	push	r28
     88c:	df 93       	push	r29
     88e:	00 d0       	rcall	.+0      	; 0x890 <USART_Transmit_8_dec+0x6>
     890:	00 d0       	rcall	.+0      	; 0x892 <USART_Transmit_8_dec+0x8>
     892:	1f 92       	push	r1
     894:	cd b7       	in	r28, 0x3d	; 61
     896:	de b7       	in	r29, 0x3e	; 62
     898:	89 83       	std	Y+1, r24	; 0x01
	if(byte < 10){
     89a:	89 81       	ldd	r24, Y+1	; 0x01
     89c:	8a 30       	cpi	r24, 0x0A	; 10
     89e:	40 f4       	brcc	.+16     	; 0x8b0 <USART_Transmit_8_dec+0x26>
		USART_Transmit(byte + 48);
     8a0:	89 81       	ldd	r24, Y+1	; 0x01
     8a2:	80 5d       	subi	r24, 0xD0	; 208
     8a4:	0e 94 b9 02 	call	0x572	; 0x572 <USART_Transmit>
		USART_Transmit(0x0A);
     8a8:	8a e0       	ldi	r24, 0x0A	; 10
     8aa:	0e 94 b9 02 	call	0x572	; 0x572 <USART_Transmit>
     8ae:	6f c0       	rjmp	.+222    	; 0x98e <__stack+0x8f>
	}
	else if(byte < 100){
     8b0:	89 81       	ldd	r24, Y+1	; 0x01
     8b2:	84 36       	cpi	r24, 0x64	; 100
     8b4:	10 f5       	brcc	.+68     	; 0x8fa <USART_Transmit_8_dec+0x70>
		USART_Transmit((byte / 10) + 48);
     8b6:	99 81       	ldd	r25, Y+1	; 0x01
     8b8:	8d ec       	ldi	r24, 0xCD	; 205
     8ba:	98 9f       	mul	r25, r24
     8bc:	81 2d       	mov	r24, r1
     8be:	11 24       	eor	r1, r1
     8c0:	86 95       	lsr	r24
     8c2:	86 95       	lsr	r24
     8c4:	86 95       	lsr	r24
     8c6:	80 5d       	subi	r24, 0xD0	; 208
     8c8:	0e 94 b9 02 	call	0x572	; 0x572 <USART_Transmit>
		USART_Transmit((byte % 10) + 48);
     8cc:	99 81       	ldd	r25, Y+1	; 0x01
     8ce:	8d ec       	ldi	r24, 0xCD	; 205
     8d0:	98 9f       	mul	r25, r24
     8d2:	81 2d       	mov	r24, r1
     8d4:	11 24       	eor	r1, r1
     8d6:	86 95       	lsr	r24
     8d8:	86 95       	lsr	r24
     8da:	86 95       	lsr	r24
     8dc:	88 0f       	add	r24, r24
     8de:	28 2f       	mov	r18, r24
     8e0:	22 0f       	add	r18, r18
     8e2:	22 0f       	add	r18, r18
     8e4:	82 0f       	add	r24, r18
     8e6:	29 2f       	mov	r18, r25
     8e8:	28 1b       	sub	r18, r24
     8ea:	82 2f       	mov	r24, r18
     8ec:	80 5d       	subi	r24, 0xD0	; 208
     8ee:	0e 94 b9 02 	call	0x572	; 0x572 <USART_Transmit>
		USART_Transmit(0x0A);
     8f2:	8a e0       	ldi	r24, 0x0A	; 10
     8f4:	0e 94 b9 02 	call	0x572	; 0x572 <USART_Transmit>
     8f8:	4a c0       	rjmp	.+148    	; 0x98e <__stack+0x8f>
	}
	else if(byte >= 100){
     8fa:	89 81       	ldd	r24, Y+1	; 0x01
     8fc:	84 36       	cpi	r24, 0x64	; 100
     8fe:	08 f4       	brcc	.+2      	; 0x902 <__stack+0x3>
     900:	46 c0       	rjmp	.+140    	; 0x98e <__stack+0x8f>
		USART_Transmit((byte / 100) + 48);
     902:	99 81       	ldd	r25, Y+1	; 0x01
     904:	89 e2       	ldi	r24, 0x29	; 41
     906:	98 9f       	mul	r25, r24
     908:	81 2d       	mov	r24, r1
     90a:	11 24       	eor	r1, r1
     90c:	82 95       	swap	r24
     90e:	8f 70       	andi	r24, 0x0F	; 15
     910:	80 5d       	subi	r24, 0xD0	; 208
     912:	0e 94 b9 02 	call	0x572	; 0x572 <USART_Transmit>
		USART_Transmit(((byte - (byte/100)*100) / 10) + 48);
     916:	89 81       	ldd	r24, Y+1	; 0x01
     918:	28 2f       	mov	r18, r24
     91a:	30 e0       	ldi	r19, 0x00	; 0
     91c:	99 81       	ldd	r25, Y+1	; 0x01
     91e:	89 e2       	ldi	r24, 0x29	; 41
     920:	98 9f       	mul	r25, r24
     922:	81 2d       	mov	r24, r1
     924:	11 24       	eor	r1, r1
     926:	82 95       	swap	r24
     928:	8f 70       	andi	r24, 0x0F	; 15
     92a:	48 2f       	mov	r20, r24
     92c:	50 e0       	ldi	r21, 0x00	; 0
     92e:	6c e9       	ldi	r22, 0x9C	; 156
     930:	64 03       	mulsu	r22, r20
     932:	c0 01       	movw	r24, r0
     934:	65 9f       	mul	r22, r21
     936:	90 0d       	add	r25, r0
     938:	11 24       	eor	r1, r1
     93a:	82 0f       	add	r24, r18
     93c:	93 1f       	adc	r25, r19
     93e:	2a e0       	ldi	r18, 0x0A	; 10
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	b9 01       	movw	r22, r18
     944:	0e 94 10 09 	call	0x1220	; 0x1220 <__divmodhi4>
     948:	cb 01       	movw	r24, r22
     94a:	80 5d       	subi	r24, 0xD0	; 208
     94c:	0e 94 b9 02 	call	0x572	; 0x572 <USART_Transmit>
		USART_Transmit(((byte - (byte/100)*100) % 10) + 48);
     950:	89 81       	ldd	r24, Y+1	; 0x01
     952:	28 2f       	mov	r18, r24
     954:	30 e0       	ldi	r19, 0x00	; 0
     956:	99 81       	ldd	r25, Y+1	; 0x01
     958:	89 e2       	ldi	r24, 0x29	; 41
     95a:	98 9f       	mul	r25, r24
     95c:	81 2d       	mov	r24, r1
     95e:	11 24       	eor	r1, r1
     960:	82 95       	swap	r24
     962:	8f 70       	andi	r24, 0x0F	; 15
     964:	48 2f       	mov	r20, r24
     966:	50 e0       	ldi	r21, 0x00	; 0
     968:	6c e9       	ldi	r22, 0x9C	; 156
     96a:	64 03       	mulsu	r22, r20
     96c:	c0 01       	movw	r24, r0
     96e:	65 9f       	mul	r22, r21
     970:	90 0d       	add	r25, r0
     972:	11 24       	eor	r1, r1
     974:	82 0f       	add	r24, r18
     976:	93 1f       	adc	r25, r19
     978:	2a e0       	ldi	r18, 0x0A	; 10
     97a:	30 e0       	ldi	r19, 0x00	; 0
     97c:	b9 01       	movw	r22, r18
     97e:	0e 94 10 09 	call	0x1220	; 0x1220 <__divmodhi4>
     982:	80 5d       	subi	r24, 0xD0	; 208
     984:	0e 94 b9 02 	call	0x572	; 0x572 <USART_Transmit>
		USART_Transmit(0x0A);
     988:	8a e0       	ldi	r24, 0x0A	; 10
     98a:	0e 94 b9 02 	call	0x572	; 0x572 <USART_Transmit>
	}
}
     98e:	0f 90       	pop	r0
     990:	0f 90       	pop	r0
     992:	0f 90       	pop	r0
     994:	0f 90       	pop	r0
     996:	0f 90       	pop	r0
     998:	df 91       	pop	r29
     99a:	cf 91       	pop	r28
     99c:	08 95       	ret

0000099e <USART_Transmit_16_dec>:

void USART_Transmit_16_dec(unsigned int word){
     99e:	cf 93       	push	r28
     9a0:	df 93       	push	r29
     9a2:	00 d0       	rcall	.+0      	; 0x9a4 <USART_Transmit_16_dec+0x6>
     9a4:	cd b7       	in	r28, 0x3d	; 61
     9a6:	de b7       	in	r29, 0x3e	; 62
     9a8:	9a 83       	std	Y+2, r25	; 0x02
     9aa:	89 83       	std	Y+1, r24	; 0x01
	if(word < 10){
     9ac:	89 81       	ldd	r24, Y+1	; 0x01
     9ae:	9a 81       	ldd	r25, Y+2	; 0x02
     9b0:	8a 30       	cpi	r24, 0x0A	; 10
     9b2:	91 05       	cpc	r25, r1
     9b4:	40 f4       	brcc	.+16     	; 0x9c6 <USART_Transmit_16_dec+0x28>
		USART_Transmit(word + 48);
     9b6:	89 81       	ldd	r24, Y+1	; 0x01
     9b8:	80 5d       	subi	r24, 0xD0	; 208
     9ba:	0e 94 b9 02 	call	0x572	; 0x572 <USART_Transmit>
		USART_Transmit(0x0A);
     9be:	8a e0       	ldi	r24, 0x0A	; 10
     9c0:	0e 94 b9 02 	call	0x572	; 0x572 <USART_Transmit>
     9c4:	c5 c1       	rjmp	.+906    	; 0xd50 <USART_Transmit_16_dec+0x3b2>
	}
	else if(word < 100){
     9c6:	89 81       	ldd	r24, Y+1	; 0x01
     9c8:	9a 81       	ldd	r25, Y+2	; 0x02
     9ca:	84 36       	cpi	r24, 0x64	; 100
     9cc:	91 05       	cpc	r25, r1
     9ce:	88 f5       	brcc	.+98     	; 0xa32 <USART_Transmit_16_dec+0x94>
		USART_Transmit((word / 10) + 48);
     9d0:	89 81       	ldd	r24, Y+1	; 0x01
     9d2:	9a 81       	ldd	r25, Y+2	; 0x02
     9d4:	9c 01       	movw	r18, r24
     9d6:	ad ec       	ldi	r26, 0xCD	; 205
     9d8:	bc ec       	ldi	r27, 0xCC	; 204
     9da:	0e 94 43 09 	call	0x1286	; 0x1286 <__umulhisi3>
     9de:	96 95       	lsr	r25
     9e0:	87 95       	ror	r24
     9e2:	96 95       	lsr	r25
     9e4:	87 95       	ror	r24
     9e6:	96 95       	lsr	r25
     9e8:	87 95       	ror	r24
     9ea:	80 5d       	subi	r24, 0xD0	; 208
     9ec:	0e 94 b9 02 	call	0x572	; 0x572 <USART_Transmit>
		USART_Transmit((word % 10) + 48);
     9f0:	49 81       	ldd	r20, Y+1	; 0x01
     9f2:	5a 81       	ldd	r21, Y+2	; 0x02
     9f4:	9a 01       	movw	r18, r20
     9f6:	ad ec       	ldi	r26, 0xCD	; 205
     9f8:	bc ec       	ldi	r27, 0xCC	; 204
     9fa:	0e 94 43 09 	call	0x1286	; 0x1286 <__umulhisi3>
     9fe:	96 95       	lsr	r25
     a00:	87 95       	ror	r24
     a02:	96 95       	lsr	r25
     a04:	87 95       	ror	r24
     a06:	96 95       	lsr	r25
     a08:	87 95       	ror	r24
     a0a:	88 0f       	add	r24, r24
     a0c:	99 1f       	adc	r25, r25
     a0e:	9c 01       	movw	r18, r24
     a10:	22 0f       	add	r18, r18
     a12:	33 1f       	adc	r19, r19
     a14:	22 0f       	add	r18, r18
     a16:	33 1f       	adc	r19, r19
     a18:	82 0f       	add	r24, r18
     a1a:	93 1f       	adc	r25, r19
     a1c:	9a 01       	movw	r18, r20
     a1e:	28 1b       	sub	r18, r24
     a20:	39 0b       	sbc	r19, r25
     a22:	c9 01       	movw	r24, r18
     a24:	80 5d       	subi	r24, 0xD0	; 208
     a26:	0e 94 b9 02 	call	0x572	; 0x572 <USART_Transmit>
		USART_Transmit(0x0A);
     a2a:	8a e0       	ldi	r24, 0x0A	; 10
     a2c:	0e 94 b9 02 	call	0x572	; 0x572 <USART_Transmit>
     a30:	8f c1       	rjmp	.+798    	; 0xd50 <USART_Transmit_16_dec+0x3b2>
	}
	else if(word < 1000){
     a32:	89 81       	ldd	r24, Y+1	; 0x01
     a34:	9a 81       	ldd	r25, Y+2	; 0x02
     a36:	88 3e       	cpi	r24, 0xE8	; 232
     a38:	33 e0       	ldi	r19, 0x03	; 3
     a3a:	93 07       	cpc	r25, r19
     a3c:	08 f0       	brcs	.+2      	; 0xa40 <USART_Transmit_16_dec+0xa2>
     a3e:	6c c0       	rjmp	.+216    	; 0xb18 <USART_Transmit_16_dec+0x17a>
		USART_Transmit((word / 100) + 48);
     a40:	89 81       	ldd	r24, Y+1	; 0x01
     a42:	9a 81       	ldd	r25, Y+2	; 0x02
     a44:	96 95       	lsr	r25
     a46:	87 95       	ror	r24
     a48:	96 95       	lsr	r25
     a4a:	87 95       	ror	r24
     a4c:	9c 01       	movw	r18, r24
     a4e:	ab e7       	ldi	r26, 0x7B	; 123
     a50:	b4 e1       	ldi	r27, 0x14	; 20
     a52:	0e 94 43 09 	call	0x1286	; 0x1286 <__umulhisi3>
     a56:	96 95       	lsr	r25
     a58:	87 95       	ror	r24
     a5a:	80 5d       	subi	r24, 0xD0	; 208
     a5c:	0e 94 b9 02 	call	0x572	; 0x572 <USART_Transmit>
		USART_Transmit(((word - (word/100)*100) / 10) + 48);
     a60:	49 81       	ldd	r20, Y+1	; 0x01
     a62:	5a 81       	ldd	r21, Y+2	; 0x02
     a64:	ca 01       	movw	r24, r20
     a66:	96 95       	lsr	r25
     a68:	87 95       	ror	r24
     a6a:	96 95       	lsr	r25
     a6c:	87 95       	ror	r24
     a6e:	9c 01       	movw	r18, r24
     a70:	ab e7       	ldi	r26, 0x7B	; 123
     a72:	b4 e1       	ldi	r27, 0x14	; 20
     a74:	0e 94 43 09 	call	0x1286	; 0x1286 <__umulhisi3>
     a78:	96 95       	lsr	r25
     a7a:	87 95       	ror	r24
     a7c:	64 e6       	ldi	r22, 0x64	; 100
     a7e:	68 9f       	mul	r22, r24
     a80:	90 01       	movw	r18, r0
     a82:	69 9f       	mul	r22, r25
     a84:	30 0d       	add	r19, r0
     a86:	11 24       	eor	r1, r1
     a88:	ca 01       	movw	r24, r20
     a8a:	82 1b       	sub	r24, r18
     a8c:	93 0b       	sbc	r25, r19
     a8e:	9c 01       	movw	r18, r24
     a90:	ad ec       	ldi	r26, 0xCD	; 205
     a92:	bc ec       	ldi	r27, 0xCC	; 204
     a94:	0e 94 43 09 	call	0x1286	; 0x1286 <__umulhisi3>
     a98:	96 95       	lsr	r25
     a9a:	87 95       	ror	r24
     a9c:	96 95       	lsr	r25
     a9e:	87 95       	ror	r24
     aa0:	96 95       	lsr	r25
     aa2:	87 95       	ror	r24
     aa4:	80 5d       	subi	r24, 0xD0	; 208
     aa6:	0e 94 b9 02 	call	0x572	; 0x572 <USART_Transmit>
		USART_Transmit(((word - (word/100)*100) % 10) + 48);
     aaa:	e9 81       	ldd	r30, Y+1	; 0x01
     aac:	fa 81       	ldd	r31, Y+2	; 0x02
     aae:	cf 01       	movw	r24, r30
     ab0:	96 95       	lsr	r25
     ab2:	87 95       	ror	r24
     ab4:	96 95       	lsr	r25
     ab6:	87 95       	ror	r24
     ab8:	9c 01       	movw	r18, r24
     aba:	ab e7       	ldi	r26, 0x7B	; 123
     abc:	b4 e1       	ldi	r27, 0x14	; 20
     abe:	0e 94 43 09 	call	0x1286	; 0x1286 <__umulhisi3>
     ac2:	ac 01       	movw	r20, r24
     ac4:	56 95       	lsr	r21
     ac6:	47 95       	ror	r20
     ac8:	24 e6       	ldi	r18, 0x64	; 100
     aca:	24 9f       	mul	r18, r20
     acc:	c0 01       	movw	r24, r0
     ace:	25 9f       	mul	r18, r21
     ad0:	90 0d       	add	r25, r0
     ad2:	11 24       	eor	r1, r1
     ad4:	af 01       	movw	r20, r30
     ad6:	48 1b       	sub	r20, r24
     ad8:	59 0b       	sbc	r21, r25
     ada:	9a 01       	movw	r18, r20
     adc:	ad ec       	ldi	r26, 0xCD	; 205
     ade:	bc ec       	ldi	r27, 0xCC	; 204
     ae0:	0e 94 43 09 	call	0x1286	; 0x1286 <__umulhisi3>
     ae4:	96 95       	lsr	r25
     ae6:	87 95       	ror	r24
     ae8:	96 95       	lsr	r25
     aea:	87 95       	ror	r24
     aec:	96 95       	lsr	r25
     aee:	87 95       	ror	r24
     af0:	88 0f       	add	r24, r24
     af2:	99 1f       	adc	r25, r25
     af4:	9c 01       	movw	r18, r24
     af6:	22 0f       	add	r18, r18
     af8:	33 1f       	adc	r19, r19
     afa:	22 0f       	add	r18, r18
     afc:	33 1f       	adc	r19, r19
     afe:	82 0f       	add	r24, r18
     b00:	93 1f       	adc	r25, r19
     b02:	9a 01       	movw	r18, r20
     b04:	28 1b       	sub	r18, r24
     b06:	39 0b       	sbc	r19, r25
     b08:	c9 01       	movw	r24, r18
     b0a:	80 5d       	subi	r24, 0xD0	; 208
     b0c:	0e 94 b9 02 	call	0x572	; 0x572 <USART_Transmit>
		USART_Transmit(0x0A);
     b10:	8a e0       	ldi	r24, 0x0A	; 10
     b12:	0e 94 b9 02 	call	0x572	; 0x572 <USART_Transmit>
     b16:	1c c1       	rjmp	.+568    	; 0xd50 <USART_Transmit_16_dec+0x3b2>
	}
	else if(word < 10000){
     b18:	89 81       	ldd	r24, Y+1	; 0x01
     b1a:	9a 81       	ldd	r25, Y+2	; 0x02
     b1c:	80 31       	cpi	r24, 0x10	; 16
     b1e:	37 e2       	ldi	r19, 0x27	; 39
     b20:	93 07       	cpc	r25, r19
     b22:	08 f0       	brcs	.+2      	; 0xb26 <USART_Transmit_16_dec+0x188>
     b24:	12 c1       	rjmp	.+548    	; 0xd4a <USART_Transmit_16_dec+0x3ac>
		USART_Transmit((word / 1000) + 48);
     b26:	89 81       	ldd	r24, Y+1	; 0x01
     b28:	9a 81       	ldd	r25, Y+2	; 0x02
     b2a:	96 95       	lsr	r25
     b2c:	87 95       	ror	r24
     b2e:	96 95       	lsr	r25
     b30:	87 95       	ror	r24
     b32:	96 95       	lsr	r25
     b34:	87 95       	ror	r24
     b36:	9c 01       	movw	r18, r24
     b38:	a5 ec       	ldi	r26, 0xC5	; 197
     b3a:	b0 e2       	ldi	r27, 0x20	; 32
     b3c:	0e 94 43 09 	call	0x1286	; 0x1286 <__umulhisi3>
     b40:	92 95       	swap	r25
     b42:	82 95       	swap	r24
     b44:	8f 70       	andi	r24, 0x0F	; 15
     b46:	89 27       	eor	r24, r25
     b48:	9f 70       	andi	r25, 0x0F	; 15
     b4a:	89 27       	eor	r24, r25
     b4c:	80 5d       	subi	r24, 0xD0	; 208
     b4e:	0e 94 b9 02 	call	0x572	; 0x572 <USART_Transmit>
		USART_Transmit(((word - (word/1000)*1000) / 100) + 48);
     b52:	49 81       	ldd	r20, Y+1	; 0x01
     b54:	5a 81       	ldd	r21, Y+2	; 0x02
     b56:	ca 01       	movw	r24, r20
     b58:	96 95       	lsr	r25
     b5a:	87 95       	ror	r24
     b5c:	96 95       	lsr	r25
     b5e:	87 95       	ror	r24
     b60:	96 95       	lsr	r25
     b62:	87 95       	ror	r24
     b64:	9c 01       	movw	r18, r24
     b66:	a5 ec       	ldi	r26, 0xC5	; 197
     b68:	b0 e2       	ldi	r27, 0x20	; 32
     b6a:	0e 94 43 09 	call	0x1286	; 0x1286 <__umulhisi3>
     b6e:	92 95       	swap	r25
     b70:	82 95       	swap	r24
     b72:	8f 70       	andi	r24, 0x0F	; 15
     b74:	89 27       	eor	r24, r25
     b76:	9f 70       	andi	r25, 0x0F	; 15
     b78:	89 27       	eor	r24, r25
     b7a:	68 ee       	ldi	r22, 0xE8	; 232
     b7c:	73 e0       	ldi	r23, 0x03	; 3
     b7e:	86 9f       	mul	r24, r22
     b80:	90 01       	movw	r18, r0
     b82:	87 9f       	mul	r24, r23
     b84:	30 0d       	add	r19, r0
     b86:	96 9f       	mul	r25, r22
     b88:	30 0d       	add	r19, r0
     b8a:	11 24       	eor	r1, r1
     b8c:	ca 01       	movw	r24, r20
     b8e:	82 1b       	sub	r24, r18
     b90:	93 0b       	sbc	r25, r19
     b92:	96 95       	lsr	r25
     b94:	87 95       	ror	r24
     b96:	96 95       	lsr	r25
     b98:	87 95       	ror	r24
     b9a:	9c 01       	movw	r18, r24
     b9c:	ab e7       	ldi	r26, 0x7B	; 123
     b9e:	b4 e1       	ldi	r27, 0x14	; 20
     ba0:	0e 94 43 09 	call	0x1286	; 0x1286 <__umulhisi3>
     ba4:	96 95       	lsr	r25
     ba6:	87 95       	ror	r24
     ba8:	80 5d       	subi	r24, 0xD0	; 208
     baa:	0e 94 b9 02 	call	0x572	; 0x572 <USART_Transmit>
		USART_Transmit((((word - (word/1000)*1000) % 100) / 10) + 48);
     bae:	e9 81       	ldd	r30, Y+1	; 0x01
     bb0:	fa 81       	ldd	r31, Y+2	; 0x02
     bb2:	cf 01       	movw	r24, r30
     bb4:	96 95       	lsr	r25
     bb6:	87 95       	ror	r24
     bb8:	96 95       	lsr	r25
     bba:	87 95       	ror	r24
     bbc:	96 95       	lsr	r25
     bbe:	87 95       	ror	r24
     bc0:	9c 01       	movw	r18, r24
     bc2:	a5 ec       	ldi	r26, 0xC5	; 197
     bc4:	b0 e2       	ldi	r27, 0x20	; 32
     bc6:	0e 94 43 09 	call	0x1286	; 0x1286 <__umulhisi3>
     bca:	ac 01       	movw	r20, r24
     bcc:	52 95       	swap	r21
     bce:	42 95       	swap	r20
     bd0:	4f 70       	andi	r20, 0x0F	; 15
     bd2:	45 27       	eor	r20, r21
     bd4:	5f 70       	andi	r21, 0x0F	; 15
     bd6:	45 27       	eor	r20, r21
     bd8:	28 ee       	ldi	r18, 0xE8	; 232
     bda:	33 e0       	ldi	r19, 0x03	; 3
     bdc:	42 9f       	mul	r20, r18
     bde:	c0 01       	movw	r24, r0
     be0:	43 9f       	mul	r20, r19
     be2:	90 0d       	add	r25, r0
     be4:	52 9f       	mul	r21, r18
     be6:	90 0d       	add	r25, r0
     be8:	11 24       	eor	r1, r1
     bea:	af 01       	movw	r20, r30
     bec:	48 1b       	sub	r20, r24
     bee:	59 0b       	sbc	r21, r25
     bf0:	ca 01       	movw	r24, r20
     bf2:	96 95       	lsr	r25
     bf4:	87 95       	ror	r24
     bf6:	96 95       	lsr	r25
     bf8:	87 95       	ror	r24
     bfa:	9c 01       	movw	r18, r24
     bfc:	ab e7       	ldi	r26, 0x7B	; 123
     bfe:	b4 e1       	ldi	r27, 0x14	; 20
     c00:	0e 94 43 09 	call	0x1286	; 0x1286 <__umulhisi3>
     c04:	96 95       	lsr	r25
     c06:	87 95       	ror	r24
     c08:	64 e6       	ldi	r22, 0x64	; 100
     c0a:	68 9f       	mul	r22, r24
     c0c:	90 01       	movw	r18, r0
     c0e:	69 9f       	mul	r22, r25
     c10:	30 0d       	add	r19, r0
     c12:	11 24       	eor	r1, r1
     c14:	ca 01       	movw	r24, r20
     c16:	82 1b       	sub	r24, r18
     c18:	93 0b       	sbc	r25, r19
     c1a:	9c 01       	movw	r18, r24
     c1c:	ad ec       	ldi	r26, 0xCD	; 205
     c1e:	bc ec       	ldi	r27, 0xCC	; 204
     c20:	0e 94 43 09 	call	0x1286	; 0x1286 <__umulhisi3>
     c24:	96 95       	lsr	r25
     c26:	87 95       	ror	r24
     c28:	96 95       	lsr	r25
     c2a:	87 95       	ror	r24
     c2c:	96 95       	lsr	r25
     c2e:	87 95       	ror	r24
     c30:	80 5d       	subi	r24, 0xD0	; 208
     c32:	0e 94 b9 02 	call	0x572	; 0x572 <USART_Transmit>
		USART_Transmit((( (word - (word/1000)*1000) % 100) - (word - ((word/1000)*1000) % 100)/10)*10 +48);
     c36:	e9 81       	ldd	r30, Y+1	; 0x01
     c38:	fa 81       	ldd	r31, Y+2	; 0x02
     c3a:	cf 01       	movw	r24, r30
     c3c:	96 95       	lsr	r25
     c3e:	87 95       	ror	r24
     c40:	96 95       	lsr	r25
     c42:	87 95       	ror	r24
     c44:	96 95       	lsr	r25
     c46:	87 95       	ror	r24
     c48:	9c 01       	movw	r18, r24
     c4a:	a5 ec       	ldi	r26, 0xC5	; 197
     c4c:	b0 e2       	ldi	r27, 0x20	; 32
     c4e:	0e 94 43 09 	call	0x1286	; 0x1286 <__umulhisi3>
     c52:	ac 01       	movw	r20, r24
     c54:	52 95       	swap	r21
     c56:	42 95       	swap	r20
     c58:	4f 70       	andi	r20, 0x0F	; 15
     c5a:	45 27       	eor	r20, r21
     c5c:	5f 70       	andi	r21, 0x0F	; 15
     c5e:	45 27       	eor	r20, r21
     c60:	28 ee       	ldi	r18, 0xE8	; 232
     c62:	33 e0       	ldi	r19, 0x03	; 3
     c64:	42 9f       	mul	r20, r18
     c66:	c0 01       	movw	r24, r0
     c68:	43 9f       	mul	r20, r19
     c6a:	90 0d       	add	r25, r0
     c6c:	52 9f       	mul	r21, r18
     c6e:	90 0d       	add	r25, r0
     c70:	11 24       	eor	r1, r1
     c72:	af 01       	movw	r20, r30
     c74:	48 1b       	sub	r20, r24
     c76:	59 0b       	sbc	r21, r25
     c78:	ca 01       	movw	r24, r20
     c7a:	96 95       	lsr	r25
     c7c:	87 95       	ror	r24
     c7e:	96 95       	lsr	r25
     c80:	87 95       	ror	r24
     c82:	9c 01       	movw	r18, r24
     c84:	ab e7       	ldi	r26, 0x7B	; 123
     c86:	b4 e1       	ldi	r27, 0x14	; 20
     c88:	0e 94 43 09 	call	0x1286	; 0x1286 <__umulhisi3>
     c8c:	fc 01       	movw	r30, r24
     c8e:	f6 95       	lsr	r31
     c90:	e7 95       	ror	r30
     c92:	24 e6       	ldi	r18, 0x64	; 100
     c94:	2e 9f       	mul	r18, r30
     c96:	c0 01       	movw	r24, r0
     c98:	2f 9f       	mul	r18, r31
     c9a:	90 0d       	add	r25, r0
     c9c:	11 24       	eor	r1, r1
     c9e:	fa 01       	movw	r30, r20
     ca0:	e8 1b       	sub	r30, r24
     ca2:	f9 0b       	sbc	r31, r25
     ca4:	89 81       	ldd	r24, Y+1	; 0x01
     ca6:	9a 81       	ldd	r25, Y+2	; 0x02
     ca8:	96 95       	lsr	r25
     caa:	87 95       	ror	r24
     cac:	96 95       	lsr	r25
     cae:	87 95       	ror	r24
     cb0:	96 95       	lsr	r25
     cb2:	87 95       	ror	r24
     cb4:	9c 01       	movw	r18, r24
     cb6:	a5 ec       	ldi	r26, 0xC5	; 197
     cb8:	b0 e2       	ldi	r27, 0x20	; 32
     cba:	0e 94 43 09 	call	0x1286	; 0x1286 <__umulhisi3>
     cbe:	9c 01       	movw	r18, r24
     cc0:	32 95       	swap	r19
     cc2:	22 95       	swap	r18
     cc4:	2f 70       	andi	r18, 0x0F	; 15
     cc6:	23 27       	eor	r18, r19
     cc8:	3f 70       	andi	r19, 0x0F	; 15
     cca:	23 27       	eor	r18, r19
     ccc:	88 ee       	ldi	r24, 0xE8	; 232
     cce:	93 e0       	ldi	r25, 0x03	; 3
     cd0:	28 9f       	mul	r18, r24
     cd2:	a0 01       	movw	r20, r0
     cd4:	29 9f       	mul	r18, r25
     cd6:	50 0d       	add	r21, r0
     cd8:	38 9f       	mul	r19, r24
     cda:	50 0d       	add	r21, r0
     cdc:	11 24       	eor	r1, r1
     cde:	ca 01       	movw	r24, r20
     ce0:	96 95       	lsr	r25
     ce2:	87 95       	ror	r24
     ce4:	96 95       	lsr	r25
     ce6:	87 95       	ror	r24
     ce8:	9c 01       	movw	r18, r24
     cea:	ab e7       	ldi	r26, 0x7B	; 123
     cec:	b4 e1       	ldi	r27, 0x14	; 20
     cee:	0e 94 43 09 	call	0x1286	; 0x1286 <__umulhisi3>
     cf2:	96 95       	lsr	r25
     cf4:	87 95       	ror	r24
     cf6:	64 e6       	ldi	r22, 0x64	; 100
     cf8:	68 9f       	mul	r22, r24
     cfa:	90 01       	movw	r18, r0
     cfc:	69 9f       	mul	r22, r25
     cfe:	30 0d       	add	r19, r0
     d00:	11 24       	eor	r1, r1
     d02:	ca 01       	movw	r24, r20
     d04:	82 1b       	sub	r24, r18
     d06:	93 0b       	sbc	r25, r19
     d08:	29 81       	ldd	r18, Y+1	; 0x01
     d0a:	3a 81       	ldd	r19, Y+2	; 0x02
     d0c:	a9 01       	movw	r20, r18
     d0e:	48 1b       	sub	r20, r24
     d10:	59 0b       	sbc	r21, r25
     d12:	ca 01       	movw	r24, r20
     d14:	9c 01       	movw	r18, r24
     d16:	ad ec       	ldi	r26, 0xCD	; 205
     d18:	bc ec       	ldi	r27, 0xCC	; 204
     d1a:	0e 94 43 09 	call	0x1286	; 0x1286 <__umulhisi3>
     d1e:	96 95       	lsr	r25
     d20:	87 95       	ror	r24
     d22:	96 95       	lsr	r25
     d24:	87 95       	ror	r24
     d26:	96 95       	lsr	r25
     d28:	87 95       	ror	r24
     d2a:	9f 01       	movw	r18, r30
     d2c:	28 1b       	sub	r18, r24
     d2e:	39 0b       	sbc	r19, r25
     d30:	c9 01       	movw	r24, r18
     d32:	88 0f       	add	r24, r24
     d34:	98 2f       	mov	r25, r24
     d36:	99 0f       	add	r25, r25
     d38:	99 0f       	add	r25, r25
     d3a:	89 0f       	add	r24, r25
     d3c:	80 5d       	subi	r24, 0xD0	; 208
     d3e:	0e 94 b9 02 	call	0x572	; 0x572 <USART_Transmit>
		USART_Transmit(0x0A);
     d42:	8a e0       	ldi	r24, 0x0A	; 10
     d44:	0e 94 b9 02 	call	0x572	; 0x572 <USART_Transmit>
     d48:	03 c0       	rjmp	.+6      	; 0xd50 <USART_Transmit_16_dec+0x3b2>
	}
	else{
		USART_Transmit('q');
     d4a:	81 e7       	ldi	r24, 0x71	; 113
     d4c:	0e 94 b9 02 	call	0x572	; 0x572 <USART_Transmit>
	}
}
     d50:	0f 90       	pop	r0
     d52:	0f 90       	pop	r0
     d54:	df 91       	pop	r29
     d56:	cf 91       	pop	r28
     d58:	08 95       	ret

00000d5a <USART_Transmit_16_dec_signed>:


void USART_Transmit_16_dec_signed(int word){
     d5a:	cf 93       	push	r28
     d5c:	df 93       	push	r29
     d5e:	cd b7       	in	r28, 0x3d	; 61
     d60:	de b7       	in	r29, 0x3e	; 62
     d62:	a6 97       	sbiw	r28, 0x26	; 38
     d64:	0f b6       	in	r0, 0x3f	; 63
     d66:	f8 94       	cli
     d68:	de bf       	out	0x3e, r29	; 62
     d6a:	0f be       	out	0x3f, r0	; 63
     d6c:	cd bf       	out	0x3d, r28	; 61
     d6e:	9a 83       	std	Y+2, r25	; 0x02
     d70:	89 83       	std	Y+1, r24	; 0x01
		if (word < 0){
     d72:	89 81       	ldd	r24, Y+1	; 0x01
     d74:	9a 81       	ldd	r25, Y+2	; 0x02
     d76:	99 23       	and	r25, r25
     d78:	54 f4       	brge	.+20     	; 0xd8e <USART_Transmit_16_dec_signed+0x34>
			USART_Transmit(0x2D);	// Minus sign
     d7a:	8d e2       	ldi	r24, 0x2D	; 45
     d7c:	0e 94 b9 02 	call	0x572	; 0x572 <USART_Transmit>
			word = ~word + 1;
     d80:	89 81       	ldd	r24, Y+1	; 0x01
     d82:	9a 81       	ldd	r25, Y+2	; 0x02
     d84:	91 95       	neg	r25
     d86:	81 95       	neg	r24
     d88:	91 09       	sbc	r25, r1
     d8a:	9a 83       	std	Y+2, r25	; 0x02
     d8c:	89 83       	std	Y+1, r24	; 0x01
		}

		if(word < 10){
     d8e:	89 81       	ldd	r24, Y+1	; 0x01
     d90:	9a 81       	ldd	r25, Y+2	; 0x02
     d92:	8a 30       	cpi	r24, 0x0A	; 10
     d94:	91 05       	cpc	r25, r1
     d96:	44 f4       	brge	.+16     	; 0xda8 <USART_Transmit_16_dec_signed+0x4e>
			USART_Transmit(word + 48);
     d98:	89 81       	ldd	r24, Y+1	; 0x01
     d9a:	80 5d       	subi	r24, 0xD0	; 208
     d9c:	0e 94 b9 02 	call	0x572	; 0x572 <USART_Transmit>
			USART_Transmit(0x0A);
     da0:	8a e0       	ldi	r24, 0x0A	; 10
     da2:	0e 94 b9 02 	call	0x572	; 0x572 <USART_Transmit>
     da6:	cc c0       	rjmp	.+408    	; 0xf40 <USART_Transmit_16_dec_signed+0x1e6>
		}
		else if(word < 100){
     da8:	89 81       	ldd	r24, Y+1	; 0x01
     daa:	9a 81       	ldd	r25, Y+2	; 0x02
     dac:	84 36       	cpi	r24, 0x64	; 100
     dae:	91 05       	cpc	r25, r1
     db0:	cc f4       	brge	.+50     	; 0xde4 <USART_Transmit_16_dec_signed+0x8a>
			USART_Transmit((word / 10) + 48);
     db2:	89 81       	ldd	r24, Y+1	; 0x01
     db4:	9a 81       	ldd	r25, Y+2	; 0x02
     db6:	2a e0       	ldi	r18, 0x0A	; 10
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	b9 01       	movw	r22, r18
     dbc:	0e 94 10 09 	call	0x1220	; 0x1220 <__divmodhi4>
     dc0:	cb 01       	movw	r24, r22
     dc2:	80 5d       	subi	r24, 0xD0	; 208
     dc4:	0e 94 b9 02 	call	0x572	; 0x572 <USART_Transmit>
			USART_Transmit((word % 10) + 48);
     dc8:	89 81       	ldd	r24, Y+1	; 0x01
     dca:	9a 81       	ldd	r25, Y+2	; 0x02
     dcc:	2a e0       	ldi	r18, 0x0A	; 10
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	b9 01       	movw	r22, r18
     dd2:	0e 94 10 09 	call	0x1220	; 0x1220 <__divmodhi4>
     dd6:	80 5d       	subi	r24, 0xD0	; 208
     dd8:	0e 94 b9 02 	call	0x572	; 0x572 <USART_Transmit>
			USART_Transmit(0x0A);
     ddc:	8a e0       	ldi	r24, 0x0A	; 10
     dde:	0e 94 b9 02 	call	0x572	; 0x572 <USART_Transmit>
     de2:	ae c0       	rjmp	.+348    	; 0xf40 <USART_Transmit_16_dec_signed+0x1e6>
		}
		else if(word < 1000){
     de4:	89 81       	ldd	r24, Y+1	; 0x01
     de6:	9a 81       	ldd	r25, Y+2	; 0x02
     de8:	88 3e       	cpi	r24, 0xE8	; 232
     dea:	23 e0       	ldi	r18, 0x03	; 3
     dec:	92 07       	cpc	r25, r18
     dee:	74 f5       	brge	.+92     	; 0xe4c <USART_Transmit_16_dec_signed+0xf2>
			USART_Transmit((word / 100) + 48);
     df0:	89 81       	ldd	r24, Y+1	; 0x01
     df2:	9a 81       	ldd	r25, Y+2	; 0x02
     df4:	24 e6       	ldi	r18, 0x64	; 100
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	b9 01       	movw	r22, r18
     dfa:	0e 94 10 09 	call	0x1220	; 0x1220 <__divmodhi4>
     dfe:	cb 01       	movw	r24, r22
     e00:	80 5d       	subi	r24, 0xD0	; 208
     e02:	0e 94 b9 02 	call	0x572	; 0x572 <USART_Transmit>
			USART_Transmit(((word - (word/100)*100) / 10) + 48);
     e06:	89 81       	ldd	r24, Y+1	; 0x01
     e08:	9a 81       	ldd	r25, Y+2	; 0x02
     e0a:	24 e6       	ldi	r18, 0x64	; 100
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	b9 01       	movw	r22, r18
     e10:	0e 94 10 09 	call	0x1220	; 0x1220 <__divmodhi4>
     e14:	2a e0       	ldi	r18, 0x0A	; 10
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	b9 01       	movw	r22, r18
     e1a:	0e 94 10 09 	call	0x1220	; 0x1220 <__divmodhi4>
     e1e:	cb 01       	movw	r24, r22
     e20:	80 5d       	subi	r24, 0xD0	; 208
     e22:	0e 94 b9 02 	call	0x572	; 0x572 <USART_Transmit>
			USART_Transmit(((word - (word/100)*100) % 10) + 48);
     e26:	89 81       	ldd	r24, Y+1	; 0x01
     e28:	9a 81       	ldd	r25, Y+2	; 0x02
     e2a:	24 e6       	ldi	r18, 0x64	; 100
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	b9 01       	movw	r22, r18
     e30:	0e 94 10 09 	call	0x1220	; 0x1220 <__divmodhi4>
     e34:	2a e0       	ldi	r18, 0x0A	; 10
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	b9 01       	movw	r22, r18
     e3a:	0e 94 10 09 	call	0x1220	; 0x1220 <__divmodhi4>
     e3e:	80 5d       	subi	r24, 0xD0	; 208
     e40:	0e 94 b9 02 	call	0x572	; 0x572 <USART_Transmit>
			USART_Transmit(0x0A);
     e44:	8a e0       	ldi	r24, 0x0A	; 10
     e46:	0e 94 b9 02 	call	0x572	; 0x572 <USART_Transmit>
     e4a:	7a c0       	rjmp	.+244    	; 0xf40 <USART_Transmit_16_dec_signed+0x1e6>
		}
		else if(word < 10000){
     e4c:	89 81       	ldd	r24, Y+1	; 0x01
     e4e:	9a 81       	ldd	r25, Y+2	; 0x02
     e50:	80 31       	cpi	r24, 0x10	; 16
     e52:	47 e2       	ldi	r20, 0x27	; 39
     e54:	94 07       	cpc	r25, r20
     e56:	0c f0       	brlt	.+2      	; 0xe5a <USART_Transmit_16_dec_signed+0x100>
     e58:	70 c0       	rjmp	.+224    	; 0xf3a <USART_Transmit_16_dec_signed+0x1e0>
			USART_Transmit((word / 1000) + 48);
     e5a:	89 81       	ldd	r24, Y+1	; 0x01
     e5c:	9a 81       	ldd	r25, Y+2	; 0x02
     e5e:	28 ee       	ldi	r18, 0xE8	; 232
     e60:	33 e0       	ldi	r19, 0x03	; 3
     e62:	b9 01       	movw	r22, r18
     e64:	0e 94 10 09 	call	0x1220	; 0x1220 <__divmodhi4>
     e68:	cb 01       	movw	r24, r22
     e6a:	80 5d       	subi	r24, 0xD0	; 208
     e6c:	0e 94 b9 02 	call	0x572	; 0x572 <USART_Transmit>
			USART_Transmit(((word - (word/1000)*1000) / 100) + 48);
     e70:	89 81       	ldd	r24, Y+1	; 0x01
     e72:	9a 81       	ldd	r25, Y+2	; 0x02
     e74:	28 ee       	ldi	r18, 0xE8	; 232
     e76:	33 e0       	ldi	r19, 0x03	; 3
     e78:	b9 01       	movw	r22, r18
     e7a:	0e 94 10 09 	call	0x1220	; 0x1220 <__divmodhi4>
     e7e:	24 e6       	ldi	r18, 0x64	; 100
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	b9 01       	movw	r22, r18
     e84:	0e 94 10 09 	call	0x1220	; 0x1220 <__divmodhi4>
     e88:	cb 01       	movw	r24, r22
     e8a:	80 5d       	subi	r24, 0xD0	; 208
     e8c:	0e 94 b9 02 	call	0x572	; 0x572 <USART_Transmit>
			USART_Transmit((((word - (word/1000)*1000) % 100) / 10) + 48);
     e90:	89 81       	ldd	r24, Y+1	; 0x01
     e92:	9a 81       	ldd	r25, Y+2	; 0x02
     e94:	28 ee       	ldi	r18, 0xE8	; 232
     e96:	33 e0       	ldi	r19, 0x03	; 3
     e98:	b9 01       	movw	r22, r18
     e9a:	0e 94 10 09 	call	0x1220	; 0x1220 <__divmodhi4>
     e9e:	24 e6       	ldi	r18, 0x64	; 100
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	b9 01       	movw	r22, r18
     ea4:	0e 94 10 09 	call	0x1220	; 0x1220 <__divmodhi4>
     ea8:	2a e0       	ldi	r18, 0x0A	; 10
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	b9 01       	movw	r22, r18
     eae:	0e 94 10 09 	call	0x1220	; 0x1220 <__divmodhi4>
     eb2:	cb 01       	movw	r24, r22
     eb4:	80 5d       	subi	r24, 0xD0	; 208
     eb6:	0e 94 b9 02 	call	0x572	; 0x572 <USART_Transmit>
			USART_Transmit((( (word - (word/1000)*1000) % 100) - (word - ((word/1000)*1000) % 100)/10)*10 +48);
     eba:	89 81       	ldd	r24, Y+1	; 0x01
     ebc:	9a 81       	ldd	r25, Y+2	; 0x02
     ebe:	28 ee       	ldi	r18, 0xE8	; 232
     ec0:	33 e0       	ldi	r19, 0x03	; 3
     ec2:	b9 01       	movw	r22, r18
     ec4:	0e 94 10 09 	call	0x1220	; 0x1220 <__divmodhi4>
     ec8:	24 e6       	ldi	r18, 0x64	; 100
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	b9 01       	movw	r22, r18
     ece:	0e 94 10 09 	call	0x1220	; 0x1220 <__divmodhi4>
     ed2:	9c 01       	movw	r18, r24
     ed4:	89 81       	ldd	r24, Y+1	; 0x01
     ed6:	9a 81       	ldd	r25, Y+2	; 0x02
     ed8:	48 ee       	ldi	r20, 0xE8	; 232
     eda:	53 e0       	ldi	r21, 0x03	; 3
     edc:	ba 01       	movw	r22, r20
     ede:	0e 94 10 09 	call	0x1220	; 0x1220 <__divmodhi4>
     ee2:	cb 01       	movw	r24, r22
     ee4:	bc 01       	movw	r22, r24
     ee6:	48 ee       	ldi	r20, 0xE8	; 232
     ee8:	53 e0       	ldi	r21, 0x03	; 3
     eea:	64 9f       	mul	r22, r20
     eec:	c0 01       	movw	r24, r0
     eee:	65 9f       	mul	r22, r21
     ef0:	90 0d       	add	r25, r0
     ef2:	74 9f       	mul	r23, r20
     ef4:	90 0d       	add	r25, r0
     ef6:	11 24       	eor	r1, r1
     ef8:	44 e6       	ldi	r20, 0x64	; 100
     efa:	50 e0       	ldi	r21, 0x00	; 0
     efc:	ba 01       	movw	r22, r20
     efe:	0e 94 10 09 	call	0x1220	; 0x1220 <__divmodhi4>
     f02:	49 81       	ldd	r20, Y+1	; 0x01
     f04:	5a 81       	ldd	r21, Y+2	; 0x02
     f06:	ba 01       	movw	r22, r20
     f08:	68 1b       	sub	r22, r24
     f0a:	79 0b       	sbc	r23, r25
     f0c:	cb 01       	movw	r24, r22
     f0e:	4a e0       	ldi	r20, 0x0A	; 10
     f10:	50 e0       	ldi	r21, 0x00	; 0
     f12:	ba 01       	movw	r22, r20
     f14:	0e 94 10 09 	call	0x1220	; 0x1220 <__divmodhi4>
     f18:	cb 01       	movw	r24, r22
     f1a:	a9 01       	movw	r20, r18
     f1c:	48 1b       	sub	r20, r24
     f1e:	59 0b       	sbc	r21, r25
     f20:	ca 01       	movw	r24, r20
     f22:	88 0f       	add	r24, r24
     f24:	98 2f       	mov	r25, r24
     f26:	99 0f       	add	r25, r25
     f28:	99 0f       	add	r25, r25
     f2a:	89 0f       	add	r24, r25
     f2c:	80 5d       	subi	r24, 0xD0	; 208
     f2e:	0e 94 b9 02 	call	0x572	; 0x572 <USART_Transmit>
			USART_Transmit(0x0A);
     f32:	8a e0       	ldi	r24, 0x0A	; 10
     f34:	0e 94 b9 02 	call	0x572	; 0x572 <USART_Transmit>
     f38:	03 c0       	rjmp	.+6      	; 0xf40 <USART_Transmit_16_dec_signed+0x1e6>
		}
		else{
			USART_Transmit('q');
     f3a:	81 e7       	ldi	r24, 0x71	; 113
     f3c:	0e 94 b9 02 	call	0x572	; 0x572 <USART_Transmit>
		}
	}
     f40:	a6 96       	adiw	r28, 0x26	; 38
     f42:	0f b6       	in	r0, 0x3f	; 63
     f44:	f8 94       	cli
     f46:	de bf       	out	0x3e, r29	; 62
     f48:	0f be       	out	0x3f, r0	; 63
     f4a:	cd bf       	out	0x3d, r28	; 61
     f4c:	df 91       	pop	r29
     f4e:	cf 91       	pop	r28
     f50:	08 95       	ret

00000f52 <USART_Transmit_dec>:

void USART_Transmit_dec(int word){
     f52:	cf 93       	push	r28
     f54:	df 93       	push	r29
     f56:	cd b7       	in	r28, 0x3d	; 61
     f58:	de b7       	in	r29, 0x3e	; 62
     f5a:	6d 97       	sbiw	r28, 0x1d	; 29
     f5c:	0f b6       	in	r0, 0x3f	; 63
     f5e:	f8 94       	cli
     f60:	de bf       	out	0x3e, r29	; 62
     f62:	0f be       	out	0x3f, r0	; 63
     f64:	cd bf       	out	0x3d, r28	; 61
     f66:	99 8f       	std	Y+25, r25	; 0x19
     f68:	88 8f       	std	Y+24, r24	; 0x18
	if (word < 0){
     f6a:	88 8d       	ldd	r24, Y+24	; 0x18
     f6c:	99 8d       	ldd	r25, Y+25	; 0x19
     f6e:	99 23       	and	r25, r25
     f70:	54 f4       	brge	.+20     	; 0xf86 <USART_Transmit_dec+0x34>
				USART_Transmit(0x2D);	// Minus sign
     f72:	8d e2       	ldi	r24, 0x2D	; 45
     f74:	0e 94 b9 02 	call	0x572	; 0x572 <USART_Transmit>
				word = ~word + 1;
     f78:	88 8d       	ldd	r24, Y+24	; 0x18
     f7a:	99 8d       	ldd	r25, Y+25	; 0x19
     f7c:	91 95       	neg	r25
     f7e:	81 95       	neg	r24
     f80:	91 09       	sbc	r25, r1
     f82:	99 8f       	std	Y+25, r25	; 0x19
     f84:	88 8f       	std	Y+24, r24	; 0x18
	}

	char tmp[20];
	char count = 0;
     f86:	19 82       	std	Y+1, r1	; 0x01
	while(word > 9){
     f88:	1e c0       	rjmp	.+60     	; 0xfc6 <USART_Transmit_dec+0x74>
		tmp[count] = word%10;
     f8a:	89 81       	ldd	r24, Y+1	; 0x01
     f8c:	28 2f       	mov	r18, r24
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	88 8d       	ldd	r24, Y+24	; 0x18
     f92:	99 8d       	ldd	r25, Y+25	; 0x19
     f94:	4a e0       	ldi	r20, 0x0A	; 10
     f96:	50 e0       	ldi	r21, 0x00	; 0
     f98:	ba 01       	movw	r22, r20
     f9a:	0e 94 10 09 	call	0x1220	; 0x1220 <__divmodhi4>
     f9e:	48 2f       	mov	r20, r24
     fa0:	ce 01       	movw	r24, r28
     fa2:	04 96       	adiw	r24, 0x04	; 4
     fa4:	82 0f       	add	r24, r18
     fa6:	93 1f       	adc	r25, r19
     fa8:	fc 01       	movw	r30, r24
     faa:	40 83       	st	Z, r20
		word = word/10;
     fac:	88 8d       	ldd	r24, Y+24	; 0x18
     fae:	99 8d       	ldd	r25, Y+25	; 0x19
     fb0:	2a e0       	ldi	r18, 0x0A	; 10
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	b9 01       	movw	r22, r18
     fb6:	0e 94 10 09 	call	0x1220	; 0x1220 <__divmodhi4>
     fba:	cb 01       	movw	r24, r22
     fbc:	99 8f       	std	Y+25, r25	; 0x19
     fbe:	88 8f       	std	Y+24, r24	; 0x18
		count++;
     fc0:	89 81       	ldd	r24, Y+1	; 0x01
     fc2:	8f 5f       	subi	r24, 0xFF	; 255
     fc4:	89 83       	std	Y+1, r24	; 0x01
				word = ~word + 1;
	}

	char tmp[20];
	char count = 0;
	while(word > 9){
     fc6:	88 8d       	ldd	r24, Y+24	; 0x18
     fc8:	99 8d       	ldd	r25, Y+25	; 0x19
     fca:	8a 30       	cpi	r24, 0x0A	; 10
     fcc:	91 05       	cpc	r25, r1
     fce:	ec f6       	brge	.-70     	; 0xf8a <USART_Transmit_dec+0x38>
		tmp[count] = word%10;
		word = word/10;
		count++;
	}
	tmp[count] = word;
     fd0:	89 81       	ldd	r24, Y+1	; 0x01
     fd2:	88 2f       	mov	r24, r24
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	48 8d       	ldd	r20, Y+24	; 0x18
     fd8:	9e 01       	movw	r18, r28
     fda:	2c 5f       	subi	r18, 0xFC	; 252
     fdc:	3f 4f       	sbci	r19, 0xFF	; 255
     fde:	82 0f       	add	r24, r18
     fe0:	93 1f       	adc	r25, r19
     fe2:	fc 01       	movw	r30, r24
     fe4:	40 83       	st	Z, r20
	for(int i = count; i >= 0; i--){
     fe6:	89 81       	ldd	r24, Y+1	; 0x01
     fe8:	88 2f       	mov	r24, r24
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	9b 83       	std	Y+3, r25	; 0x03
     fee:	8a 83       	std	Y+2, r24	; 0x02
     ff0:	11 c0       	rjmp	.+34     	; 0x1014 <USART_Transmit_dec+0xc2>
		USART_Transmit(tmp[i] + 48);
     ff2:	9e 01       	movw	r18, r28
     ff4:	2c 5f       	subi	r18, 0xFC	; 252
     ff6:	3f 4f       	sbci	r19, 0xFF	; 255
     ff8:	8a 81       	ldd	r24, Y+2	; 0x02
     ffa:	9b 81       	ldd	r25, Y+3	; 0x03
     ffc:	82 0f       	add	r24, r18
     ffe:	93 1f       	adc	r25, r19
    1000:	fc 01       	movw	r30, r24
    1002:	80 81       	ld	r24, Z
    1004:	80 5d       	subi	r24, 0xD0	; 208
    1006:	0e 94 b9 02 	call	0x572	; 0x572 <USART_Transmit>
		tmp[count] = word%10;
		word = word/10;
		count++;
	}
	tmp[count] = word;
	for(int i = count; i >= 0; i--){
    100a:	8a 81       	ldd	r24, Y+2	; 0x02
    100c:	9b 81       	ldd	r25, Y+3	; 0x03
    100e:	01 97       	sbiw	r24, 0x01	; 1
    1010:	9b 83       	std	Y+3, r25	; 0x03
    1012:	8a 83       	std	Y+2, r24	; 0x02
    1014:	8a 81       	ldd	r24, Y+2	; 0x02
    1016:	9b 81       	ldd	r25, Y+3	; 0x03
    1018:	99 23       	and	r25, r25
    101a:	5c f7       	brge	.-42     	; 0xff2 <USART_Transmit_dec+0xa0>
		USART_Transmit(tmp[i] + 48);
	}
}
    101c:	6d 96       	adiw	r28, 0x1d	; 29
    101e:	0f b6       	in	r0, 0x3f	; 63
    1020:	f8 94       	cli
    1022:	de bf       	out	0x3e, r29	; 62
    1024:	0f be       	out	0x3f, r0	; 63
    1026:	cd bf       	out	0x3d, r28	; 61
    1028:	df 91       	pop	r29
    102a:	cf 91       	pop	r28
    102c:	08 95       	ret

0000102e <myPrintNL>:




void myPrintNL(unsigned char str[], unsigned char len){
    102e:	cf 93       	push	r28
    1030:	df 93       	push	r29
    1032:	00 d0       	rcall	.+0      	; 0x1034 <myPrintNL+0x6>
    1034:	00 d0       	rcall	.+0      	; 0x1036 <myPrintNL+0x8>
    1036:	cd b7       	in	r28, 0x3d	; 61
    1038:	de b7       	in	r29, 0x3e	; 62
    103a:	9b 83       	std	Y+3, r25	; 0x03
    103c:	8a 83       	std	Y+2, r24	; 0x02
    103e:	6c 83       	std	Y+4, r22	; 0x04
	for(unsigned char i = 0; i < len; i++){
    1040:	19 82       	std	Y+1, r1	; 0x01
    1042:	1a c0       	rjmp	.+52     	; 0x1078 <myPrintNL+0x4a>
		if(str[i] == '\0'){
    1044:	89 81       	ldd	r24, Y+1	; 0x01
    1046:	88 2f       	mov	r24, r24
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	2a 81       	ldd	r18, Y+2	; 0x02
    104c:	3b 81       	ldd	r19, Y+3	; 0x03
    104e:	82 0f       	add	r24, r18
    1050:	93 1f       	adc	r25, r19
    1052:	fc 01       	movw	r30, r24
    1054:	80 81       	ld	r24, Z
    1056:	88 23       	and	r24, r24
    1058:	09 f4       	brne	.+2      	; 0x105c <myPrintNL+0x2e>
			break;
    105a:	12 c0       	rjmp	.+36     	; 0x1080 <myPrintNL+0x52>
		}
		USART_Transmit(str[i]);
    105c:	89 81       	ldd	r24, Y+1	; 0x01
    105e:	88 2f       	mov	r24, r24
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	2a 81       	ldd	r18, Y+2	; 0x02
    1064:	3b 81       	ldd	r19, Y+3	; 0x03
    1066:	82 0f       	add	r24, r18
    1068:	93 1f       	adc	r25, r19
    106a:	fc 01       	movw	r30, r24
    106c:	80 81       	ld	r24, Z
    106e:	0e 94 b9 02 	call	0x572	; 0x572 <USART_Transmit>




void myPrintNL(unsigned char str[], unsigned char len){
	for(unsigned char i = 0; i < len; i++){
    1072:	89 81       	ldd	r24, Y+1	; 0x01
    1074:	8f 5f       	subi	r24, 0xFF	; 255
    1076:	89 83       	std	Y+1, r24	; 0x01
    1078:	99 81       	ldd	r25, Y+1	; 0x01
    107a:	8c 81       	ldd	r24, Y+4	; 0x04
    107c:	98 17       	cp	r25, r24
    107e:	10 f3       	brcs	.-60     	; 0x1044 <myPrintNL+0x16>
		if(str[i] == '\0'){
			break;
		}
		USART_Transmit(str[i]);
	}
	USART_Transmit(0x0A);
    1080:	8a e0       	ldi	r24, 0x0A	; 10
    1082:	0e 94 b9 02 	call	0x572	; 0x572 <USART_Transmit>
}
    1086:	0f 90       	pop	r0
    1088:	0f 90       	pop	r0
    108a:	0f 90       	pop	r0
    108c:	0f 90       	pop	r0
    108e:	df 91       	pop	r29
    1090:	cf 91       	pop	r28
    1092:	08 95       	ret

00001094 <myPrint>:

void myPrint(unsigned char str[], unsigned char len){
    1094:	cf 93       	push	r28
    1096:	df 93       	push	r29
    1098:	00 d0       	rcall	.+0      	; 0x109a <myPrint+0x6>
    109a:	00 d0       	rcall	.+0      	; 0x109c <myPrint+0x8>
    109c:	cd b7       	in	r28, 0x3d	; 61
    109e:	de b7       	in	r29, 0x3e	; 62
    10a0:	9b 83       	std	Y+3, r25	; 0x03
    10a2:	8a 83       	std	Y+2, r24	; 0x02
    10a4:	6c 83       	std	Y+4, r22	; 0x04
	for(unsigned char i = 0; i < len; i++){
    10a6:	19 82       	std	Y+1, r1	; 0x01
    10a8:	1a c0       	rjmp	.+52     	; 0x10de <myPrint+0x4a>
		if(str[i] == '\0'){
    10aa:	89 81       	ldd	r24, Y+1	; 0x01
    10ac:	88 2f       	mov	r24, r24
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	2a 81       	ldd	r18, Y+2	; 0x02
    10b2:	3b 81       	ldd	r19, Y+3	; 0x03
    10b4:	82 0f       	add	r24, r18
    10b6:	93 1f       	adc	r25, r19
    10b8:	fc 01       	movw	r30, r24
    10ba:	80 81       	ld	r24, Z
    10bc:	88 23       	and	r24, r24
    10be:	09 f4       	brne	.+2      	; 0x10c2 <myPrint+0x2e>
			break;
    10c0:	12 c0       	rjmp	.+36     	; 0x10e6 <myPrint+0x52>
		}
		USART_Transmit(str[i]);
    10c2:	89 81       	ldd	r24, Y+1	; 0x01
    10c4:	88 2f       	mov	r24, r24
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	2a 81       	ldd	r18, Y+2	; 0x02
    10ca:	3b 81       	ldd	r19, Y+3	; 0x03
    10cc:	82 0f       	add	r24, r18
    10ce:	93 1f       	adc	r25, r19
    10d0:	fc 01       	movw	r30, r24
    10d2:	80 81       	ld	r24, Z
    10d4:	0e 94 b9 02 	call	0x572	; 0x572 <USART_Transmit>
	}
	USART_Transmit(0x0A);
}

void myPrint(unsigned char str[], unsigned char len){
	for(unsigned char i = 0; i < len; i++){
    10d8:	89 81       	ldd	r24, Y+1	; 0x01
    10da:	8f 5f       	subi	r24, 0xFF	; 255
    10dc:	89 83       	std	Y+1, r24	; 0x01
    10de:	99 81       	ldd	r25, Y+1	; 0x01
    10e0:	8c 81       	ldd	r24, Y+4	; 0x04
    10e2:	98 17       	cp	r25, r24
    10e4:	10 f3       	brcs	.-60     	; 0x10aa <myPrint+0x16>
		if(str[i] == '\0'){
			break;
		}
		USART_Transmit(str[i]);
	}
}
    10e6:	0f 90       	pop	r0
    10e8:	0f 90       	pop	r0
    10ea:	0f 90       	pop	r0
    10ec:	0f 90       	pop	r0
    10ee:	df 91       	pop	r29
    10f0:	cf 91       	pop	r28
    10f2:	08 95       	ret

000010f4 <__vector_18>:


ISR(USART_RX_vect){
    10f4:	1f 92       	push	r1
    10f6:	0f 92       	push	r0
    10f8:	00 90 5f 00 	lds	r0, 0x005F
    10fc:	0f 92       	push	r0
    10fe:	11 24       	eor	r1, r1
    1100:	8f 93       	push	r24
    1102:	9f 93       	push	r25
    1104:	ef 93       	push	r30
    1106:	ff 93       	push	r31
    1108:	cf 93       	push	r28
    110a:	df 93       	push	r29
    110c:	cd b7       	in	r28, 0x3d	; 61
    110e:	de b7       	in	r29, 0x3e	; 62
	// dataReceived variable to allow the main function to know when new data is available
	dataReceived = 1;
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	80 93 70 01 	sts	0x0170, r24
	// Write the data from the USART I/O register to a buffer
	rxBuffer = UDR0;
    1116:	86 ec       	ldi	r24, 0xC6	; 198
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	fc 01       	movw	r30, r24
    111c:	80 81       	ld	r24, Z
    111e:	80 93 71 01 	sts	0x0171, r24
}
    1122:	df 91       	pop	r29
    1124:	cf 91       	pop	r28
    1126:	ff 91       	pop	r31
    1128:	ef 91       	pop	r30
    112a:	9f 91       	pop	r25
    112c:	8f 91       	pop	r24
    112e:	0f 90       	pop	r0
    1130:	00 92 5f 00 	sts	0x005F, r0
    1134:	0f 90       	pop	r0
    1136:	1f 90       	pop	r1
    1138:	18 95       	reti

0000113a <SPI_MasterInit>:


#include "spi_comm.h"
#include "myUSART.h"

void SPI_MasterInit(void){
    113a:	cf 93       	push	r28
    113c:	df 93       	push	r29
    113e:	cd b7       	in	r28, 0x3d	; 61
    1140:	de b7       	in	r29, 0x3e	; 62
    1142:	e2 97       	sbiw	r28, 0x32	; 50
    1144:	0f b6       	in	r0, 0x3f	; 63
    1146:	f8 94       	cli
    1148:	de bf       	out	0x3e, r29	; 62
    114a:	0f be       	out	0x3f, r0	; 63
    114c:	cd bf       	out	0x3d, r28	; 61
	unsigned char initializingSPI[50] = "Initializing SPI now\0";
    114e:	26 e1       	ldi	r18, 0x16	; 22
    1150:	ee e3       	ldi	r30, 0x3E	; 62
    1152:	f1 e0       	ldi	r31, 0x01	; 1
    1154:	ce 01       	movw	r24, r28
    1156:	01 96       	adiw	r24, 0x01	; 1
    1158:	dc 01       	movw	r26, r24
    115a:	01 90       	ld	r0, Z+
    115c:	0d 92       	st	X+, r0
    115e:	2a 95       	dec	r18
    1160:	e1 f7       	brne	.-8      	; 0x115a <SPI_MasterInit+0x20>
    1162:	2c e1       	ldi	r18, 0x1C	; 28
    1164:	ce 01       	movw	r24, r28
    1166:	47 96       	adiw	r24, 0x17	; 23
    1168:	fc 01       	movw	r30, r24
    116a:	32 2f       	mov	r19, r18
    116c:	11 92       	st	Z+, r1
    116e:	3a 95       	dec	r19
    1170:	e9 f7       	brne	.-6      	; 0x116c <SPI_MasterInit+0x32>
	myPrint(initializingSPI,21);
    1172:	65 e1       	ldi	r22, 0x15	; 21
    1174:	ce 01       	movw	r24, r28
    1176:	01 96       	adiw	r24, 0x01	; 1
    1178:	0e 94 4a 08 	call	0x1094	; 0x1094 <myPrint>
	// set MOSI, SCK and SS as output, all others are inputs.
	DDR_SPI = ( 1 << SPI_MOSI ) | ( 1 << SPI_SCK ) | ( 1 << SPI_SS );
    117c:	84 e2       	ldi	r24, 0x24	; 36
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	2c e2       	ldi	r18, 0x2C	; 44
    1182:	fc 01       	movw	r30, r24
    1184:	20 83       	st	Z, r18

	// Ensure that the SS line is high (no transmission) when the initialization is finished
	SPI_PORT |= ( 1 << SPI_SS );
    1186:	85 e2       	ldi	r24, 0x25	; 37
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	25 e2       	ldi	r18, 0x25	; 37
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	f9 01       	movw	r30, r18
    1190:	20 81       	ld	r18, Z
    1192:	24 60       	ori	r18, 0x04	; 4
    1194:	fc 01       	movw	r30, r24
    1196:	20 83       	st	Z, r18

	// SPI Control Register
	// SPE bit: SPI Enable
	// MSTR bit: Master select bit
	// SPR0 bit: Clock select bit, sets clock rate to Fosc/16, sets the clock polarity such that SCK is high when idle
	SPCR = ( 1 << SPE ) | ( 1 << MSTR ) | ( 1 << CPOL ) | ( 1 << SPR1 );// | ( 1 << SPR0 );
    1198:	8c e4       	ldi	r24, 0x4C	; 76
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	2a e5       	ldi	r18, 0x5A	; 90
    119e:	fc 01       	movw	r30, r24
    11a0:	20 83       	st	Z, r18

	// Set data sampling at the trailing edge of SCK
	SPCR |= ( 1 << CPHA );
    11a2:	8c e4       	ldi	r24, 0x4C	; 76
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	2c e4       	ldi	r18, 0x4C	; 76
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	f9 01       	movw	r30, r18
    11ac:	20 81       	ld	r18, Z
    11ae:	24 60       	ori	r18, 0x04	; 4
    11b0:	fc 01       	movw	r30, r24
    11b2:	20 83       	st	Z, r18
}
    11b4:	e2 96       	adiw	r28, 0x32	; 50
    11b6:	0f b6       	in	r0, 0x3f	; 63
    11b8:	f8 94       	cli
    11ba:	de bf       	out	0x3e, r29	; 62
    11bc:	0f be       	out	0x3f, r0	; 63
    11be:	cd bf       	out	0x3d, r28	; 61
    11c0:	df 91       	pop	r29
    11c2:	cf 91       	pop	r28
    11c4:	08 95       	ret

000011c6 <SPI_MasterTransmit>:

char SPI_MasterTransmit(char cData){
    11c6:	cf 93       	push	r28
    11c8:	df 93       	push	r29
    11ca:	1f 92       	push	r1
    11cc:	cd b7       	in	r28, 0x3d	; 61
    11ce:	de b7       	in	r29, 0x3e	; 62
    11d0:	89 83       	std	Y+1, r24	; 0x01
	//unsigned char transmitting[50] = "Transmitting over SPI now\0";
	//myPrint(transmitting,30);
	// SPI Data Register, transfers data between register file and the SPI shift register
	//USART_Transmit_8_hex(cData);
	SPDR = cData;
    11d2:	8e e4       	ldi	r24, 0x4E	; 78
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	29 81       	ldd	r18, Y+1	; 0x01
    11d8:	fc 01       	movw	r30, r24
    11da:	20 83       	st	Z, r18
	//asm volatile("nop");	// This is supposed to help

	// Wait for transmission to complete
	// SPI Status Register
	// SPIF bit: SPI Interrupt Flag, it is set when a serial transfer is complete
	while ( !( SPSR & ( 1 << SPIF ) ) );
    11dc:	00 00       	nop
    11de:	8d e4       	ldi	r24, 0x4D	; 77
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	fc 01       	movw	r30, r24
    11e4:	80 81       	ld	r24, Z
    11e6:	88 23       	and	r24, r24
    11e8:	d4 f7       	brge	.-12     	; 0x11de <SPI_MasterTransmit+0x18>
	if(!(SPCR & ( 1 << MSTR) ) ){SPCR |= ( 1 << MSTR);}
    11ea:	8c e4       	ldi	r24, 0x4C	; 76
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	fc 01       	movw	r30, r24
    11f0:	80 81       	ld	r24, Z
    11f2:	88 2f       	mov	r24, r24
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	80 71       	andi	r24, 0x10	; 16
    11f8:	99 27       	eor	r25, r25
    11fa:	00 97       	sbiw	r24, 0x00	; 0
    11fc:	49 f4       	brne	.+18     	; 0x1210 <SPI_MasterTransmit+0x4a>
    11fe:	8c e4       	ldi	r24, 0x4C	; 76
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	2c e4       	ldi	r18, 0x4C	; 76
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	f9 01       	movw	r30, r18
    1208:	20 81       	ld	r18, Z
    120a:	20 61       	ori	r18, 0x10	; 16
    120c:	fc 01       	movw	r30, r24
    120e:	20 83       	st	Z, r18

	return SPDR;
    1210:	8e e4       	ldi	r24, 0x4E	; 78
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	fc 01       	movw	r30, r24
    1216:	80 81       	ld	r24, Z
}
    1218:	0f 90       	pop	r0
    121a:	df 91       	pop	r29
    121c:	cf 91       	pop	r28
    121e:	08 95       	ret

00001220 <__divmodhi4>:
    1220:	97 fb       	bst	r25, 7
    1222:	07 2e       	mov	r0, r23
    1224:	16 f4       	brtc	.+4      	; 0x122a <__divmodhi4+0xa>
    1226:	00 94       	com	r0
    1228:	07 d0       	rcall	.+14     	; 0x1238 <__divmodhi4_neg1>
    122a:	77 fd       	sbrc	r23, 7
    122c:	09 d0       	rcall	.+18     	; 0x1240 <__divmodhi4_neg2>
    122e:	0e 94 52 09 	call	0x12a4	; 0x12a4 <__udivmodhi4>
    1232:	07 fc       	sbrc	r0, 7
    1234:	05 d0       	rcall	.+10     	; 0x1240 <__divmodhi4_neg2>
    1236:	3e f4       	brtc	.+14     	; 0x1246 <__divmodhi4_exit>

00001238 <__divmodhi4_neg1>:
    1238:	90 95       	com	r25
    123a:	81 95       	neg	r24
    123c:	9f 4f       	sbci	r25, 0xFF	; 255
    123e:	08 95       	ret

00001240 <__divmodhi4_neg2>:
    1240:	70 95       	com	r23
    1242:	61 95       	neg	r22
    1244:	7f 4f       	sbci	r23, 0xFF	; 255

00001246 <__divmodhi4_exit>:
    1246:	08 95       	ret

00001248 <__divmodsi4>:
    1248:	05 2e       	mov	r0, r21
    124a:	97 fb       	bst	r25, 7
    124c:	1e f4       	brtc	.+6      	; 0x1254 <__divmodsi4+0xc>
    124e:	00 94       	com	r0
    1250:	0e 94 3b 09 	call	0x1276	; 0x1276 <__negsi2>
    1254:	57 fd       	sbrc	r21, 7
    1256:	07 d0       	rcall	.+14     	; 0x1266 <__divmodsi4_neg2>
    1258:	0e 94 66 09 	call	0x12cc	; 0x12cc <__udivmodsi4>
    125c:	07 fc       	sbrc	r0, 7
    125e:	03 d0       	rcall	.+6      	; 0x1266 <__divmodsi4_neg2>
    1260:	4e f4       	brtc	.+18     	; 0x1274 <__divmodsi4_exit>
    1262:	0c 94 3b 09 	jmp	0x1276	; 0x1276 <__negsi2>

00001266 <__divmodsi4_neg2>:
    1266:	50 95       	com	r21
    1268:	40 95       	com	r20
    126a:	30 95       	com	r19
    126c:	21 95       	neg	r18
    126e:	3f 4f       	sbci	r19, 0xFF	; 255
    1270:	4f 4f       	sbci	r20, 0xFF	; 255
    1272:	5f 4f       	sbci	r21, 0xFF	; 255

00001274 <__divmodsi4_exit>:
    1274:	08 95       	ret

00001276 <__negsi2>:
    1276:	90 95       	com	r25
    1278:	80 95       	com	r24
    127a:	70 95       	com	r23
    127c:	61 95       	neg	r22
    127e:	7f 4f       	sbci	r23, 0xFF	; 255
    1280:	8f 4f       	sbci	r24, 0xFF	; 255
    1282:	9f 4f       	sbci	r25, 0xFF	; 255
    1284:	08 95       	ret

00001286 <__umulhisi3>:
    1286:	a2 9f       	mul	r26, r18
    1288:	b0 01       	movw	r22, r0
    128a:	b3 9f       	mul	r27, r19
    128c:	c0 01       	movw	r24, r0
    128e:	a3 9f       	mul	r26, r19
    1290:	70 0d       	add	r23, r0
    1292:	81 1d       	adc	r24, r1
    1294:	11 24       	eor	r1, r1
    1296:	91 1d       	adc	r25, r1
    1298:	b2 9f       	mul	r27, r18
    129a:	70 0d       	add	r23, r0
    129c:	81 1d       	adc	r24, r1
    129e:	11 24       	eor	r1, r1
    12a0:	91 1d       	adc	r25, r1
    12a2:	08 95       	ret

000012a4 <__udivmodhi4>:
    12a4:	aa 1b       	sub	r26, r26
    12a6:	bb 1b       	sub	r27, r27
    12a8:	51 e1       	ldi	r21, 0x11	; 17
    12aa:	07 c0       	rjmp	.+14     	; 0x12ba <__udivmodhi4_ep>

000012ac <__udivmodhi4_loop>:
    12ac:	aa 1f       	adc	r26, r26
    12ae:	bb 1f       	adc	r27, r27
    12b0:	a6 17       	cp	r26, r22
    12b2:	b7 07       	cpc	r27, r23
    12b4:	10 f0       	brcs	.+4      	; 0x12ba <__udivmodhi4_ep>
    12b6:	a6 1b       	sub	r26, r22
    12b8:	b7 0b       	sbc	r27, r23

000012ba <__udivmodhi4_ep>:
    12ba:	88 1f       	adc	r24, r24
    12bc:	99 1f       	adc	r25, r25
    12be:	5a 95       	dec	r21
    12c0:	a9 f7       	brne	.-22     	; 0x12ac <__udivmodhi4_loop>
    12c2:	80 95       	com	r24
    12c4:	90 95       	com	r25
    12c6:	bc 01       	movw	r22, r24
    12c8:	cd 01       	movw	r24, r26
    12ca:	08 95       	ret

000012cc <__udivmodsi4>:
    12cc:	a1 e2       	ldi	r26, 0x21	; 33
    12ce:	1a 2e       	mov	r1, r26
    12d0:	aa 1b       	sub	r26, r26
    12d2:	bb 1b       	sub	r27, r27
    12d4:	fd 01       	movw	r30, r26
    12d6:	0d c0       	rjmp	.+26     	; 0x12f2 <__udivmodsi4_ep>

000012d8 <__udivmodsi4_loop>:
    12d8:	aa 1f       	adc	r26, r26
    12da:	bb 1f       	adc	r27, r27
    12dc:	ee 1f       	adc	r30, r30
    12de:	ff 1f       	adc	r31, r31
    12e0:	a2 17       	cp	r26, r18
    12e2:	b3 07       	cpc	r27, r19
    12e4:	e4 07       	cpc	r30, r20
    12e6:	f5 07       	cpc	r31, r21
    12e8:	20 f0       	brcs	.+8      	; 0x12f2 <__udivmodsi4_ep>
    12ea:	a2 1b       	sub	r26, r18
    12ec:	b3 0b       	sbc	r27, r19
    12ee:	e4 0b       	sbc	r30, r20
    12f0:	f5 0b       	sbc	r31, r21

000012f2 <__udivmodsi4_ep>:
    12f2:	66 1f       	adc	r22, r22
    12f4:	77 1f       	adc	r23, r23
    12f6:	88 1f       	adc	r24, r24
    12f8:	99 1f       	adc	r25, r25
    12fa:	1a 94       	dec	r1
    12fc:	69 f7       	brne	.-38     	; 0x12d8 <__udivmodsi4_loop>
    12fe:	60 95       	com	r22
    1300:	70 95       	com	r23
    1302:	80 95       	com	r24
    1304:	90 95       	com	r25
    1306:	9b 01       	movw	r18, r22
    1308:	ac 01       	movw	r20, r24
    130a:	bd 01       	movw	r22, r26
    130c:	cf 01       	movw	r24, r30
    130e:	08 95       	ret

00001310 <__floatunsisf>:
    1310:	e8 94       	clt
    1312:	09 c0       	rjmp	.+18     	; 0x1326 <__floatsisf+0x12>

00001314 <__floatsisf>:
    1314:	97 fb       	bst	r25, 7
    1316:	3e f4       	brtc	.+14     	; 0x1326 <__floatsisf+0x12>
    1318:	90 95       	com	r25
    131a:	80 95       	com	r24
    131c:	70 95       	com	r23
    131e:	61 95       	neg	r22
    1320:	7f 4f       	sbci	r23, 0xFF	; 255
    1322:	8f 4f       	sbci	r24, 0xFF	; 255
    1324:	9f 4f       	sbci	r25, 0xFF	; 255
    1326:	99 23       	and	r25, r25
    1328:	a9 f0       	breq	.+42     	; 0x1354 <__floatsisf+0x40>
    132a:	f9 2f       	mov	r31, r25
    132c:	96 e9       	ldi	r25, 0x96	; 150
    132e:	bb 27       	eor	r27, r27
    1330:	93 95       	inc	r25
    1332:	f6 95       	lsr	r31
    1334:	87 95       	ror	r24
    1336:	77 95       	ror	r23
    1338:	67 95       	ror	r22
    133a:	b7 95       	ror	r27
    133c:	f1 11       	cpse	r31, r1
    133e:	f8 cf       	rjmp	.-16     	; 0x1330 <__floatsisf+0x1c>
    1340:	fa f4       	brpl	.+62     	; 0x1380 <__floatsisf+0x6c>
    1342:	bb 0f       	add	r27, r27
    1344:	11 f4       	brne	.+4      	; 0x134a <__floatsisf+0x36>
    1346:	60 ff       	sbrs	r22, 0
    1348:	1b c0       	rjmp	.+54     	; 0x1380 <__floatsisf+0x6c>
    134a:	6f 5f       	subi	r22, 0xFF	; 255
    134c:	7f 4f       	sbci	r23, 0xFF	; 255
    134e:	8f 4f       	sbci	r24, 0xFF	; 255
    1350:	9f 4f       	sbci	r25, 0xFF	; 255
    1352:	16 c0       	rjmp	.+44     	; 0x1380 <__floatsisf+0x6c>
    1354:	88 23       	and	r24, r24
    1356:	11 f0       	breq	.+4      	; 0x135c <__floatsisf+0x48>
    1358:	96 e9       	ldi	r25, 0x96	; 150
    135a:	11 c0       	rjmp	.+34     	; 0x137e <__floatsisf+0x6a>
    135c:	77 23       	and	r23, r23
    135e:	21 f0       	breq	.+8      	; 0x1368 <__floatsisf+0x54>
    1360:	9e e8       	ldi	r25, 0x8E	; 142
    1362:	87 2f       	mov	r24, r23
    1364:	76 2f       	mov	r23, r22
    1366:	05 c0       	rjmp	.+10     	; 0x1372 <__floatsisf+0x5e>
    1368:	66 23       	and	r22, r22
    136a:	71 f0       	breq	.+28     	; 0x1388 <__floatsisf+0x74>
    136c:	96 e8       	ldi	r25, 0x86	; 134
    136e:	86 2f       	mov	r24, r22
    1370:	70 e0       	ldi	r23, 0x00	; 0
    1372:	60 e0       	ldi	r22, 0x00	; 0
    1374:	2a f0       	brmi	.+10     	; 0x1380 <__floatsisf+0x6c>
    1376:	9a 95       	dec	r25
    1378:	66 0f       	add	r22, r22
    137a:	77 1f       	adc	r23, r23
    137c:	88 1f       	adc	r24, r24
    137e:	da f7       	brpl	.-10     	; 0x1376 <__floatsisf+0x62>
    1380:	88 0f       	add	r24, r24
    1382:	96 95       	lsr	r25
    1384:	87 95       	ror	r24
    1386:	97 f9       	bld	r25, 7
    1388:	08 95       	ret

0000138a <__mulsf3>:
    138a:	0b d0       	rcall	.+22     	; 0x13a2 <__mulsf3x>
    138c:	78 c0       	rjmp	.+240    	; 0x147e <__fp_round>
    138e:	69 d0       	rcall	.+210    	; 0x1462 <__fp_pscA>
    1390:	28 f0       	brcs	.+10     	; 0x139c <__mulsf3+0x12>
    1392:	6e d0       	rcall	.+220    	; 0x1470 <__fp_pscB>
    1394:	18 f0       	brcs	.+6      	; 0x139c <__mulsf3+0x12>
    1396:	95 23       	and	r25, r21
    1398:	09 f0       	breq	.+2      	; 0x139c <__mulsf3+0x12>
    139a:	5a c0       	rjmp	.+180    	; 0x1450 <__fp_inf>
    139c:	5f c0       	rjmp	.+190    	; 0x145c <__fp_nan>
    139e:	11 24       	eor	r1, r1
    13a0:	a2 c0       	rjmp	.+324    	; 0x14e6 <__fp_szero>

000013a2 <__mulsf3x>:
    13a2:	7e d0       	rcall	.+252    	; 0x14a0 <__fp_split3>
    13a4:	a0 f3       	brcs	.-24     	; 0x138e <__mulsf3+0x4>

000013a6 <__mulsf3_pse>:
    13a6:	95 9f       	mul	r25, r21
    13a8:	d1 f3       	breq	.-12     	; 0x139e <__mulsf3+0x14>
    13aa:	95 0f       	add	r25, r21
    13ac:	50 e0       	ldi	r21, 0x00	; 0
    13ae:	55 1f       	adc	r21, r21
    13b0:	62 9f       	mul	r22, r18
    13b2:	f0 01       	movw	r30, r0
    13b4:	72 9f       	mul	r23, r18
    13b6:	bb 27       	eor	r27, r27
    13b8:	f0 0d       	add	r31, r0
    13ba:	b1 1d       	adc	r27, r1
    13bc:	63 9f       	mul	r22, r19
    13be:	aa 27       	eor	r26, r26
    13c0:	f0 0d       	add	r31, r0
    13c2:	b1 1d       	adc	r27, r1
    13c4:	aa 1f       	adc	r26, r26
    13c6:	64 9f       	mul	r22, r20
    13c8:	66 27       	eor	r22, r22
    13ca:	b0 0d       	add	r27, r0
    13cc:	a1 1d       	adc	r26, r1
    13ce:	66 1f       	adc	r22, r22
    13d0:	82 9f       	mul	r24, r18
    13d2:	22 27       	eor	r18, r18
    13d4:	b0 0d       	add	r27, r0
    13d6:	a1 1d       	adc	r26, r1
    13d8:	62 1f       	adc	r22, r18
    13da:	73 9f       	mul	r23, r19
    13dc:	b0 0d       	add	r27, r0
    13de:	a1 1d       	adc	r26, r1
    13e0:	62 1f       	adc	r22, r18
    13e2:	83 9f       	mul	r24, r19
    13e4:	a0 0d       	add	r26, r0
    13e6:	61 1d       	adc	r22, r1
    13e8:	22 1f       	adc	r18, r18
    13ea:	74 9f       	mul	r23, r20
    13ec:	33 27       	eor	r19, r19
    13ee:	a0 0d       	add	r26, r0
    13f0:	61 1d       	adc	r22, r1
    13f2:	23 1f       	adc	r18, r19
    13f4:	84 9f       	mul	r24, r20
    13f6:	60 0d       	add	r22, r0
    13f8:	21 1d       	adc	r18, r1
    13fa:	82 2f       	mov	r24, r18
    13fc:	76 2f       	mov	r23, r22
    13fe:	6a 2f       	mov	r22, r26
    1400:	11 24       	eor	r1, r1
    1402:	9f 57       	subi	r25, 0x7F	; 127
    1404:	50 40       	sbci	r21, 0x00	; 0
    1406:	8a f0       	brmi	.+34     	; 0x142a <__mulsf3_pse+0x84>
    1408:	e1 f0       	breq	.+56     	; 0x1442 <__mulsf3_pse+0x9c>
    140a:	88 23       	and	r24, r24
    140c:	4a f0       	brmi	.+18     	; 0x1420 <__mulsf3_pse+0x7a>
    140e:	ee 0f       	add	r30, r30
    1410:	ff 1f       	adc	r31, r31
    1412:	bb 1f       	adc	r27, r27
    1414:	66 1f       	adc	r22, r22
    1416:	77 1f       	adc	r23, r23
    1418:	88 1f       	adc	r24, r24
    141a:	91 50       	subi	r25, 0x01	; 1
    141c:	50 40       	sbci	r21, 0x00	; 0
    141e:	a9 f7       	brne	.-22     	; 0x140a <__mulsf3_pse+0x64>
    1420:	9e 3f       	cpi	r25, 0xFE	; 254
    1422:	51 05       	cpc	r21, r1
    1424:	70 f0       	brcs	.+28     	; 0x1442 <__mulsf3_pse+0x9c>
    1426:	14 c0       	rjmp	.+40     	; 0x1450 <__fp_inf>
    1428:	5e c0       	rjmp	.+188    	; 0x14e6 <__fp_szero>
    142a:	5f 3f       	cpi	r21, 0xFF	; 255
    142c:	ec f3       	brlt	.-6      	; 0x1428 <__mulsf3_pse+0x82>
    142e:	98 3e       	cpi	r25, 0xE8	; 232
    1430:	dc f3       	brlt	.-10     	; 0x1428 <__mulsf3_pse+0x82>
    1432:	86 95       	lsr	r24
    1434:	77 95       	ror	r23
    1436:	67 95       	ror	r22
    1438:	b7 95       	ror	r27
    143a:	f7 95       	ror	r31
    143c:	e7 95       	ror	r30
    143e:	9f 5f       	subi	r25, 0xFF	; 255
    1440:	c1 f7       	brne	.-16     	; 0x1432 <__mulsf3_pse+0x8c>
    1442:	fe 2b       	or	r31, r30
    1444:	88 0f       	add	r24, r24
    1446:	91 1d       	adc	r25, r1
    1448:	96 95       	lsr	r25
    144a:	87 95       	ror	r24
    144c:	97 f9       	bld	r25, 7
    144e:	08 95       	ret

00001450 <__fp_inf>:
    1450:	97 f9       	bld	r25, 7
    1452:	9f 67       	ori	r25, 0x7F	; 127
    1454:	80 e8       	ldi	r24, 0x80	; 128
    1456:	70 e0       	ldi	r23, 0x00	; 0
    1458:	60 e0       	ldi	r22, 0x00	; 0
    145a:	08 95       	ret

0000145c <__fp_nan>:
    145c:	9f ef       	ldi	r25, 0xFF	; 255
    145e:	80 ec       	ldi	r24, 0xC0	; 192
    1460:	08 95       	ret

00001462 <__fp_pscA>:
    1462:	00 24       	eor	r0, r0
    1464:	0a 94       	dec	r0
    1466:	16 16       	cp	r1, r22
    1468:	17 06       	cpc	r1, r23
    146a:	18 06       	cpc	r1, r24
    146c:	09 06       	cpc	r0, r25
    146e:	08 95       	ret

00001470 <__fp_pscB>:
    1470:	00 24       	eor	r0, r0
    1472:	0a 94       	dec	r0
    1474:	12 16       	cp	r1, r18
    1476:	13 06       	cpc	r1, r19
    1478:	14 06       	cpc	r1, r20
    147a:	05 06       	cpc	r0, r21
    147c:	08 95       	ret

0000147e <__fp_round>:
    147e:	09 2e       	mov	r0, r25
    1480:	03 94       	inc	r0
    1482:	00 0c       	add	r0, r0
    1484:	11 f4       	brne	.+4      	; 0x148a <__fp_round+0xc>
    1486:	88 23       	and	r24, r24
    1488:	52 f0       	brmi	.+20     	; 0x149e <__fp_round+0x20>
    148a:	bb 0f       	add	r27, r27
    148c:	40 f4       	brcc	.+16     	; 0x149e <__fp_round+0x20>
    148e:	bf 2b       	or	r27, r31
    1490:	11 f4       	brne	.+4      	; 0x1496 <__fp_round+0x18>
    1492:	60 ff       	sbrs	r22, 0
    1494:	04 c0       	rjmp	.+8      	; 0x149e <__fp_round+0x20>
    1496:	6f 5f       	subi	r22, 0xFF	; 255
    1498:	7f 4f       	sbci	r23, 0xFF	; 255
    149a:	8f 4f       	sbci	r24, 0xFF	; 255
    149c:	9f 4f       	sbci	r25, 0xFF	; 255
    149e:	08 95       	ret

000014a0 <__fp_split3>:
    14a0:	57 fd       	sbrc	r21, 7
    14a2:	90 58       	subi	r25, 0x80	; 128
    14a4:	44 0f       	add	r20, r20
    14a6:	55 1f       	adc	r21, r21
    14a8:	59 f0       	breq	.+22     	; 0x14c0 <__fp_splitA+0x10>
    14aa:	5f 3f       	cpi	r21, 0xFF	; 255
    14ac:	71 f0       	breq	.+28     	; 0x14ca <__fp_splitA+0x1a>
    14ae:	47 95       	ror	r20

000014b0 <__fp_splitA>:
    14b0:	88 0f       	add	r24, r24
    14b2:	97 fb       	bst	r25, 7
    14b4:	99 1f       	adc	r25, r25
    14b6:	61 f0       	breq	.+24     	; 0x14d0 <__fp_splitA+0x20>
    14b8:	9f 3f       	cpi	r25, 0xFF	; 255
    14ba:	79 f0       	breq	.+30     	; 0x14da <__fp_splitA+0x2a>
    14bc:	87 95       	ror	r24
    14be:	08 95       	ret
    14c0:	12 16       	cp	r1, r18
    14c2:	13 06       	cpc	r1, r19
    14c4:	14 06       	cpc	r1, r20
    14c6:	55 1f       	adc	r21, r21
    14c8:	f2 cf       	rjmp	.-28     	; 0x14ae <__fp_split3+0xe>
    14ca:	46 95       	lsr	r20
    14cc:	f1 df       	rcall	.-30     	; 0x14b0 <__fp_splitA>
    14ce:	08 c0       	rjmp	.+16     	; 0x14e0 <__fp_splitA+0x30>
    14d0:	16 16       	cp	r1, r22
    14d2:	17 06       	cpc	r1, r23
    14d4:	18 06       	cpc	r1, r24
    14d6:	99 1f       	adc	r25, r25
    14d8:	f1 cf       	rjmp	.-30     	; 0x14bc <__fp_splitA+0xc>
    14da:	86 95       	lsr	r24
    14dc:	71 05       	cpc	r23, r1
    14de:	61 05       	cpc	r22, r1
    14e0:	08 94       	sec
    14e2:	08 95       	ret

000014e4 <__fp_zero>:
    14e4:	e8 94       	clt

000014e6 <__fp_szero>:
    14e6:	bb 27       	eor	r27, r27
    14e8:	66 27       	eor	r22, r22
    14ea:	77 27       	eor	r23, r23
    14ec:	cb 01       	movw	r24, r22
    14ee:	97 f9       	bld	r25, 7
    14f0:	08 95       	ret

000014f2 <printf>:
    14f2:	a0 e0       	ldi	r26, 0x00	; 0
    14f4:	b0 e0       	ldi	r27, 0x00	; 0
    14f6:	ef e7       	ldi	r30, 0x7F	; 127
    14f8:	fa e0       	ldi	r31, 0x0A	; 10
    14fa:	0c 94 15 0d 	jmp	0x1a2a	; 0x1a2a <__prologue_saves__+0x20>
    14fe:	fe 01       	movw	r30, r28
    1500:	35 96       	adiw	r30, 0x05	; 5
    1502:	61 91       	ld	r22, Z+
    1504:	71 91       	ld	r23, Z+
    1506:	af 01       	movw	r20, r30
    1508:	80 91 74 01 	lds	r24, 0x0174
    150c:	90 91 75 01 	lds	r25, 0x0175
    1510:	0e 94 8d 0a 	call	0x151a	; 0x151a <vfprintf>
    1514:	e2 e0       	ldi	r30, 0x02	; 2
    1516:	0c 94 31 0d 	jmp	0x1a62	; 0x1a62 <__epilogue_restores__+0x20>

0000151a <vfprintf>:
    151a:	ac e0       	ldi	r26, 0x0C	; 12
    151c:	b0 e0       	ldi	r27, 0x00	; 0
    151e:	e3 e9       	ldi	r30, 0x93	; 147
    1520:	fa e0       	ldi	r31, 0x0A	; 10
    1522:	0c 94 05 0d 	jmp	0x1a0a	; 0x1a0a <__prologue_saves__>
    1526:	7c 01       	movw	r14, r24
    1528:	6b 01       	movw	r12, r22
    152a:	8a 01       	movw	r16, r20
    152c:	fc 01       	movw	r30, r24
    152e:	17 82       	std	Z+7, r1	; 0x07
    1530:	16 82       	std	Z+6, r1	; 0x06
    1532:	83 81       	ldd	r24, Z+3	; 0x03
    1534:	81 ff       	sbrs	r24, 1
    1536:	bd c1       	rjmp	.+890    	; 0x18b2 <vfprintf+0x398>
    1538:	ce 01       	movw	r24, r28
    153a:	01 96       	adiw	r24, 0x01	; 1
    153c:	4c 01       	movw	r8, r24
    153e:	f7 01       	movw	r30, r14
    1540:	93 81       	ldd	r25, Z+3	; 0x03
    1542:	f6 01       	movw	r30, r12
    1544:	93 fd       	sbrc	r25, 3
    1546:	85 91       	lpm	r24, Z+
    1548:	93 ff       	sbrs	r25, 3
    154a:	81 91       	ld	r24, Z+
    154c:	6f 01       	movw	r12, r30
    154e:	88 23       	and	r24, r24
    1550:	09 f4       	brne	.+2      	; 0x1554 <vfprintf+0x3a>
    1552:	ab c1       	rjmp	.+854    	; 0x18aa <vfprintf+0x390>
    1554:	85 32       	cpi	r24, 0x25	; 37
    1556:	39 f4       	brne	.+14     	; 0x1566 <vfprintf+0x4c>
    1558:	93 fd       	sbrc	r25, 3
    155a:	85 91       	lpm	r24, Z+
    155c:	93 ff       	sbrs	r25, 3
    155e:	81 91       	ld	r24, Z+
    1560:	6f 01       	movw	r12, r30
    1562:	85 32       	cpi	r24, 0x25	; 37
    1564:	29 f4       	brne	.+10     	; 0x1570 <vfprintf+0x56>
    1566:	b7 01       	movw	r22, r14
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	0e 94 75 0c 	call	0x18ea	; 0x18ea <fputc>
    156e:	e7 cf       	rjmp	.-50     	; 0x153e <vfprintf+0x24>
    1570:	51 2c       	mov	r5, r1
    1572:	31 2c       	mov	r3, r1
    1574:	20 e0       	ldi	r18, 0x00	; 0
    1576:	20 32       	cpi	r18, 0x20	; 32
    1578:	a0 f4       	brcc	.+40     	; 0x15a2 <vfprintf+0x88>
    157a:	8b 32       	cpi	r24, 0x2B	; 43
    157c:	69 f0       	breq	.+26     	; 0x1598 <vfprintf+0x7e>
    157e:	30 f4       	brcc	.+12     	; 0x158c <vfprintf+0x72>
    1580:	80 32       	cpi	r24, 0x20	; 32
    1582:	59 f0       	breq	.+22     	; 0x159a <vfprintf+0x80>
    1584:	83 32       	cpi	r24, 0x23	; 35
    1586:	69 f4       	brne	.+26     	; 0x15a2 <vfprintf+0x88>
    1588:	20 61       	ori	r18, 0x10	; 16
    158a:	2c c0       	rjmp	.+88     	; 0x15e4 <vfprintf+0xca>
    158c:	8d 32       	cpi	r24, 0x2D	; 45
    158e:	39 f0       	breq	.+14     	; 0x159e <vfprintf+0x84>
    1590:	80 33       	cpi	r24, 0x30	; 48
    1592:	39 f4       	brne	.+14     	; 0x15a2 <vfprintf+0x88>
    1594:	21 60       	ori	r18, 0x01	; 1
    1596:	26 c0       	rjmp	.+76     	; 0x15e4 <vfprintf+0xca>
    1598:	22 60       	ori	r18, 0x02	; 2
    159a:	24 60       	ori	r18, 0x04	; 4
    159c:	23 c0       	rjmp	.+70     	; 0x15e4 <vfprintf+0xca>
    159e:	28 60       	ori	r18, 0x08	; 8
    15a0:	21 c0       	rjmp	.+66     	; 0x15e4 <vfprintf+0xca>
    15a2:	27 fd       	sbrc	r18, 7
    15a4:	27 c0       	rjmp	.+78     	; 0x15f4 <vfprintf+0xda>
    15a6:	30 ed       	ldi	r19, 0xD0	; 208
    15a8:	38 0f       	add	r19, r24
    15aa:	3a 30       	cpi	r19, 0x0A	; 10
    15ac:	78 f4       	brcc	.+30     	; 0x15cc <vfprintf+0xb2>
    15ae:	26 ff       	sbrs	r18, 6
    15b0:	06 c0       	rjmp	.+12     	; 0x15be <vfprintf+0xa4>
    15b2:	fa e0       	ldi	r31, 0x0A	; 10
    15b4:	5f 9e       	mul	r5, r31
    15b6:	30 0d       	add	r19, r0
    15b8:	11 24       	eor	r1, r1
    15ba:	53 2e       	mov	r5, r19
    15bc:	13 c0       	rjmp	.+38     	; 0x15e4 <vfprintf+0xca>
    15be:	8a e0       	ldi	r24, 0x0A	; 10
    15c0:	38 9e       	mul	r3, r24
    15c2:	30 0d       	add	r19, r0
    15c4:	11 24       	eor	r1, r1
    15c6:	33 2e       	mov	r3, r19
    15c8:	20 62       	ori	r18, 0x20	; 32
    15ca:	0c c0       	rjmp	.+24     	; 0x15e4 <vfprintf+0xca>
    15cc:	8e 32       	cpi	r24, 0x2E	; 46
    15ce:	21 f4       	brne	.+8      	; 0x15d8 <vfprintf+0xbe>
    15d0:	26 fd       	sbrc	r18, 6
    15d2:	6b c1       	rjmp	.+726    	; 0x18aa <vfprintf+0x390>
    15d4:	20 64       	ori	r18, 0x40	; 64
    15d6:	06 c0       	rjmp	.+12     	; 0x15e4 <vfprintf+0xca>
    15d8:	8c 36       	cpi	r24, 0x6C	; 108
    15da:	11 f4       	brne	.+4      	; 0x15e0 <vfprintf+0xc6>
    15dc:	20 68       	ori	r18, 0x80	; 128
    15de:	02 c0       	rjmp	.+4      	; 0x15e4 <vfprintf+0xca>
    15e0:	88 36       	cpi	r24, 0x68	; 104
    15e2:	41 f4       	brne	.+16     	; 0x15f4 <vfprintf+0xda>
    15e4:	f6 01       	movw	r30, r12
    15e6:	93 fd       	sbrc	r25, 3
    15e8:	85 91       	lpm	r24, Z+
    15ea:	93 ff       	sbrs	r25, 3
    15ec:	81 91       	ld	r24, Z+
    15ee:	6f 01       	movw	r12, r30
    15f0:	81 11       	cpse	r24, r1
    15f2:	c1 cf       	rjmp	.-126    	; 0x1576 <vfprintf+0x5c>
    15f4:	98 2f       	mov	r25, r24
    15f6:	9f 7d       	andi	r25, 0xDF	; 223
    15f8:	95 54       	subi	r25, 0x45	; 69
    15fa:	93 30       	cpi	r25, 0x03	; 3
    15fc:	28 f4       	brcc	.+10     	; 0x1608 <vfprintf+0xee>
    15fe:	0c 5f       	subi	r16, 0xFC	; 252
    1600:	1f 4f       	sbci	r17, 0xFF	; 255
    1602:	ff e3       	ldi	r31, 0x3F	; 63
    1604:	f9 83       	std	Y+1, r31	; 0x01
    1606:	0d c0       	rjmp	.+26     	; 0x1622 <vfprintf+0x108>
    1608:	83 36       	cpi	r24, 0x63	; 99
    160a:	31 f0       	breq	.+12     	; 0x1618 <vfprintf+0xfe>
    160c:	83 37       	cpi	r24, 0x73	; 115
    160e:	71 f0       	breq	.+28     	; 0x162c <vfprintf+0x112>
    1610:	83 35       	cpi	r24, 0x53	; 83
    1612:	09 f0       	breq	.+2      	; 0x1616 <vfprintf+0xfc>
    1614:	5b c0       	rjmp	.+182    	; 0x16cc <vfprintf+0x1b2>
    1616:	22 c0       	rjmp	.+68     	; 0x165c <vfprintf+0x142>
    1618:	f8 01       	movw	r30, r16
    161a:	80 81       	ld	r24, Z
    161c:	89 83       	std	Y+1, r24	; 0x01
    161e:	0e 5f       	subi	r16, 0xFE	; 254
    1620:	1f 4f       	sbci	r17, 0xFF	; 255
    1622:	44 24       	eor	r4, r4
    1624:	43 94       	inc	r4
    1626:	51 2c       	mov	r5, r1
    1628:	54 01       	movw	r10, r8
    162a:	15 c0       	rjmp	.+42     	; 0x1656 <vfprintf+0x13c>
    162c:	38 01       	movw	r6, r16
    162e:	f2 e0       	ldi	r31, 0x02	; 2
    1630:	6f 0e       	add	r6, r31
    1632:	71 1c       	adc	r7, r1
    1634:	f8 01       	movw	r30, r16
    1636:	a0 80       	ld	r10, Z
    1638:	b1 80       	ldd	r11, Z+1	; 0x01
    163a:	26 ff       	sbrs	r18, 6
    163c:	03 c0       	rjmp	.+6      	; 0x1644 <vfprintf+0x12a>
    163e:	65 2d       	mov	r22, r5
    1640:	70 e0       	ldi	r23, 0x00	; 0
    1642:	02 c0       	rjmp	.+4      	; 0x1648 <vfprintf+0x12e>
    1644:	6f ef       	ldi	r22, 0xFF	; 255
    1646:	7f ef       	ldi	r23, 0xFF	; 255
    1648:	c5 01       	movw	r24, r10
    164a:	2c 87       	std	Y+12, r18	; 0x0c
    164c:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <strnlen>
    1650:	2c 01       	movw	r4, r24
    1652:	83 01       	movw	r16, r6
    1654:	2c 85       	ldd	r18, Y+12	; 0x0c
    1656:	2f 77       	andi	r18, 0x7F	; 127
    1658:	22 2e       	mov	r2, r18
    165a:	17 c0       	rjmp	.+46     	; 0x168a <vfprintf+0x170>
    165c:	38 01       	movw	r6, r16
    165e:	f2 e0       	ldi	r31, 0x02	; 2
    1660:	6f 0e       	add	r6, r31
    1662:	71 1c       	adc	r7, r1
    1664:	f8 01       	movw	r30, r16
    1666:	a0 80       	ld	r10, Z
    1668:	b1 80       	ldd	r11, Z+1	; 0x01
    166a:	26 ff       	sbrs	r18, 6
    166c:	03 c0       	rjmp	.+6      	; 0x1674 <vfprintf+0x15a>
    166e:	65 2d       	mov	r22, r5
    1670:	70 e0       	ldi	r23, 0x00	; 0
    1672:	02 c0       	rjmp	.+4      	; 0x1678 <vfprintf+0x15e>
    1674:	6f ef       	ldi	r22, 0xFF	; 255
    1676:	7f ef       	ldi	r23, 0xFF	; 255
    1678:	c5 01       	movw	r24, r10
    167a:	2c 87       	std	Y+12, r18	; 0x0c
    167c:	0e 94 5f 0c 	call	0x18be	; 0x18be <strnlen_P>
    1680:	2c 01       	movw	r4, r24
    1682:	2c 85       	ldd	r18, Y+12	; 0x0c
    1684:	20 68       	ori	r18, 0x80	; 128
    1686:	22 2e       	mov	r2, r18
    1688:	83 01       	movw	r16, r6
    168a:	23 fc       	sbrc	r2, 3
    168c:	1b c0       	rjmp	.+54     	; 0x16c4 <vfprintf+0x1aa>
    168e:	83 2d       	mov	r24, r3
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	48 16       	cp	r4, r24
    1694:	59 06       	cpc	r5, r25
    1696:	b0 f4       	brcc	.+44     	; 0x16c4 <vfprintf+0x1aa>
    1698:	b7 01       	movw	r22, r14
    169a:	80 e2       	ldi	r24, 0x20	; 32
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	0e 94 75 0c 	call	0x18ea	; 0x18ea <fputc>
    16a2:	3a 94       	dec	r3
    16a4:	f4 cf       	rjmp	.-24     	; 0x168e <vfprintf+0x174>
    16a6:	f5 01       	movw	r30, r10
    16a8:	27 fc       	sbrc	r2, 7
    16aa:	85 91       	lpm	r24, Z+
    16ac:	27 fe       	sbrs	r2, 7
    16ae:	81 91       	ld	r24, Z+
    16b0:	5f 01       	movw	r10, r30
    16b2:	b7 01       	movw	r22, r14
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	0e 94 75 0c 	call	0x18ea	; 0x18ea <fputc>
    16ba:	31 10       	cpse	r3, r1
    16bc:	3a 94       	dec	r3
    16be:	f1 e0       	ldi	r31, 0x01	; 1
    16c0:	4f 1a       	sub	r4, r31
    16c2:	51 08       	sbc	r5, r1
    16c4:	41 14       	cp	r4, r1
    16c6:	51 04       	cpc	r5, r1
    16c8:	71 f7       	brne	.-36     	; 0x16a6 <vfprintf+0x18c>
    16ca:	e5 c0       	rjmp	.+458    	; 0x1896 <vfprintf+0x37c>
    16cc:	84 36       	cpi	r24, 0x64	; 100
    16ce:	11 f0       	breq	.+4      	; 0x16d4 <vfprintf+0x1ba>
    16d0:	89 36       	cpi	r24, 0x69	; 105
    16d2:	39 f5       	brne	.+78     	; 0x1722 <vfprintf+0x208>
    16d4:	f8 01       	movw	r30, r16
    16d6:	27 ff       	sbrs	r18, 7
    16d8:	07 c0       	rjmp	.+14     	; 0x16e8 <vfprintf+0x1ce>
    16da:	60 81       	ld	r22, Z
    16dc:	71 81       	ldd	r23, Z+1	; 0x01
    16de:	82 81       	ldd	r24, Z+2	; 0x02
    16e0:	93 81       	ldd	r25, Z+3	; 0x03
    16e2:	0c 5f       	subi	r16, 0xFC	; 252
    16e4:	1f 4f       	sbci	r17, 0xFF	; 255
    16e6:	08 c0       	rjmp	.+16     	; 0x16f8 <vfprintf+0x1de>
    16e8:	60 81       	ld	r22, Z
    16ea:	71 81       	ldd	r23, Z+1	; 0x01
    16ec:	88 27       	eor	r24, r24
    16ee:	77 fd       	sbrc	r23, 7
    16f0:	80 95       	com	r24
    16f2:	98 2f       	mov	r25, r24
    16f4:	0e 5f       	subi	r16, 0xFE	; 254
    16f6:	1f 4f       	sbci	r17, 0xFF	; 255
    16f8:	2f 76       	andi	r18, 0x6F	; 111
    16fa:	b2 2e       	mov	r11, r18
    16fc:	97 ff       	sbrs	r25, 7
    16fe:	09 c0       	rjmp	.+18     	; 0x1712 <vfprintf+0x1f8>
    1700:	90 95       	com	r25
    1702:	80 95       	com	r24
    1704:	70 95       	com	r23
    1706:	61 95       	neg	r22
    1708:	7f 4f       	sbci	r23, 0xFF	; 255
    170a:	8f 4f       	sbci	r24, 0xFF	; 255
    170c:	9f 4f       	sbci	r25, 0xFF	; 255
    170e:	20 68       	ori	r18, 0x80	; 128
    1710:	b2 2e       	mov	r11, r18
    1712:	2a e0       	ldi	r18, 0x0A	; 10
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	a4 01       	movw	r20, r8
    1718:	0e 94 a7 0c 	call	0x194e	; 0x194e <__ultoa_invert>
    171c:	a8 2e       	mov	r10, r24
    171e:	a8 18       	sub	r10, r8
    1720:	44 c0       	rjmp	.+136    	; 0x17aa <vfprintf+0x290>
    1722:	85 37       	cpi	r24, 0x75	; 117
    1724:	29 f4       	brne	.+10     	; 0x1730 <vfprintf+0x216>
    1726:	2f 7e       	andi	r18, 0xEF	; 239
    1728:	b2 2e       	mov	r11, r18
    172a:	2a e0       	ldi	r18, 0x0A	; 10
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	25 c0       	rjmp	.+74     	; 0x177a <vfprintf+0x260>
    1730:	f2 2f       	mov	r31, r18
    1732:	f9 7f       	andi	r31, 0xF9	; 249
    1734:	bf 2e       	mov	r11, r31
    1736:	8f 36       	cpi	r24, 0x6F	; 111
    1738:	c1 f0       	breq	.+48     	; 0x176a <vfprintf+0x250>
    173a:	18 f4       	brcc	.+6      	; 0x1742 <vfprintf+0x228>
    173c:	88 35       	cpi	r24, 0x58	; 88
    173e:	79 f0       	breq	.+30     	; 0x175e <vfprintf+0x244>
    1740:	b4 c0       	rjmp	.+360    	; 0x18aa <vfprintf+0x390>
    1742:	80 37       	cpi	r24, 0x70	; 112
    1744:	19 f0       	breq	.+6      	; 0x174c <vfprintf+0x232>
    1746:	88 37       	cpi	r24, 0x78	; 120
    1748:	21 f0       	breq	.+8      	; 0x1752 <vfprintf+0x238>
    174a:	af c0       	rjmp	.+350    	; 0x18aa <vfprintf+0x390>
    174c:	2f 2f       	mov	r18, r31
    174e:	20 61       	ori	r18, 0x10	; 16
    1750:	b2 2e       	mov	r11, r18
    1752:	b4 fe       	sbrs	r11, 4
    1754:	0d c0       	rjmp	.+26     	; 0x1770 <vfprintf+0x256>
    1756:	8b 2d       	mov	r24, r11
    1758:	84 60       	ori	r24, 0x04	; 4
    175a:	b8 2e       	mov	r11, r24
    175c:	09 c0       	rjmp	.+18     	; 0x1770 <vfprintf+0x256>
    175e:	24 ff       	sbrs	r18, 4
    1760:	0a c0       	rjmp	.+20     	; 0x1776 <vfprintf+0x25c>
    1762:	9f 2f       	mov	r25, r31
    1764:	96 60       	ori	r25, 0x06	; 6
    1766:	b9 2e       	mov	r11, r25
    1768:	06 c0       	rjmp	.+12     	; 0x1776 <vfprintf+0x25c>
    176a:	28 e0       	ldi	r18, 0x08	; 8
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	05 c0       	rjmp	.+10     	; 0x177a <vfprintf+0x260>
    1770:	20 e1       	ldi	r18, 0x10	; 16
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	02 c0       	rjmp	.+4      	; 0x177a <vfprintf+0x260>
    1776:	20 e1       	ldi	r18, 0x10	; 16
    1778:	32 e0       	ldi	r19, 0x02	; 2
    177a:	f8 01       	movw	r30, r16
    177c:	b7 fe       	sbrs	r11, 7
    177e:	07 c0       	rjmp	.+14     	; 0x178e <vfprintf+0x274>
    1780:	60 81       	ld	r22, Z
    1782:	71 81       	ldd	r23, Z+1	; 0x01
    1784:	82 81       	ldd	r24, Z+2	; 0x02
    1786:	93 81       	ldd	r25, Z+3	; 0x03
    1788:	0c 5f       	subi	r16, 0xFC	; 252
    178a:	1f 4f       	sbci	r17, 0xFF	; 255
    178c:	06 c0       	rjmp	.+12     	; 0x179a <vfprintf+0x280>
    178e:	60 81       	ld	r22, Z
    1790:	71 81       	ldd	r23, Z+1	; 0x01
    1792:	80 e0       	ldi	r24, 0x00	; 0
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	0e 5f       	subi	r16, 0xFE	; 254
    1798:	1f 4f       	sbci	r17, 0xFF	; 255
    179a:	a4 01       	movw	r20, r8
    179c:	0e 94 a7 0c 	call	0x194e	; 0x194e <__ultoa_invert>
    17a0:	a8 2e       	mov	r10, r24
    17a2:	a8 18       	sub	r10, r8
    17a4:	fb 2d       	mov	r31, r11
    17a6:	ff 77       	andi	r31, 0x7F	; 127
    17a8:	bf 2e       	mov	r11, r31
    17aa:	b6 fe       	sbrs	r11, 6
    17ac:	0b c0       	rjmp	.+22     	; 0x17c4 <vfprintf+0x2aa>
    17ae:	2b 2d       	mov	r18, r11
    17b0:	2e 7f       	andi	r18, 0xFE	; 254
    17b2:	a5 14       	cp	r10, r5
    17b4:	50 f4       	brcc	.+20     	; 0x17ca <vfprintf+0x2b0>
    17b6:	b4 fe       	sbrs	r11, 4
    17b8:	0a c0       	rjmp	.+20     	; 0x17ce <vfprintf+0x2b4>
    17ba:	b2 fc       	sbrc	r11, 2
    17bc:	08 c0       	rjmp	.+16     	; 0x17ce <vfprintf+0x2b4>
    17be:	2b 2d       	mov	r18, r11
    17c0:	2e 7e       	andi	r18, 0xEE	; 238
    17c2:	05 c0       	rjmp	.+10     	; 0x17ce <vfprintf+0x2b4>
    17c4:	7a 2c       	mov	r7, r10
    17c6:	2b 2d       	mov	r18, r11
    17c8:	03 c0       	rjmp	.+6      	; 0x17d0 <vfprintf+0x2b6>
    17ca:	7a 2c       	mov	r7, r10
    17cc:	01 c0       	rjmp	.+2      	; 0x17d0 <vfprintf+0x2b6>
    17ce:	75 2c       	mov	r7, r5
    17d0:	24 ff       	sbrs	r18, 4
    17d2:	0d c0       	rjmp	.+26     	; 0x17ee <vfprintf+0x2d4>
    17d4:	fe 01       	movw	r30, r28
    17d6:	ea 0d       	add	r30, r10
    17d8:	f1 1d       	adc	r31, r1
    17da:	80 81       	ld	r24, Z
    17dc:	80 33       	cpi	r24, 0x30	; 48
    17de:	11 f4       	brne	.+4      	; 0x17e4 <vfprintf+0x2ca>
    17e0:	29 7e       	andi	r18, 0xE9	; 233
    17e2:	09 c0       	rjmp	.+18     	; 0x17f6 <vfprintf+0x2dc>
    17e4:	22 ff       	sbrs	r18, 2
    17e6:	06 c0       	rjmp	.+12     	; 0x17f4 <vfprintf+0x2da>
    17e8:	73 94       	inc	r7
    17ea:	73 94       	inc	r7
    17ec:	04 c0       	rjmp	.+8      	; 0x17f6 <vfprintf+0x2dc>
    17ee:	82 2f       	mov	r24, r18
    17f0:	86 78       	andi	r24, 0x86	; 134
    17f2:	09 f0       	breq	.+2      	; 0x17f6 <vfprintf+0x2dc>
    17f4:	73 94       	inc	r7
    17f6:	23 fd       	sbrc	r18, 3
    17f8:	13 c0       	rjmp	.+38     	; 0x1820 <vfprintf+0x306>
    17fa:	20 ff       	sbrs	r18, 0
    17fc:	06 c0       	rjmp	.+12     	; 0x180a <vfprintf+0x2f0>
    17fe:	5a 2c       	mov	r5, r10
    1800:	73 14       	cp	r7, r3
    1802:	18 f4       	brcc	.+6      	; 0x180a <vfprintf+0x2f0>
    1804:	53 0c       	add	r5, r3
    1806:	57 18       	sub	r5, r7
    1808:	73 2c       	mov	r7, r3
    180a:	73 14       	cp	r7, r3
    180c:	68 f4       	brcc	.+26     	; 0x1828 <vfprintf+0x30e>
    180e:	b7 01       	movw	r22, r14
    1810:	80 e2       	ldi	r24, 0x20	; 32
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	2c 87       	std	Y+12, r18	; 0x0c
    1816:	0e 94 75 0c 	call	0x18ea	; 0x18ea <fputc>
    181a:	73 94       	inc	r7
    181c:	2c 85       	ldd	r18, Y+12	; 0x0c
    181e:	f5 cf       	rjmp	.-22     	; 0x180a <vfprintf+0x2f0>
    1820:	73 14       	cp	r7, r3
    1822:	10 f4       	brcc	.+4      	; 0x1828 <vfprintf+0x30e>
    1824:	37 18       	sub	r3, r7
    1826:	01 c0       	rjmp	.+2      	; 0x182a <vfprintf+0x310>
    1828:	31 2c       	mov	r3, r1
    182a:	24 ff       	sbrs	r18, 4
    182c:	12 c0       	rjmp	.+36     	; 0x1852 <vfprintf+0x338>
    182e:	b7 01       	movw	r22, r14
    1830:	80 e3       	ldi	r24, 0x30	; 48
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	2c 87       	std	Y+12, r18	; 0x0c
    1836:	0e 94 75 0c 	call	0x18ea	; 0x18ea <fputc>
    183a:	2c 85       	ldd	r18, Y+12	; 0x0c
    183c:	22 ff       	sbrs	r18, 2
    183e:	17 c0       	rjmp	.+46     	; 0x186e <vfprintf+0x354>
    1840:	21 ff       	sbrs	r18, 1
    1842:	03 c0       	rjmp	.+6      	; 0x184a <vfprintf+0x330>
    1844:	88 e5       	ldi	r24, 0x58	; 88
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	02 c0       	rjmp	.+4      	; 0x184e <vfprintf+0x334>
    184a:	88 e7       	ldi	r24, 0x78	; 120
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	b7 01       	movw	r22, r14
    1850:	0c c0       	rjmp	.+24     	; 0x186a <vfprintf+0x350>
    1852:	82 2f       	mov	r24, r18
    1854:	86 78       	andi	r24, 0x86	; 134
    1856:	59 f0       	breq	.+22     	; 0x186e <vfprintf+0x354>
    1858:	21 fd       	sbrc	r18, 1
    185a:	02 c0       	rjmp	.+4      	; 0x1860 <vfprintf+0x346>
    185c:	80 e2       	ldi	r24, 0x20	; 32
    185e:	01 c0       	rjmp	.+2      	; 0x1862 <vfprintf+0x348>
    1860:	8b e2       	ldi	r24, 0x2B	; 43
    1862:	27 fd       	sbrc	r18, 7
    1864:	8d e2       	ldi	r24, 0x2D	; 45
    1866:	b7 01       	movw	r22, r14
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	0e 94 75 0c 	call	0x18ea	; 0x18ea <fputc>
    186e:	a5 14       	cp	r10, r5
    1870:	38 f4       	brcc	.+14     	; 0x1880 <vfprintf+0x366>
    1872:	b7 01       	movw	r22, r14
    1874:	80 e3       	ldi	r24, 0x30	; 48
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	0e 94 75 0c 	call	0x18ea	; 0x18ea <fputc>
    187c:	5a 94       	dec	r5
    187e:	f7 cf       	rjmp	.-18     	; 0x186e <vfprintf+0x354>
    1880:	aa 94       	dec	r10
    1882:	f4 01       	movw	r30, r8
    1884:	ea 0d       	add	r30, r10
    1886:	f1 1d       	adc	r31, r1
    1888:	80 81       	ld	r24, Z
    188a:	b7 01       	movw	r22, r14
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	0e 94 75 0c 	call	0x18ea	; 0x18ea <fputc>
    1892:	a1 10       	cpse	r10, r1
    1894:	f5 cf       	rjmp	.-22     	; 0x1880 <vfprintf+0x366>
    1896:	33 20       	and	r3, r3
    1898:	09 f4       	brne	.+2      	; 0x189c <vfprintf+0x382>
    189a:	51 ce       	rjmp	.-862    	; 0x153e <vfprintf+0x24>
    189c:	b7 01       	movw	r22, r14
    189e:	80 e2       	ldi	r24, 0x20	; 32
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	0e 94 75 0c 	call	0x18ea	; 0x18ea <fputc>
    18a6:	3a 94       	dec	r3
    18a8:	f6 cf       	rjmp	.-20     	; 0x1896 <vfprintf+0x37c>
    18aa:	f7 01       	movw	r30, r14
    18ac:	86 81       	ldd	r24, Z+6	; 0x06
    18ae:	97 81       	ldd	r25, Z+7	; 0x07
    18b0:	02 c0       	rjmp	.+4      	; 0x18b6 <vfprintf+0x39c>
    18b2:	8f ef       	ldi	r24, 0xFF	; 255
    18b4:	9f ef       	ldi	r25, 0xFF	; 255
    18b6:	2c 96       	adiw	r28, 0x0c	; 12
    18b8:	e2 e1       	ldi	r30, 0x12	; 18
    18ba:	0c 94 21 0d 	jmp	0x1a42	; 0x1a42 <__epilogue_restores__>

000018be <strnlen_P>:
    18be:	fc 01       	movw	r30, r24
    18c0:	05 90       	lpm	r0, Z+
    18c2:	61 50       	subi	r22, 0x01	; 1
    18c4:	70 40       	sbci	r23, 0x00	; 0
    18c6:	01 10       	cpse	r0, r1
    18c8:	d8 f7       	brcc	.-10     	; 0x18c0 <strnlen_P+0x2>
    18ca:	80 95       	com	r24
    18cc:	90 95       	com	r25
    18ce:	8e 0f       	add	r24, r30
    18d0:	9f 1f       	adc	r25, r31
    18d2:	08 95       	ret

000018d4 <strnlen>:
    18d4:	fc 01       	movw	r30, r24
    18d6:	61 50       	subi	r22, 0x01	; 1
    18d8:	70 40       	sbci	r23, 0x00	; 0
    18da:	01 90       	ld	r0, Z+
    18dc:	01 10       	cpse	r0, r1
    18de:	d8 f7       	brcc	.-10     	; 0x18d6 <strnlen+0x2>
    18e0:	80 95       	com	r24
    18e2:	90 95       	com	r25
    18e4:	8e 0f       	add	r24, r30
    18e6:	9f 1f       	adc	r25, r31
    18e8:	08 95       	ret

000018ea <fputc>:
    18ea:	0f 93       	push	r16
    18ec:	1f 93       	push	r17
    18ee:	cf 93       	push	r28
    18f0:	df 93       	push	r29
    18f2:	18 2f       	mov	r17, r24
    18f4:	09 2f       	mov	r16, r25
    18f6:	eb 01       	movw	r28, r22
    18f8:	8b 81       	ldd	r24, Y+3	; 0x03
    18fa:	81 fd       	sbrc	r24, 1
    18fc:	03 c0       	rjmp	.+6      	; 0x1904 <fputc+0x1a>
    18fe:	8f ef       	ldi	r24, 0xFF	; 255
    1900:	9f ef       	ldi	r25, 0xFF	; 255
    1902:	20 c0       	rjmp	.+64     	; 0x1944 <fputc+0x5a>
    1904:	82 ff       	sbrs	r24, 2
    1906:	10 c0       	rjmp	.+32     	; 0x1928 <fputc+0x3e>
    1908:	4e 81       	ldd	r20, Y+6	; 0x06
    190a:	5f 81       	ldd	r21, Y+7	; 0x07
    190c:	2c 81       	ldd	r18, Y+4	; 0x04
    190e:	3d 81       	ldd	r19, Y+5	; 0x05
    1910:	42 17       	cp	r20, r18
    1912:	53 07       	cpc	r21, r19
    1914:	7c f4       	brge	.+30     	; 0x1934 <fputc+0x4a>
    1916:	e8 81       	ld	r30, Y
    1918:	f9 81       	ldd	r31, Y+1	; 0x01
    191a:	9f 01       	movw	r18, r30
    191c:	2f 5f       	subi	r18, 0xFF	; 255
    191e:	3f 4f       	sbci	r19, 0xFF	; 255
    1920:	39 83       	std	Y+1, r19	; 0x01
    1922:	28 83       	st	Y, r18
    1924:	10 83       	st	Z, r17
    1926:	06 c0       	rjmp	.+12     	; 0x1934 <fputc+0x4a>
    1928:	e8 85       	ldd	r30, Y+8	; 0x08
    192a:	f9 85       	ldd	r31, Y+9	; 0x09
    192c:	81 2f       	mov	r24, r17
    192e:	09 95       	icall
    1930:	89 2b       	or	r24, r25
    1932:	29 f7       	brne	.-54     	; 0x18fe <fputc+0x14>
    1934:	2e 81       	ldd	r18, Y+6	; 0x06
    1936:	3f 81       	ldd	r19, Y+7	; 0x07
    1938:	2f 5f       	subi	r18, 0xFF	; 255
    193a:	3f 4f       	sbci	r19, 0xFF	; 255
    193c:	3f 83       	std	Y+7, r19	; 0x07
    193e:	2e 83       	std	Y+6, r18	; 0x06
    1940:	81 2f       	mov	r24, r17
    1942:	90 2f       	mov	r25, r16
    1944:	df 91       	pop	r29
    1946:	cf 91       	pop	r28
    1948:	1f 91       	pop	r17
    194a:	0f 91       	pop	r16
    194c:	08 95       	ret

0000194e <__ultoa_invert>:
    194e:	fa 01       	movw	r30, r20
    1950:	aa 27       	eor	r26, r26
    1952:	28 30       	cpi	r18, 0x08	; 8
    1954:	51 f1       	breq	.+84     	; 0x19aa <__ultoa_invert+0x5c>
    1956:	20 31       	cpi	r18, 0x10	; 16
    1958:	81 f1       	breq	.+96     	; 0x19ba <__ultoa_invert+0x6c>
    195a:	e8 94       	clt
    195c:	6f 93       	push	r22
    195e:	6e 7f       	andi	r22, 0xFE	; 254
    1960:	6e 5f       	subi	r22, 0xFE	; 254
    1962:	7f 4f       	sbci	r23, 0xFF	; 255
    1964:	8f 4f       	sbci	r24, 0xFF	; 255
    1966:	9f 4f       	sbci	r25, 0xFF	; 255
    1968:	af 4f       	sbci	r26, 0xFF	; 255
    196a:	b1 e0       	ldi	r27, 0x01	; 1
    196c:	3e d0       	rcall	.+124    	; 0x19ea <__ultoa_invert+0x9c>
    196e:	b4 e0       	ldi	r27, 0x04	; 4
    1970:	3c d0       	rcall	.+120    	; 0x19ea <__ultoa_invert+0x9c>
    1972:	67 0f       	add	r22, r23
    1974:	78 1f       	adc	r23, r24
    1976:	89 1f       	adc	r24, r25
    1978:	9a 1f       	adc	r25, r26
    197a:	a1 1d       	adc	r26, r1
    197c:	68 0f       	add	r22, r24
    197e:	79 1f       	adc	r23, r25
    1980:	8a 1f       	adc	r24, r26
    1982:	91 1d       	adc	r25, r1
    1984:	a1 1d       	adc	r26, r1
    1986:	6a 0f       	add	r22, r26
    1988:	71 1d       	adc	r23, r1
    198a:	81 1d       	adc	r24, r1
    198c:	91 1d       	adc	r25, r1
    198e:	a1 1d       	adc	r26, r1
    1990:	20 d0       	rcall	.+64     	; 0x19d2 <__ultoa_invert+0x84>
    1992:	09 f4       	brne	.+2      	; 0x1996 <__ultoa_invert+0x48>
    1994:	68 94       	set
    1996:	3f 91       	pop	r19
    1998:	2a e0       	ldi	r18, 0x0A	; 10
    199a:	26 9f       	mul	r18, r22
    199c:	11 24       	eor	r1, r1
    199e:	30 19       	sub	r19, r0
    19a0:	30 5d       	subi	r19, 0xD0	; 208
    19a2:	31 93       	st	Z+, r19
    19a4:	de f6       	brtc	.-74     	; 0x195c <__ultoa_invert+0xe>
    19a6:	cf 01       	movw	r24, r30
    19a8:	08 95       	ret
    19aa:	46 2f       	mov	r20, r22
    19ac:	47 70       	andi	r20, 0x07	; 7
    19ae:	40 5d       	subi	r20, 0xD0	; 208
    19b0:	41 93       	st	Z+, r20
    19b2:	b3 e0       	ldi	r27, 0x03	; 3
    19b4:	0f d0       	rcall	.+30     	; 0x19d4 <__ultoa_invert+0x86>
    19b6:	c9 f7       	brne	.-14     	; 0x19aa <__ultoa_invert+0x5c>
    19b8:	f6 cf       	rjmp	.-20     	; 0x19a6 <__ultoa_invert+0x58>
    19ba:	46 2f       	mov	r20, r22
    19bc:	4f 70       	andi	r20, 0x0F	; 15
    19be:	40 5d       	subi	r20, 0xD0	; 208
    19c0:	4a 33       	cpi	r20, 0x3A	; 58
    19c2:	18 f0       	brcs	.+6      	; 0x19ca <__ultoa_invert+0x7c>
    19c4:	49 5d       	subi	r20, 0xD9	; 217
    19c6:	31 fd       	sbrc	r19, 1
    19c8:	40 52       	subi	r20, 0x20	; 32
    19ca:	41 93       	st	Z+, r20
    19cc:	02 d0       	rcall	.+4      	; 0x19d2 <__ultoa_invert+0x84>
    19ce:	a9 f7       	brne	.-22     	; 0x19ba <__ultoa_invert+0x6c>
    19d0:	ea cf       	rjmp	.-44     	; 0x19a6 <__ultoa_invert+0x58>
    19d2:	b4 e0       	ldi	r27, 0x04	; 4
    19d4:	a6 95       	lsr	r26
    19d6:	97 95       	ror	r25
    19d8:	87 95       	ror	r24
    19da:	77 95       	ror	r23
    19dc:	67 95       	ror	r22
    19de:	ba 95       	dec	r27
    19e0:	c9 f7       	brne	.-14     	; 0x19d4 <__ultoa_invert+0x86>
    19e2:	00 97       	sbiw	r24, 0x00	; 0
    19e4:	61 05       	cpc	r22, r1
    19e6:	71 05       	cpc	r23, r1
    19e8:	08 95       	ret
    19ea:	9b 01       	movw	r18, r22
    19ec:	ac 01       	movw	r20, r24
    19ee:	0a 2e       	mov	r0, r26
    19f0:	06 94       	lsr	r0
    19f2:	57 95       	ror	r21
    19f4:	47 95       	ror	r20
    19f6:	37 95       	ror	r19
    19f8:	27 95       	ror	r18
    19fa:	ba 95       	dec	r27
    19fc:	c9 f7       	brne	.-14     	; 0x19f0 <__ultoa_invert+0xa2>
    19fe:	62 0f       	add	r22, r18
    1a00:	73 1f       	adc	r23, r19
    1a02:	84 1f       	adc	r24, r20
    1a04:	95 1f       	adc	r25, r21
    1a06:	a0 1d       	adc	r26, r0
    1a08:	08 95       	ret

00001a0a <__prologue_saves__>:
    1a0a:	2f 92       	push	r2
    1a0c:	3f 92       	push	r3
    1a0e:	4f 92       	push	r4
    1a10:	5f 92       	push	r5
    1a12:	6f 92       	push	r6
    1a14:	7f 92       	push	r7
    1a16:	8f 92       	push	r8
    1a18:	9f 92       	push	r9
    1a1a:	af 92       	push	r10
    1a1c:	bf 92       	push	r11
    1a1e:	cf 92       	push	r12
    1a20:	df 92       	push	r13
    1a22:	ef 92       	push	r14
    1a24:	ff 92       	push	r15
    1a26:	0f 93       	push	r16
    1a28:	1f 93       	push	r17
    1a2a:	cf 93       	push	r28
    1a2c:	df 93       	push	r29
    1a2e:	cd b7       	in	r28, 0x3d	; 61
    1a30:	de b7       	in	r29, 0x3e	; 62
    1a32:	ca 1b       	sub	r28, r26
    1a34:	db 0b       	sbc	r29, r27
    1a36:	0f b6       	in	r0, 0x3f	; 63
    1a38:	f8 94       	cli
    1a3a:	de bf       	out	0x3e, r29	; 62
    1a3c:	0f be       	out	0x3f, r0	; 63
    1a3e:	cd bf       	out	0x3d, r28	; 61
    1a40:	09 94       	ijmp

00001a42 <__epilogue_restores__>:
    1a42:	2a 88       	ldd	r2, Y+18	; 0x12
    1a44:	39 88       	ldd	r3, Y+17	; 0x11
    1a46:	48 88       	ldd	r4, Y+16	; 0x10
    1a48:	5f 84       	ldd	r5, Y+15	; 0x0f
    1a4a:	6e 84       	ldd	r6, Y+14	; 0x0e
    1a4c:	7d 84       	ldd	r7, Y+13	; 0x0d
    1a4e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1a50:	9b 84       	ldd	r9, Y+11	; 0x0b
    1a52:	aa 84       	ldd	r10, Y+10	; 0x0a
    1a54:	b9 84       	ldd	r11, Y+9	; 0x09
    1a56:	c8 84       	ldd	r12, Y+8	; 0x08
    1a58:	df 80       	ldd	r13, Y+7	; 0x07
    1a5a:	ee 80       	ldd	r14, Y+6	; 0x06
    1a5c:	fd 80       	ldd	r15, Y+5	; 0x05
    1a5e:	0c 81       	ldd	r16, Y+4	; 0x04
    1a60:	1b 81       	ldd	r17, Y+3	; 0x03
    1a62:	aa 81       	ldd	r26, Y+2	; 0x02
    1a64:	b9 81       	ldd	r27, Y+1	; 0x01
    1a66:	ce 0f       	add	r28, r30
    1a68:	d1 1d       	adc	r29, r1
    1a6a:	0f b6       	in	r0, 0x3f	; 63
    1a6c:	f8 94       	cli
    1a6e:	de bf       	out	0x3e, r29	; 62
    1a70:	0f be       	out	0x3f, r0	; 63
    1a72:	cd bf       	out	0x3d, r28	; 61
    1a74:	ed 01       	movw	r28, r26
    1a76:	08 95       	ret

00001a78 <_exit>:
    1a78:	f8 94       	cli

00001a7a <__stop_program>:
    1a7a:	ff cf       	rjmp	.-2      	; 0x1a7a <__stop_program>
