
imu_spi_com.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000002c2  00000356  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000356  2**0
                  ALLOC
  3 .stab         00000e34  00000000  00000000  00000358  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d89  00000000  00000000  0000118c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001f15  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000040  00000000  00000000  00001f28  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000017c  00000000  00000000  00001f68  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000028  00000000  00000000  000020e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000000b6  00000000  00000000  0000210c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 3c 01 	jmp	0x278	; 0x278 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 ac 00 	call	0x158	; 0x158 <main>
  88:	0c 94 5f 01 	jmp	0x2be	; 0x2be <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <SPI_MasterInit>:

#include "IMU_communication.h"
// including myUSART for debugging
#include "myUSART.h"

void SPI_MasterInit(void){
  90:	cf 93       	push	r28
  92:	df 93       	push	r29
  94:	cd b7       	in	r28, 0x3d	; 61
  96:	de b7       	in	r29, 0x3e	; 62
	// set MOSI, SCK and SS as output, all others are inputs.
	DDR_SPI = ( 1 << SPI_MOSI ) | ( 1 << SPI_SCK ) | ( 1 << SPI_SS );
  98:	84 e2       	ldi	r24, 0x24	; 36
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	2c e2       	ldi	r18, 0x2C	; 44
  9e:	fc 01       	movw	r30, r24
  a0:	20 83       	st	Z, r18

	// SPI Control Register
	// SPE bit: SPI Enable
	// MSTR bit: Master select bit
	// SPR0 bit: Clock select bit, sets clock rate to Fosc/16
	SPCR = ( 1 << SPE ) | ( 1 << MSTR ) | ( 1 << SPR0 );
  a2:	8c e4       	ldi	r24, 0x4C	; 76
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	21 e5       	ldi	r18, 0x51	; 81
  a8:	fc 01       	movw	r30, r24
  aa:	20 83       	st	Z, r18
}
  ac:	df 91       	pop	r29
  ae:	cf 91       	pop	r28
  b0:	08 95       	ret

000000b2 <SPI_MasterTransmit>:

void SPI_MasterTransmit(char cData){
  b2:	cf 93       	push	r28
  b4:	df 93       	push	r29
  b6:	1f 92       	push	r1
  b8:	cd b7       	in	r28, 0x3d	; 61
  ba:	de b7       	in	r29, 0x3e	; 62
  bc:	89 83       	std	Y+1, r24	; 0x01
	// Start transmission
	// SPI Data Register, transfers data between register file and the SPI shift register
	SPDR = cData;
  be:	8e e4       	ldi	r24, 0x4E	; 78
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	29 81       	ldd	r18, Y+1	; 0x01
  c4:	fc 01       	movw	r30, r24
  c6:	20 83       	st	Z, r18

	// Wait for transmission to complete
	// SPI Status Register
	// SPIF bit: SPI Interrupt Flag, it is set when a serial transfer is complete
	while ( !( SPSR & ( 1 << SPIF ) ) ){};
  c8:	00 00       	nop
  ca:	8d e4       	ldi	r24, 0x4D	; 77
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	fc 01       	movw	r30, r24
  d0:	80 81       	ld	r24, Z
  d2:	88 23       	and	r24, r24
  d4:	d4 f7       	brge	.-12     	; 0xca <SPI_MasterTransmit+0x18>
}
  d6:	0f 90       	pop	r0
  d8:	df 91       	pop	r29
  da:	cf 91       	pop	r28
  dc:	08 95       	ret

000000de <IMU_read_acc>:

void IMU_read_acc(char *accBuffer){
  de:	cf 93       	push	r28
  e0:	df 93       	push	r29
  e2:	00 d0       	rcall	.+0      	; 0xe4 <IMU_read_acc+0x6>
  e4:	00 d0       	rcall	.+0      	; 0xe6 <IMU_read_acc+0x8>
  e6:	1f 92       	push	r1
  e8:	cd b7       	in	r28, 0x3d	; 61
  ea:	de b7       	in	r29, 0x3e	; 62
  ec:	9d 83       	std	Y+5, r25	; 0x05
  ee:	8c 83       	std	Y+4, r24	; 0x04
	char *acc = accBuffer;
  f0:	8c 81       	ldd	r24, Y+4	; 0x04
  f2:	9d 81       	ldd	r25, Y+5	; 0x05
  f4:	9a 83       	std	Y+2, r25	; 0x02
  f6:	89 83       	std	Y+1, r24	; 0x01

	// Send "read from acceleration output register" signal
	SPDR = 0b10101000;
  f8:	8e e4       	ldi	r24, 0x4E	; 78
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	28 ea       	ldi	r18, 0xA8	; 168
  fe:	fc 01       	movw	r30, r24
 100:	20 83       	st	Z, r18
	// Wait for the request to be sent
	while( !(SPSR & (1 << SPIF ) ) ){};
 102:	00 00       	nop
 104:	8d e4       	ldi	r24, 0x4D	; 77
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	fc 01       	movw	r30, r24
 10a:	80 81       	ld	r24, Z
 10c:	88 23       	and	r24, r24
 10e:	d4 f7       	brge	.-12     	; 0x104 <IMU_read_acc+0x26>

	for (unsigned char i = 0; i <= 6; i++){
 110:	1b 82       	std	Y+3, r1	; 0x03
 112:	17 c0       	rjmp	.+46     	; 0x142 <IMU_read_acc+0x64>
		while( !(SPSR & (1 << SPIF ) ) ){};
 114:	00 00       	nop
 116:	8d e4       	ldi	r24, 0x4D	; 77
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	fc 01       	movw	r30, r24
 11c:	80 81       	ld	r24, Z
 11e:	88 23       	and	r24, r24
 120:	d4 f7       	brge	.-12     	; 0x116 <IMU_read_acc+0x38>
			*acc = SPDR;
 122:	8e e4       	ldi	r24, 0x4E	; 78
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	fc 01       	movw	r30, r24
 128:	20 81       	ld	r18, Z
 12a:	89 81       	ldd	r24, Y+1	; 0x01
 12c:	9a 81       	ldd	r25, Y+2	; 0x02
 12e:	fc 01       	movw	r30, r24
 130:	20 83       	st	Z, r18
			acc++;
 132:	89 81       	ldd	r24, Y+1	; 0x01
 134:	9a 81       	ldd	r25, Y+2	; 0x02
 136:	01 96       	adiw	r24, 0x01	; 1
 138:	9a 83       	std	Y+2, r25	; 0x02
 13a:	89 83       	std	Y+1, r24	; 0x01
	// Send "read from acceleration output register" signal
	SPDR = 0b10101000;
	// Wait for the request to be sent
	while( !(SPSR & (1 << SPIF ) ) ){};

	for (unsigned char i = 0; i <= 6; i++){
 13c:	8b 81       	ldd	r24, Y+3	; 0x03
 13e:	8f 5f       	subi	r24, 0xFF	; 255
 140:	8b 83       	std	Y+3, r24	; 0x03
 142:	8b 81       	ldd	r24, Y+3	; 0x03
 144:	87 30       	cpi	r24, 0x07	; 7
 146:	30 f3       	brcs	.-52     	; 0x114 <IMU_read_acc+0x36>

			// This actually shows some data, at the moment, accBuffer is an 8bit variable
			// so it's definitely not the entire data package.
	}

}
 148:	0f 90       	pop	r0
 14a:	0f 90       	pop	r0
 14c:	0f 90       	pop	r0
 14e:	0f 90       	pop	r0
 150:	0f 90       	pop	r0
 152:	df 91       	pop	r29
 154:	cf 91       	pop	r28
 156:	08 95       	ret

00000158 <main>:
#define FOSC 16000000
#define BAUD 9600
#define MYUBRR FOSC/BAUD/16 - 1


int main(){
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
 15c:	00 d0       	rcall	.+0      	; 0x15e <main+0x6>
 15e:	00 d0       	rcall	.+0      	; 0x160 <main+0x8>
 160:	00 d0       	rcall	.+0      	; 0x162 <main+0xa>
 162:	cd b7       	in	r28, 0x3d	; 61
 164:	de b7       	in	r29, 0x3e	; 62
	asm("sei");
 166:	78 94       	sei
	USART_init(MYUBRR);
 168:	87 e6       	ldi	r24, 0x67	; 103
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	0e 94 c2 00 	call	0x184	; 0x184 <USART_init>
	SPI_MasterInit();
 170:	0e 94 48 00 	call	0x90	; 0x90 <SPI_MasterInit>
	char acc_data[6];

	while(1){
		IMU_read_acc(acc_data);
 174:	ce 01       	movw	r24, r28
 176:	01 96       	adiw	r24, 0x01	; 1
 178:	0e 94 6f 00 	call	0xde	; 0xde <IMU_read_acc>
		//int acc_X = acc_data[0];
		//acc_X |= (acc_data[1] << 8);
		//USART_Transmit_byte_hex(acc_data[0]);
		USART_Transmit('a');
 17c:	81 e6       	ldi	r24, 0x61	; 97
 17e:	0e 94 e5 00 	call	0x1ca	; 0x1ca <USART_Transmit>
	}
 182:	f8 cf       	rjmp	.-16     	; 0x174 <main+0x1c>

00000184 <USART_init>:
 */

#include "myUSART.h"


void USART_init(unsigned int br){
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	00 d0       	rcall	.+0      	; 0x18a <USART_init+0x6>
 18a:	cd b7       	in	r28, 0x3d	; 61
 18c:	de b7       	in	r29, 0x3e	; 62
 18e:	9a 83       	std	Y+2, r25	; 0x02
 190:	89 83       	std	Y+1, r24	; 0x01
	// Settin Baud Rate to br
	UBRR0H = (unsigned char) (br >> 8);
 192:	85 ec       	ldi	r24, 0xC5	; 197
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	29 81       	ldd	r18, Y+1	; 0x01
 198:	3a 81       	ldd	r19, Y+2	; 0x02
 19a:	23 2f       	mov	r18, r19
 19c:	33 27       	eor	r19, r19
 19e:	fc 01       	movw	r30, r24
 1a0:	20 83       	st	Z, r18
	UBRR0L = (unsigned char) br;
 1a2:	84 ec       	ldi	r24, 0xC4	; 196
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	29 81       	ldd	r18, Y+1	; 0x01
 1a8:	fc 01       	movw	r30, r24
 1aa:	20 83       	st	Z, r18

	// Enabling Recieve (RXEN0) and transmit (TXEN0) and
	// the RX/TX Complete Interrupt in the USART
	//Control and Status Register 0B
	UCSR0B = (1 << RXEN0) | ( 1 << TXEN0 ) | ( 1 << RXCIE0);
 1ac:	81 ec       	ldi	r24, 0xC1	; 193
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	28 e9       	ldi	r18, 0x98	; 152
 1b2:	fc 01       	movw	r30, r24
 1b4:	20 83       	st	Z, r18

	// Setting frame format:
		// 2 stop bits	8 bits of data
	UCSR0C = (1 << USBS0) | (3 << UCSZ00);
 1b6:	82 ec       	ldi	r24, 0xC2	; 194
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	2e e0       	ldi	r18, 0x0E	; 14
 1bc:	fc 01       	movw	r30, r24
 1be:	20 83       	st	Z, r18
}
 1c0:	0f 90       	pop	r0
 1c2:	0f 90       	pop	r0
 1c4:	df 91       	pop	r29
 1c6:	cf 91       	pop	r28
 1c8:	08 95       	ret

000001ca <USART_Transmit>:


void USART_Transmit(unsigned char data){
 1ca:	cf 93       	push	r28
 1cc:	df 93       	push	r29
 1ce:	1f 92       	push	r1
 1d0:	cd b7       	in	r28, 0x3d	; 61
 1d2:	de b7       	in	r29, 0x3e	; 62
 1d4:	89 83       	std	Y+1, r24	; 0x01
	// Wait while the transmit buffer is not empty (UDRE0 flag in UCSR0A)
	while( !(UCSR0A & (1 << UDRE0)) ){
 1d6:	00 00       	nop
 1d8:	80 ec       	ldi	r24, 0xC0	; 192
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	fc 01       	movw	r30, r24
 1de:	80 81       	ld	r24, Z
 1e0:	88 2f       	mov	r24, r24
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	80 72       	andi	r24, 0x20	; 32
 1e6:	99 27       	eor	r25, r25
 1e8:	00 97       	sbiw	r24, 0x00	; 0
 1ea:	b1 f3       	breq	.-20     	; 0x1d8 <USART_Transmit+0xe>
		;
	}
	// Write the data into the USART Data I/O register
	UDR0 = data;
 1ec:	86 ec       	ldi	r24, 0xC6	; 198
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	29 81       	ldd	r18, Y+1	; 0x01
 1f2:	fc 01       	movw	r30, r24
 1f4:	20 83       	st	Z, r18
}
 1f6:	0f 90       	pop	r0
 1f8:	df 91       	pop	r29
 1fa:	cf 91       	pop	r28
 1fc:	08 95       	ret

000001fe <USART_Transmit_byte_hex>:

void USART_Transmit_byte_hex(unsigned char byte){
 1fe:	cf 93       	push	r28
 200:	df 93       	push	r29
 202:	00 d0       	rcall	.+0      	; 0x204 <USART_Transmit_byte_hex+0x6>
 204:	1f 92       	push	r1
 206:	cd b7       	in	r28, 0x3d	; 61
 208:	de b7       	in	r29, 0x3e	; 62
 20a:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char LSN = (byte & 0x0F);
 20c:	8b 81       	ldd	r24, Y+3	; 0x03
 20e:	8f 70       	andi	r24, 0x0F	; 15
 210:	89 83       	std	Y+1, r24	; 0x01
	unsigned char MSN = ((byte >> 4) & 0x0F);
 212:	8b 81       	ldd	r24, Y+3	; 0x03
 214:	82 95       	swap	r24
 216:	8f 70       	andi	r24, 0x0F	; 15
 218:	8a 83       	std	Y+2, r24	; 0x02
	if(LSN <= 0x09){LSN += 0x30;}
 21a:	89 81       	ldd	r24, Y+1	; 0x01
 21c:	8a 30       	cpi	r24, 0x0A	; 10
 21e:	20 f4       	brcc	.+8      	; 0x228 <USART_Transmit_byte_hex+0x2a>
 220:	89 81       	ldd	r24, Y+1	; 0x01
 222:	80 5d       	subi	r24, 0xD0	; 208
 224:	89 83       	std	Y+1, r24	; 0x01
 226:	06 c0       	rjmp	.+12     	; 0x234 <USART_Transmit_byte_hex+0x36>
	else if(LSN <= 0x0F){LSN += 0x37;}
 228:	89 81       	ldd	r24, Y+1	; 0x01
 22a:	80 31       	cpi	r24, 0x10	; 16
 22c:	18 f4       	brcc	.+6      	; 0x234 <USART_Transmit_byte_hex+0x36>
 22e:	89 81       	ldd	r24, Y+1	; 0x01
 230:	89 5c       	subi	r24, 0xC9	; 201
 232:	89 83       	std	Y+1, r24	; 0x01

	if(MSN <= 0x09){MSN += 0x30;}
 234:	8a 81       	ldd	r24, Y+2	; 0x02
 236:	8a 30       	cpi	r24, 0x0A	; 10
 238:	20 f4       	brcc	.+8      	; 0x242 <USART_Transmit_byte_hex+0x44>
 23a:	8a 81       	ldd	r24, Y+2	; 0x02
 23c:	80 5d       	subi	r24, 0xD0	; 208
 23e:	8a 83       	std	Y+2, r24	; 0x02
 240:	06 c0       	rjmp	.+12     	; 0x24e <USART_Transmit_byte_hex+0x50>
	else if(MSN <= 0xA){MSN += 0x37;}
 242:	8a 81       	ldd	r24, Y+2	; 0x02
 244:	8b 30       	cpi	r24, 0x0B	; 11
 246:	18 f4       	brcc	.+6      	; 0x24e <USART_Transmit_byte_hex+0x50>
 248:	8a 81       	ldd	r24, Y+2	; 0x02
 24a:	89 5c       	subi	r24, 0xC9	; 201
 24c:	8a 83       	std	Y+2, r24	; 0x02

	USART_Transmit('0');
 24e:	80 e3       	ldi	r24, 0x30	; 48
 250:	0e 94 e5 00 	call	0x1ca	; 0x1ca <USART_Transmit>
	USART_Transmit('x');
 254:	88 e7       	ldi	r24, 0x78	; 120
 256:	0e 94 e5 00 	call	0x1ca	; 0x1ca <USART_Transmit>
	USART_Transmit(MSN);
 25a:	8a 81       	ldd	r24, Y+2	; 0x02
 25c:	0e 94 e5 00 	call	0x1ca	; 0x1ca <USART_Transmit>
	USART_Transmit(LSN);
 260:	89 81       	ldd	r24, Y+1	; 0x01
 262:	0e 94 e5 00 	call	0x1ca	; 0x1ca <USART_Transmit>
	USART_Transmit(0x20);
 266:	80 e2       	ldi	r24, 0x20	; 32
 268:	0e 94 e5 00 	call	0x1ca	; 0x1ca <USART_Transmit>
}
 26c:	0f 90       	pop	r0
 26e:	0f 90       	pop	r0
 270:	0f 90       	pop	r0
 272:	df 91       	pop	r29
 274:	cf 91       	pop	r28
 276:	08 95       	ret

00000278 <__vector_18>:
	}
	return UDR0;
}
*/

ISR(USART_RX_vect){
 278:	1f 92       	push	r1
 27a:	0f 92       	push	r0
 27c:	00 90 5f 00 	lds	r0, 0x005F
 280:	0f 92       	push	r0
 282:	11 24       	eor	r1, r1
 284:	8f 93       	push	r24
 286:	9f 93       	push	r25
 288:	ef 93       	push	r30
 28a:	ff 93       	push	r31
 28c:	cf 93       	push	r28
 28e:	df 93       	push	r29
 290:	cd b7       	in	r28, 0x3d	; 61
 292:	de b7       	in	r29, 0x3e	; 62
	// dataReceived flag to alert the main function of new data
	dataReceived = 1;
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	80 93 00 01 	sts	0x0100, r24
	// Write the data from the USART I/O register to a buffer
	rxBuffer = UDR0;
 29a:	86 ec       	ldi	r24, 0xC6	; 198
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	fc 01       	movw	r30, r24
 2a0:	80 81       	ld	r24, Z
 2a2:	80 93 01 01 	sts	0x0101, r24
}
 2a6:	df 91       	pop	r29
 2a8:	cf 91       	pop	r28
 2aa:	ff 91       	pop	r31
 2ac:	ef 91       	pop	r30
 2ae:	9f 91       	pop	r25
 2b0:	8f 91       	pop	r24
 2b2:	0f 90       	pop	r0
 2b4:	00 92 5f 00 	sts	0x005F, r0
 2b8:	0f 90       	pop	r0
 2ba:	1f 90       	pop	r1
 2bc:	18 95       	reti

000002be <_exit>:
 2be:	f8 94       	cli

000002c0 <__stop_program>:
 2c0:	ff cf       	rjmp	.-2      	; 0x2c0 <__stop_program>
