
imu_spi_com.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  00000d84  00000e18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d84  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800132  00800132  00000e4a  2**0
                  ALLOC
  3 .stab         00001cbc  00000000  00000000  00000e4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000faf  00000000  00000000  00002b08  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00003ab7  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000120  00000000  00000000  00003ac8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000006ae  00000000  00000000  00003be8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000000b4  00000000  00000000  00004296  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000389  00000000  00000000  0000434a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 ae 05 	jmp	0xb5c	; 0xb5c <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e8       	ldi	r30, 0x84	; 132
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 33       	cpi	r26, 0x32	; 50
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e3       	ldi	r26, 0x32	; 50
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 33       	cpi	r26, 0x34	; 52
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 5d 01 	call	0x2ba	; 0x2ba <main>
  9e:	0c 94 c0 06 	jmp	0xd80	; 0xd80 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <IMU_init>:
// including myUSART for debugging
#include "myUSART.h"



void IMU_init(){
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	00 d0       	rcall	.+0      	; 0xac <IMU_init+0x6>
  ac:	cd b7       	in	r28, 0x3d	; 61
  ae:	de b7       	in	r29, 0x3e	; 62
	//unsigned char initializingIMU[50] = "Initializing IMU now\0";
	//myPrint(initializingIMU,21);

	SPI_MasterInit();
  b0:	0e 94 d1 05 	call	0xba2	; 0xba2 <SPI_MasterInit>

	// The bit pattern to turn on acceleration sensing in the Z,Y and X directions
	char setCtrlReg5 = ( 1 << ACC_Z ) | ( 1 << ACC_Y ) | ( 1 << ACC_X );
  b4:	8c e1       	ldi	r24, 0x1C	; 28
  b6:	89 83       	std	Y+1, r24	; 0x01

	// Send write address
		SPI_Initiate_Transmission();
  b8:	0e 94 0e 06 	call	0xc1c	; 0xc1c <SPI_Initiate_Transmission>
	SPI_MasterTransmit( WRITE | CTRL_REG5_XL );
  bc:	8f e1       	ldi	r24, 0x1F	; 31
  be:	0e 94 2e 06 	call	0xc5c	; 0xc5c <SPI_MasterTransmit>
	// Send ctrlReg5 bit pattern to turn on X,Y,Z acceleration sensors
	SPI_MasterTransmit( setCtrlReg5 );
  c2:	89 81       	ldd	r24, Y+1	; 0x01
  c4:	0e 94 2e 06 	call	0xc5c	; 0xc5c <SPI_MasterTransmit>
		SPI_End_Transmission();
  c8:	0e 94 1e 06 	call	0xc3c	; 0xc3c <SPI_End_Transmission>

	asm("nop");
  cc:	00 00       	nop
	char setCtrlReg8 = ( 1 << IF_ADD_INC );
  ce:	80 e2       	ldi	r24, 0x20	; 32
  d0:	8a 83       	std	Y+2, r24	; 0x02

	// Send write address
		SPI_Initiate_Transmission();
  d2:	0e 94 0e 06 	call	0xc1c	; 0xc1c <SPI_Initiate_Transmission>
	...
		asm("nop");
		asm("nop");
		asm("nop");
		asm("nop");

	SPI_MasterTransmit( WRITE | CTRL_REG8 );
  f6:	82 e2       	ldi	r24, 0x22	; 34
  f8:	0e 94 2e 06 	call	0xc5c	; 0xc5c <SPI_MasterTransmit>
	...
		asm("nop");
		asm("nop");
		asm("nop");
		asm("nop");
	// Send setCtrlReg8 bit pattern to turn auto increment registers on
	SPI_MasterTransmit( setCtrlReg8 );
 11c:	8a 81       	ldd	r24, Y+2	; 0x02
 11e:	0e 94 2e 06 	call	0xc5c	; 0xc5c <SPI_MasterTransmit>
	...
		asm("nop");
		asm("nop");
		asm("nop");
		asm("nop");
		asm("nop");
		SPI_End_Transmission();
 142:	0e 94 1e 06 	call	0xc3c	; 0xc3c <SPI_End_Transmission>
	...
		asm("nop");
		asm("nop");
		asm("nop");
	//unsigned char doneIMU[50] = "Finished initializing IMU\0";
	//myPrint(doneIMU,30);
}
 166:	0f 90       	pop	r0
 168:	0f 90       	pop	r0
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <IMU_read_acc>:

void IMU_read_acc(int *accBuffer){
 170:	0f 93       	push	r16
 172:	1f 93       	push	r17
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
 178:	cd b7       	in	r28, 0x3d	; 61
 17a:	de b7       	in	r29, 0x3e	; 62
 17c:	2d 97       	sbiw	r28, 0x0d	; 13
 17e:	0f b6       	in	r0, 0x3f	; 63
 180:	f8 94       	cli
 182:	de bf       	out	0x3e, r29	; 62
 184:	0f be       	out	0x3f, r0	; 63
 186:	cd bf       	out	0x3d, r28	; 61
 188:	9d 87       	std	Y+13, r25	; 0x0d
 18a:	8c 87       	std	Y+12, r24	; 0x0c
	// char sendingRequest[27] = "Now sending request to IMU\n";
	// char readingFromSPDR[18] = "Reading from SPDR\n";

	char spiBuffer[6];
	int *acc = accBuffer;
 18c:	8c 85       	ldd	r24, Y+12	; 0x0c
 18e:	9d 85       	ldd	r25, Y+13	; 0x0d
 190:	9d 83       	std	Y+5, r25	; 0x05
 192:	8c 83       	std	Y+4, r24	; 0x04

	// Select the IMU as an SPI Slave
	SPI_Initiate_Transmission();
 194:	0e 94 0e 06 	call	0xc1c	; 0xc1c <SPI_Initiate_Transmission>
	// Send "read from acceleration output register" signal
	SPI_MasterTransmit( READ | OUT_X_XL );
 198:	88 ea       	ldi	r24, 0xA8	; 168
 19a:	0e 94 2e 06 	call	0xc5c	; 0xc5c <SPI_MasterTransmit>
	for (unsigned char i = 0; i < 2; i++){
 19e:	19 82       	std	Y+1, r1	; 0x01
 1a0:	10 c0       	rjmp	.+32     	; 0x1c2 <IMU_read_acc+0x52>
			spiBuffer[i] = SPI_MasterTransmit(0x00);
 1a2:	89 81       	ldd	r24, Y+1	; 0x01
 1a4:	08 2f       	mov	r16, r24
 1a6:	10 e0       	ldi	r17, 0x00	; 0
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	0e 94 2e 06 	call	0xc5c	; 0xc5c <SPI_MasterTransmit>
 1ae:	28 2f       	mov	r18, r24
 1b0:	ce 01       	movw	r24, r28
 1b2:	06 96       	adiw	r24, 0x06	; 6
 1b4:	80 0f       	add	r24, r16
 1b6:	91 1f       	adc	r25, r17
 1b8:	fc 01       	movw	r30, r24
 1ba:	20 83       	st	Z, r18

	// Select the IMU as an SPI Slave
	SPI_Initiate_Transmission();
	// Send "read from acceleration output register" signal
	SPI_MasterTransmit( READ | OUT_X_XL );
	for (unsigned char i = 0; i < 2; i++){
 1bc:	89 81       	ldd	r24, Y+1	; 0x01
 1be:	8f 5f       	subi	r24, 0xFF	; 255
 1c0:	89 83       	std	Y+1, r24	; 0x01
 1c2:	89 81       	ldd	r24, Y+1	; 0x01
 1c4:	82 30       	cpi	r24, 0x02	; 2
 1c6:	68 f3       	brcs	.-38     	; 0x1a2 <IMU_read_acc+0x32>
			spiBuffer[i] = SPI_MasterTransmit(0x00);
	}
	SPI_End_Transmission();
 1c8:	0e 94 1e 06 	call	0xc3c	; 0xc3c <SPI_End_Transmission>
	asm("nop");
 1cc:	00 00       	nop

	SPI_Initiate_Transmission();
 1ce:	0e 94 0e 06 	call	0xc1c	; 0xc1c <SPI_Initiate_Transmission>
	SPI_MasterTransmit( READ | OUT_Y_XL );
 1d2:	8a ea       	ldi	r24, 0xAA	; 170
 1d4:	0e 94 2e 06 	call	0xc5c	; 0xc5c <SPI_MasterTransmit>
	for (unsigned char i = 2; i < 4; i++){
 1d8:	82 e0       	ldi	r24, 0x02	; 2
 1da:	8a 83       	std	Y+2, r24	; 0x02
 1dc:	10 c0       	rjmp	.+32     	; 0x1fe <IMU_read_acc+0x8e>
			spiBuffer[i] = SPI_MasterTransmit(0x00);
 1de:	8a 81       	ldd	r24, Y+2	; 0x02
 1e0:	08 2f       	mov	r16, r24
 1e2:	10 e0       	ldi	r17, 0x00	; 0
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	0e 94 2e 06 	call	0xc5c	; 0xc5c <SPI_MasterTransmit>
 1ea:	28 2f       	mov	r18, r24
 1ec:	ce 01       	movw	r24, r28
 1ee:	06 96       	adiw	r24, 0x06	; 6
 1f0:	80 0f       	add	r24, r16
 1f2:	91 1f       	adc	r25, r17
 1f4:	fc 01       	movw	r30, r24
 1f6:	20 83       	st	Z, r18
	SPI_End_Transmission();
	asm("nop");

	SPI_Initiate_Transmission();
	SPI_MasterTransmit( READ | OUT_Y_XL );
	for (unsigned char i = 2; i < 4; i++){
 1f8:	8a 81       	ldd	r24, Y+2	; 0x02
 1fa:	8f 5f       	subi	r24, 0xFF	; 255
 1fc:	8a 83       	std	Y+2, r24	; 0x02
 1fe:	8a 81       	ldd	r24, Y+2	; 0x02
 200:	84 30       	cpi	r24, 0x04	; 4
 202:	68 f3       	brcs	.-38     	; 0x1de <IMU_read_acc+0x6e>
			spiBuffer[i] = SPI_MasterTransmit(0x00);
	}
	SPI_End_Transmission();
 204:	0e 94 1e 06 	call	0xc3c	; 0xc3c <SPI_End_Transmission>
	asm("nop");
 208:	00 00       	nop

	SPI_Initiate_Transmission();
 20a:	0e 94 0e 06 	call	0xc1c	; 0xc1c <SPI_Initiate_Transmission>
	SPI_MasterTransmit( READ | OUT_Z_XL );
 20e:	8c ea       	ldi	r24, 0xAC	; 172
 210:	0e 94 2e 06 	call	0xc5c	; 0xc5c <SPI_MasterTransmit>
	for (unsigned char i = 4; i < 6; i++){
 214:	84 e0       	ldi	r24, 0x04	; 4
 216:	8b 83       	std	Y+3, r24	; 0x03
 218:	10 c0       	rjmp	.+32     	; 0x23a <IMU_read_acc+0xca>
		spiBuffer[i] = SPI_MasterTransmit(0x00);
 21a:	8b 81       	ldd	r24, Y+3	; 0x03
 21c:	08 2f       	mov	r16, r24
 21e:	10 e0       	ldi	r17, 0x00	; 0
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	0e 94 2e 06 	call	0xc5c	; 0xc5c <SPI_MasterTransmit>
 226:	28 2f       	mov	r18, r24
 228:	ce 01       	movw	r24, r28
 22a:	06 96       	adiw	r24, 0x06	; 6
 22c:	80 0f       	add	r24, r16
 22e:	91 1f       	adc	r25, r17
 230:	fc 01       	movw	r30, r24
 232:	20 83       	st	Z, r18
	SPI_End_Transmission();
	asm("nop");

	SPI_Initiate_Transmission();
	SPI_MasterTransmit( READ | OUT_Z_XL );
	for (unsigned char i = 4; i < 6; i++){
 234:	8b 81       	ldd	r24, Y+3	; 0x03
 236:	8f 5f       	subi	r24, 0xFF	; 255
 238:	8b 83       	std	Y+3, r24	; 0x03
 23a:	8b 81       	ldd	r24, Y+3	; 0x03
 23c:	86 30       	cpi	r24, 0x06	; 6
 23e:	68 f3       	brcs	.-38     	; 0x21a <IMU_read_acc+0xaa>
		spiBuffer[i] = SPI_MasterTransmit(0x00);
	}
	SPI_End_Transmission();
 240:	0e 94 1e 06 	call	0xc3c	; 0xc3c <SPI_End_Transmission>
	asm("nop");
 244:	00 00       	nop

	acc[0] = (spiBuffer[1] << 8 | spiBuffer[0]);
 246:	8f 81       	ldd	r24, Y+7	; 0x07
 248:	88 2f       	mov	r24, r24
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	38 2f       	mov	r19, r24
 24e:	22 27       	eor	r18, r18
 250:	8e 81       	ldd	r24, Y+6	; 0x06
 252:	88 2f       	mov	r24, r24
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	28 2b       	or	r18, r24
 258:	39 2b       	or	r19, r25
 25a:	8c 81       	ldd	r24, Y+4	; 0x04
 25c:	9d 81       	ldd	r25, Y+5	; 0x05
 25e:	fc 01       	movw	r30, r24
 260:	31 83       	std	Z+1, r19	; 0x01
 262:	20 83       	st	Z, r18
	acc[1] = (spiBuffer[3] << 8 | spiBuffer[2]);
 264:	8c 81       	ldd	r24, Y+4	; 0x04
 266:	9d 81       	ldd	r25, Y+5	; 0x05
 268:	02 96       	adiw	r24, 0x02	; 2
 26a:	29 85       	ldd	r18, Y+9	; 0x09
 26c:	22 2f       	mov	r18, r18
 26e:	30 e0       	ldi	r19, 0x00	; 0
 270:	52 2f       	mov	r21, r18
 272:	44 27       	eor	r20, r20
 274:	28 85       	ldd	r18, Y+8	; 0x08
 276:	22 2f       	mov	r18, r18
 278:	30 e0       	ldi	r19, 0x00	; 0
 27a:	24 2b       	or	r18, r20
 27c:	35 2b       	or	r19, r21
 27e:	fc 01       	movw	r30, r24
 280:	31 83       	std	Z+1, r19	; 0x01
 282:	20 83       	st	Z, r18
	acc[2] = (spiBuffer[5] << 8 | spiBuffer[4]);
 284:	8c 81       	ldd	r24, Y+4	; 0x04
 286:	9d 81       	ldd	r25, Y+5	; 0x05
 288:	04 96       	adiw	r24, 0x04	; 4
 28a:	2b 85       	ldd	r18, Y+11	; 0x0b
 28c:	22 2f       	mov	r18, r18
 28e:	30 e0       	ldi	r19, 0x00	; 0
 290:	52 2f       	mov	r21, r18
 292:	44 27       	eor	r20, r20
 294:	2a 85       	ldd	r18, Y+10	; 0x0a
 296:	22 2f       	mov	r18, r18
 298:	30 e0       	ldi	r19, 0x00	; 0
 29a:	24 2b       	or	r18, r20
 29c:	35 2b       	or	r19, r21
 29e:	fc 01       	movw	r30, r24
 2a0:	31 83       	std	Z+1, r19	; 0x01
 2a2:	20 83       	st	Z, r18
}
 2a4:	2d 96       	adiw	r28, 0x0d	; 13
 2a6:	0f b6       	in	r0, 0x3f	; 63
 2a8:	f8 94       	cli
 2aa:	de bf       	out	0x3e, r29	; 62
 2ac:	0f be       	out	0x3f, r0	; 63
 2ae:	cd bf       	out	0x3d, r28	; 61
 2b0:	df 91       	pop	r29
 2b2:	cf 91       	pop	r28
 2b4:	1f 91       	pop	r17
 2b6:	0f 91       	pop	r16
 2b8:	08 95       	ret

000002ba <main>:
#include "myUSART.h"

#define BAUD 9600


int main(){
 2ba:	cf 93       	push	r28
 2bc:	df 93       	push	r29
 2be:	00 d0       	rcall	.+0      	; 0x2c0 <main+0x6>
 2c0:	00 d0       	rcall	.+0      	; 0x2c2 <main+0x8>
 2c2:	00 d0       	rcall	.+0      	; 0x2c4 <main+0xa>
 2c4:	cd b7       	in	r28, 0x3d	; 61
 2c6:	de b7       	in	r29, 0x3e	; 62
	asm("sei");
 2c8:	78 94       	sei
	USART_init(BAUD);
 2ca:	80 e8       	ldi	r24, 0x80	; 128
 2cc:	95 e2       	ldi	r25, 0x25	; 37
 2ce:	0e 94 a1 01 	call	0x342	; 0x342 <USART_init>
	IMU_init();
 2d2:	0e 94 53 00 	call	0xa6	; 0xa6 <IMU_init>
	int acc_data[3];

	while(1){
		if(dataReceived){
 2d6:	80 91 32 01 	lds	r24, 0x0132
 2da:	88 23       	and	r24, r24
 2dc:	b9 f0       	breq	.+46     	; 0x30c <main+0x52>
			if (rxBuffer == '0' ){dataReceived = 0;};
 2de:	80 91 33 01 	lds	r24, 0x0133
 2e2:	80 33       	cpi	r24, 0x30	; 48
 2e4:	11 f4       	brne	.+4      	; 0x2ea <main+0x30>
 2e6:	10 92 32 01 	sts	0x0132, r1
			IMU_read_acc(acc_data);
 2ea:	ce 01       	movw	r24, r28
 2ec:	01 96       	adiw	r24, 0x01	; 1
 2ee:	0e 94 b8 00 	call	0x170	; 0x170 <IMU_read_acc>
			USART_Transmit_16_hex(acc_data[0]);
 2f2:	89 81       	ldd	r24, Y+1	; 0x01
 2f4:	9a 81       	ldd	r25, Y+2	; 0x02
 2f6:	0e 94 5e 02 	call	0x4bc	; 0x4bc <USART_Transmit_16_hex>
			USART_Transmit_16_hex(acc_data[1]);
 2fa:	8b 81       	ldd	r24, Y+3	; 0x03
 2fc:	9c 81       	ldd	r25, Y+4	; 0x04
 2fe:	0e 94 5e 02 	call	0x4bc	; 0x4bc <USART_Transmit_16_hex>
			USART_Transmit_16_hex(acc_data[2]);
 302:	8d 81       	ldd	r24, Y+5	; 0x05
 304:	9e 81       	ldd	r25, Y+6	; 0x06
 306:	0e 94 5e 02 	call	0x4bc	; 0x4bc <USART_Transmit_16_hex>
			//dataReceived = 0;
		}


	}
 30a:	e5 cf       	rjmp	.-54     	; 0x2d6 <main+0x1c>
 30c:	e4 cf       	rjmp	.-56     	; 0x2d6 <main+0x1c>

0000030e <USART_Transmit>:
#define convert2ASCII_hex(byte){	\
	if(byte <= 0x09){byte += 0x30;}			\
	else if(byte <= 0x0F){byte += 0x37;};	\
}

void USART_Transmit(unsigned char data){
 30e:	cf 93       	push	r28
 310:	df 93       	push	r29
 312:	1f 92       	push	r1
 314:	cd b7       	in	r28, 0x3d	; 61
 316:	de b7       	in	r29, 0x3e	; 62
 318:	89 83       	std	Y+1, r24	; 0x01
	/* While the transmit buffer is not empty (UDRE0 flag in UCSR0A)	*/
	while( !(UCSR0A & (1 << UDRE0)) ){};
 31a:	00 00       	nop
 31c:	80 ec       	ldi	r24, 0xC0	; 192
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	fc 01       	movw	r30, r24
 322:	80 81       	ld	r24, Z
 324:	88 2f       	mov	r24, r24
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	80 72       	andi	r24, 0x20	; 32
 32a:	99 27       	eor	r25, r25
 32c:	00 97       	sbiw	r24, 0x00	; 0
 32e:	b1 f3       	breq	.-20     	; 0x31c <USART_Transmit+0xe>
	/* Write the data into the USART Data I/O register	*/
	UDR0 = data;
 330:	86 ec       	ldi	r24, 0xC6	; 198
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	29 81       	ldd	r18, Y+1	; 0x01
 336:	fc 01       	movw	r30, r24
 338:	20 83       	st	Z, r18
}
 33a:	0f 90       	pop	r0
 33c:	df 91       	pop	r29
 33e:	cf 91       	pop	r28
 340:	08 95       	ret

00000342 <USART_init>:


void USART_init(unsigned int br){
 342:	cf 93       	push	r28
 344:	df 93       	push	r29
 346:	cd b7       	in	r28, 0x3d	; 61
 348:	de b7       	in	r29, 0x3e	; 62
 34a:	28 97       	sbiw	r28, 0x08	; 8
 34c:	0f b6       	in	r0, 0x3f	; 63
 34e:	f8 94       	cli
 350:	de bf       	out	0x3e, r29	; 62
 352:	0f be       	out	0x3f, r0	; 63
 354:	cd bf       	out	0x3d, r28	; 61
 356:	9c 83       	std	Y+4, r25	; 0x04
 358:	8b 83       	std	Y+3, r24	; 0x03
	unsigned int ubrr = 16000000/16/br - 1;
 35a:	8b 81       	ldd	r24, Y+3	; 0x03
 35c:	9c 81       	ldd	r25, Y+4	; 0x04
 35e:	9c 01       	movw	r18, r24
 360:	40 e0       	ldi	r20, 0x00	; 0
 362:	50 e0       	ldi	r21, 0x00	; 0
 364:	80 e4       	ldi	r24, 0x40	; 64
 366:	92 e4       	ldi	r25, 0x42	; 66
 368:	af e0       	ldi	r26, 0x0F	; 15
 36a:	b0 e0       	ldi	r27, 0x00	; 0
 36c:	bc 01       	movw	r22, r24
 36e:	cd 01       	movw	r24, r26
 370:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__divmodsi4>
 374:	da 01       	movw	r26, r20
 376:	c9 01       	movw	r24, r18
 378:	01 97       	sbiw	r24, 0x01	; 1
 37a:	9a 83       	std	Y+2, r25	; 0x02
 37c:	89 83       	std	Y+1, r24	; 0x01
	// Settin Baud Rate to br
	UBRR0H = (unsigned char) (ubrr >> 8);
 37e:	85 ec       	ldi	r24, 0xC5	; 197
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	29 81       	ldd	r18, Y+1	; 0x01
 384:	3a 81       	ldd	r19, Y+2	; 0x02
 386:	23 2f       	mov	r18, r19
 388:	33 27       	eor	r19, r19
 38a:	fc 01       	movw	r30, r24
 38c:	20 83       	st	Z, r18
	UBRR0L = (unsigned char) ubrr;
 38e:	84 ec       	ldi	r24, 0xC4	; 196
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	29 81       	ldd	r18, Y+1	; 0x01
 394:	fc 01       	movw	r30, r24
 396:	20 83       	st	Z, r18

	// Enabling Receive (RXEN0) and transmit (TXEN0) and
	// the RX Complete Interrupt in the USART
	//Control and Status Register 0B
	UCSR0B = (1 << RXEN0) | ( 1 << TXEN0 ) | ( 1 << RXCIE0);
 398:	81 ec       	ldi	r24, 0xC1	; 193
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	28 e9       	ldi	r18, 0x98	; 152
 39e:	fc 01       	movw	r30, r24
 3a0:	20 83       	st	Z, r18

	// Setting frame format:
			// 2 stop bits		8 bit
	UCSR0C = (1 << USBS0) | (3 << UCSZ00);
 3a2:	82 ec       	ldi	r24, 0xC2	; 194
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	2e e0       	ldi	r18, 0x0E	; 14
 3a8:	fc 01       	movw	r30, r24
 3aa:	20 83       	st	Z, r18
}
 3ac:	28 96       	adiw	r28, 0x08	; 8
 3ae:	0f b6       	in	r0, 0x3f	; 63
 3b0:	f8 94       	cli
 3b2:	de bf       	out	0x3e, r29	; 62
 3b4:	0f be       	out	0x3f, r0	; 63
 3b6:	cd bf       	out	0x3d, r28	; 61
 3b8:	df 91       	pop	r29
 3ba:	cf 91       	pop	r28
 3bc:	08 95       	ret

000003be <USART_Transmit_32_hex>:


void USART_Transmit_32_hex(long data32bit){
 3be:	cf 93       	push	r28
 3c0:	df 93       	push	r29
 3c2:	cd b7       	in	r28, 0x3d	; 61
 3c4:	de b7       	in	r29, 0x3e	; 62
 3c6:	60 97       	sbiw	r28, 0x10	; 16
 3c8:	0f b6       	in	r0, 0x3f	; 63
 3ca:	f8 94       	cli
 3cc:	de bf       	out	0x3e, r29	; 62
 3ce:	0f be       	out	0x3f, r0	; 63
 3d0:	cd bf       	out	0x3d, r28	; 61
 3d2:	6d 87       	std	Y+13, r22	; 0x0d
 3d4:	7e 87       	std	Y+14, r23	; 0x0e
 3d6:	8f 87       	std	Y+15, r24	; 0x0f
 3d8:	98 8b       	std	Y+16, r25	; 0x10
	unsigned char N[8];
	unsigned char *ptr = &N[0];
 3da:	ce 01       	movw	r24, r28
 3dc:	05 96       	adiw	r24, 0x05	; 5
 3de:	9a 83       	std	Y+2, r25	; 0x02
 3e0:	89 83       	std	Y+1, r24	; 0x01
	for (uint8_t i = 0; i < 8; i++){
 3e2:	1b 82       	std	Y+3, r1	; 0x03
 3e4:	21 c0       	rjmp	.+66     	; 0x428 <USART_Transmit_32_hex+0x6a>
		N[i] = ((data32bit >> 4*i) & 0xF);
 3e6:	8b 81       	ldd	r24, Y+3	; 0x03
 3e8:	28 2f       	mov	r18, r24
 3ea:	30 e0       	ldi	r19, 0x00	; 0
 3ec:	8b 81       	ldd	r24, Y+3	; 0x03
 3ee:	88 2f       	mov	r24, r24
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	ac 01       	movw	r20, r24
 3f4:	44 0f       	add	r20, r20
 3f6:	55 1f       	adc	r21, r21
 3f8:	44 0f       	add	r20, r20
 3fa:	55 1f       	adc	r21, r21
 3fc:	8d 85       	ldd	r24, Y+13	; 0x0d
 3fe:	9e 85       	ldd	r25, Y+14	; 0x0e
 400:	af 85       	ldd	r26, Y+15	; 0x0f
 402:	b8 89       	ldd	r27, Y+16	; 0x10
 404:	04 c0       	rjmp	.+8      	; 0x40e <USART_Transmit_32_hex+0x50>
 406:	b5 95       	asr	r27
 408:	a7 95       	ror	r26
 40a:	97 95       	ror	r25
 40c:	87 95       	ror	r24
 40e:	4a 95       	dec	r20
 410:	d2 f7       	brpl	.-12     	; 0x406 <USART_Transmit_32_hex+0x48>
 412:	48 2f       	mov	r20, r24
 414:	4f 70       	andi	r20, 0x0F	; 15
 416:	ce 01       	movw	r24, r28
 418:	05 96       	adiw	r24, 0x05	; 5
 41a:	82 0f       	add	r24, r18
 41c:	93 1f       	adc	r25, r19
 41e:	fc 01       	movw	r30, r24
 420:	40 83       	st	Z, r20


void USART_Transmit_32_hex(long data32bit){
	unsigned char N[8];
	unsigned char *ptr = &N[0];
	for (uint8_t i = 0; i < 8; i++){
 422:	8b 81       	ldd	r24, Y+3	; 0x03
 424:	8f 5f       	subi	r24, 0xFF	; 255
 426:	8b 83       	std	Y+3, r24	; 0x03
 428:	8b 81       	ldd	r24, Y+3	; 0x03
 42a:	88 30       	cpi	r24, 0x08	; 8
 42c:	e0 f2       	brcs	.-72     	; 0x3e6 <USART_Transmit_32_hex+0x28>
		N[i] = ((data32bit >> 4*i) & 0xF);
	}
	for (unsigned char i = 0; i < 8; i++){
 42e:	1c 82       	std	Y+4, r1	; 0x04
 430:	36 c0       	rjmp	.+108    	; 0x49e <USART_Transmit_32_hex+0xe0>
		convert2ASCII_hex(*(ptr+7))	// The MSN is last in the memory so we loop backwards
 432:	89 81       	ldd	r24, Y+1	; 0x01
 434:	9a 81       	ldd	r25, Y+2	; 0x02
 436:	07 96       	adiw	r24, 0x07	; 7
 438:	fc 01       	movw	r30, r24
 43a:	80 81       	ld	r24, Z
 43c:	8a 30       	cpi	r24, 0x0A	; 10
 43e:	68 f4       	brcc	.+26     	; 0x45a <USART_Transmit_32_hex+0x9c>
 440:	89 81       	ldd	r24, Y+1	; 0x01
 442:	9a 81       	ldd	r25, Y+2	; 0x02
 444:	07 96       	adiw	r24, 0x07	; 7
 446:	29 81       	ldd	r18, Y+1	; 0x01
 448:	3a 81       	ldd	r19, Y+2	; 0x02
 44a:	29 5f       	subi	r18, 0xF9	; 249
 44c:	3f 4f       	sbci	r19, 0xFF	; 255
 44e:	f9 01       	movw	r30, r18
 450:	20 81       	ld	r18, Z
 452:	20 5d       	subi	r18, 0xD0	; 208
 454:	fc 01       	movw	r30, r24
 456:	20 83       	st	Z, r18
 458:	13 c0       	rjmp	.+38     	; 0x480 <USART_Transmit_32_hex+0xc2>
 45a:	89 81       	ldd	r24, Y+1	; 0x01
 45c:	9a 81       	ldd	r25, Y+2	; 0x02
 45e:	07 96       	adiw	r24, 0x07	; 7
 460:	fc 01       	movw	r30, r24
 462:	80 81       	ld	r24, Z
 464:	80 31       	cpi	r24, 0x10	; 16
 466:	60 f4       	brcc	.+24     	; 0x480 <USART_Transmit_32_hex+0xc2>
 468:	89 81       	ldd	r24, Y+1	; 0x01
 46a:	9a 81       	ldd	r25, Y+2	; 0x02
 46c:	07 96       	adiw	r24, 0x07	; 7
 46e:	29 81       	ldd	r18, Y+1	; 0x01
 470:	3a 81       	ldd	r19, Y+2	; 0x02
 472:	29 5f       	subi	r18, 0xF9	; 249
 474:	3f 4f       	sbci	r19, 0xFF	; 255
 476:	f9 01       	movw	r30, r18
 478:	20 81       	ld	r18, Z
 47a:	29 5c       	subi	r18, 0xC9	; 201
 47c:	fc 01       	movw	r30, r24
 47e:	20 83       	st	Z, r18
		USART_Transmit(*(ptr+7));
 480:	89 81       	ldd	r24, Y+1	; 0x01
 482:	9a 81       	ldd	r25, Y+2	; 0x02
 484:	07 96       	adiw	r24, 0x07	; 7
 486:	fc 01       	movw	r30, r24
 488:	80 81       	ld	r24, Z
 48a:	0e 94 87 01 	call	0x30e	; 0x30e <USART_Transmit>
		ptr--;
 48e:	89 81       	ldd	r24, Y+1	; 0x01
 490:	9a 81       	ldd	r25, Y+2	; 0x02
 492:	01 97       	sbiw	r24, 0x01	; 1
 494:	9a 83       	std	Y+2, r25	; 0x02
 496:	89 83       	std	Y+1, r24	; 0x01
	unsigned char N[8];
	unsigned char *ptr = &N[0];
	for (uint8_t i = 0; i < 8; i++){
		N[i] = ((data32bit >> 4*i) & 0xF);
	}
	for (unsigned char i = 0; i < 8; i++){
 498:	8c 81       	ldd	r24, Y+4	; 0x04
 49a:	8f 5f       	subi	r24, 0xFF	; 255
 49c:	8c 83       	std	Y+4, r24	; 0x04
 49e:	8c 81       	ldd	r24, Y+4	; 0x04
 4a0:	88 30       	cpi	r24, 0x08	; 8
 4a2:	38 f2       	brcs	.-114    	; 0x432 <USART_Transmit_32_hex+0x74>
		convert2ASCII_hex(*(ptr+7))	// The MSN is last in the memory so we loop backwards
		USART_Transmit(*(ptr+7));
		ptr--;
	}
	USART_Transmit(0x0A);
 4a4:	8a e0       	ldi	r24, 0x0A	; 10
 4a6:	0e 94 87 01 	call	0x30e	; 0x30e <USART_Transmit>
}
 4aa:	60 96       	adiw	r28, 0x10	; 16
 4ac:	0f b6       	in	r0, 0x3f	; 63
 4ae:	f8 94       	cli
 4b0:	de bf       	out	0x3e, r29	; 62
 4b2:	0f be       	out	0x3f, r0	; 63
 4b4:	cd bf       	out	0x3d, r28	; 61
 4b6:	df 91       	pop	r29
 4b8:	cf 91       	pop	r28
 4ba:	08 95       	ret

000004bc <USART_Transmit_16_hex>:


void USART_Transmit_16_hex(int data16bit){
 4bc:	cf 93       	push	r28
 4be:	df 93       	push	r29
 4c0:	00 d0       	rcall	.+0      	; 0x4c2 <USART_Transmit_16_hex+0x6>
 4c2:	00 d0       	rcall	.+0      	; 0x4c4 <USART_Transmit_16_hex+0x8>
 4c4:	00 d0       	rcall	.+0      	; 0x4c6 <USART_Transmit_16_hex+0xa>
 4c6:	cd b7       	in	r28, 0x3d	; 61
 4c8:	de b7       	in	r29, 0x3e	; 62
 4ca:	9e 83       	std	Y+6, r25	; 0x06
 4cc:	8d 83       	std	Y+5, r24	; 0x05
	unsigned char N_1 = (data16bit & 0x000F);
 4ce:	8d 81       	ldd	r24, Y+5	; 0x05
 4d0:	8f 70       	andi	r24, 0x0F	; 15
 4d2:	89 83       	std	Y+1, r24	; 0x01
	unsigned char N_2 = ((data16bit >> 4 ) & 0x000F);
 4d4:	8d 81       	ldd	r24, Y+5	; 0x05
 4d6:	9e 81       	ldd	r25, Y+6	; 0x06
 4d8:	95 95       	asr	r25
 4da:	87 95       	ror	r24
 4dc:	95 95       	asr	r25
 4de:	87 95       	ror	r24
 4e0:	95 95       	asr	r25
 4e2:	87 95       	ror	r24
 4e4:	95 95       	asr	r25
 4e6:	87 95       	ror	r24
 4e8:	8f 70       	andi	r24, 0x0F	; 15
 4ea:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char N_3 = ((data16bit >> 8 ) & 0x000F);
 4ec:	8d 81       	ldd	r24, Y+5	; 0x05
 4ee:	9e 81       	ldd	r25, Y+6	; 0x06
 4f0:	89 2f       	mov	r24, r25
 4f2:	99 0f       	add	r25, r25
 4f4:	99 0b       	sbc	r25, r25
 4f6:	8f 70       	andi	r24, 0x0F	; 15
 4f8:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char N_4 = ((data16bit >> 12 ) & 0x000F);
 4fa:	8d 81       	ldd	r24, Y+5	; 0x05
 4fc:	9e 81       	ldd	r25, Y+6	; 0x06
 4fe:	89 2f       	mov	r24, r25
 500:	99 27       	eor	r25, r25
 502:	82 95       	swap	r24
 504:	8f 70       	andi	r24, 0x0F	; 15
 506:	8c 83       	std	Y+4, r24	; 0x04

	convert2ASCII_hex(N_1);
 508:	89 81       	ldd	r24, Y+1	; 0x01
 50a:	8a 30       	cpi	r24, 0x0A	; 10
 50c:	20 f4       	brcc	.+8      	; 0x516 <USART_Transmit_16_hex+0x5a>
 50e:	89 81       	ldd	r24, Y+1	; 0x01
 510:	80 5d       	subi	r24, 0xD0	; 208
 512:	89 83       	std	Y+1, r24	; 0x01
 514:	06 c0       	rjmp	.+12     	; 0x522 <USART_Transmit_16_hex+0x66>
 516:	89 81       	ldd	r24, Y+1	; 0x01
 518:	80 31       	cpi	r24, 0x10	; 16
 51a:	18 f4       	brcc	.+6      	; 0x522 <USART_Transmit_16_hex+0x66>
 51c:	89 81       	ldd	r24, Y+1	; 0x01
 51e:	89 5c       	subi	r24, 0xC9	; 201
 520:	89 83       	std	Y+1, r24	; 0x01
	convert2ASCII_hex(N_2);
 522:	8a 81       	ldd	r24, Y+2	; 0x02
 524:	8a 30       	cpi	r24, 0x0A	; 10
 526:	20 f4       	brcc	.+8      	; 0x530 <USART_Transmit_16_hex+0x74>
 528:	8a 81       	ldd	r24, Y+2	; 0x02
 52a:	80 5d       	subi	r24, 0xD0	; 208
 52c:	8a 83       	std	Y+2, r24	; 0x02
 52e:	06 c0       	rjmp	.+12     	; 0x53c <USART_Transmit_16_hex+0x80>
 530:	8a 81       	ldd	r24, Y+2	; 0x02
 532:	80 31       	cpi	r24, 0x10	; 16
 534:	18 f4       	brcc	.+6      	; 0x53c <USART_Transmit_16_hex+0x80>
 536:	8a 81       	ldd	r24, Y+2	; 0x02
 538:	89 5c       	subi	r24, 0xC9	; 201
 53a:	8a 83       	std	Y+2, r24	; 0x02
	convert2ASCII_hex(N_3);
 53c:	8b 81       	ldd	r24, Y+3	; 0x03
 53e:	8a 30       	cpi	r24, 0x0A	; 10
 540:	20 f4       	brcc	.+8      	; 0x54a <USART_Transmit_16_hex+0x8e>
 542:	8b 81       	ldd	r24, Y+3	; 0x03
 544:	80 5d       	subi	r24, 0xD0	; 208
 546:	8b 83       	std	Y+3, r24	; 0x03
 548:	06 c0       	rjmp	.+12     	; 0x556 <USART_Transmit_16_hex+0x9a>
 54a:	8b 81       	ldd	r24, Y+3	; 0x03
 54c:	80 31       	cpi	r24, 0x10	; 16
 54e:	18 f4       	brcc	.+6      	; 0x556 <USART_Transmit_16_hex+0x9a>
 550:	8b 81       	ldd	r24, Y+3	; 0x03
 552:	89 5c       	subi	r24, 0xC9	; 201
 554:	8b 83       	std	Y+3, r24	; 0x03
	convert2ASCII_hex(N_4);
 556:	8c 81       	ldd	r24, Y+4	; 0x04
 558:	8a 30       	cpi	r24, 0x0A	; 10
 55a:	20 f4       	brcc	.+8      	; 0x564 <USART_Transmit_16_hex+0xa8>
 55c:	8c 81       	ldd	r24, Y+4	; 0x04
 55e:	80 5d       	subi	r24, 0xD0	; 208
 560:	8c 83       	std	Y+4, r24	; 0x04
 562:	06 c0       	rjmp	.+12     	; 0x570 <USART_Transmit_16_hex+0xb4>
 564:	8c 81       	ldd	r24, Y+4	; 0x04
 566:	80 31       	cpi	r24, 0x10	; 16
 568:	18 f4       	brcc	.+6      	; 0x570 <USART_Transmit_16_hex+0xb4>
 56a:	8c 81       	ldd	r24, Y+4	; 0x04
 56c:	89 5c       	subi	r24, 0xC9	; 201
 56e:	8c 83       	std	Y+4, r24	; 0x04

	USART_Transmit('0');
 570:	80 e3       	ldi	r24, 0x30	; 48
 572:	0e 94 87 01 	call	0x30e	; 0x30e <USART_Transmit>
	USART_Transmit('x');
 576:	88 e7       	ldi	r24, 0x78	; 120
 578:	0e 94 87 01 	call	0x30e	; 0x30e <USART_Transmit>

	USART_Transmit(N_4);
 57c:	8c 81       	ldd	r24, Y+4	; 0x04
 57e:	0e 94 87 01 	call	0x30e	; 0x30e <USART_Transmit>
	USART_Transmit(N_3);
 582:	8b 81       	ldd	r24, Y+3	; 0x03
 584:	0e 94 87 01 	call	0x30e	; 0x30e <USART_Transmit>
	USART_Transmit(N_2);
 588:	8a 81       	ldd	r24, Y+2	; 0x02
 58a:	0e 94 87 01 	call	0x30e	; 0x30e <USART_Transmit>
	USART_Transmit(N_1);
 58e:	89 81       	ldd	r24, Y+1	; 0x01
 590:	0e 94 87 01 	call	0x30e	; 0x30e <USART_Transmit>
	USART_Transmit(0x0A);
 594:	8a e0       	ldi	r24, 0x0A	; 10
 596:	0e 94 87 01 	call	0x30e	; 0x30e <USART_Transmit>
}
 59a:	26 96       	adiw	r28, 0x06	; 6
 59c:	0f b6       	in	r0, 0x3f	; 63
 59e:	f8 94       	cli
 5a0:	de bf       	out	0x3e, r29	; 62
 5a2:	0f be       	out	0x3f, r0	; 63
 5a4:	cd bf       	out	0x3d, r28	; 61
 5a6:	df 91       	pop	r29
 5a8:	cf 91       	pop	r28
 5aa:	08 95       	ret

000005ac <USART_Transmit_8_hex>:



void USART_Transmit_8_hex(unsigned char byte){
 5ac:	cf 93       	push	r28
 5ae:	df 93       	push	r29
 5b0:	00 d0       	rcall	.+0      	; 0x5b2 <USART_Transmit_8_hex+0x6>
 5b2:	1f 92       	push	r1
 5b4:	cd b7       	in	r28, 0x3d	; 61
 5b6:	de b7       	in	r29, 0x3e	; 62
 5b8:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char LSN = (byte & 0x0F);
 5ba:	8b 81       	ldd	r24, Y+3	; 0x03
 5bc:	8f 70       	andi	r24, 0x0F	; 15
 5be:	89 83       	std	Y+1, r24	; 0x01
	unsigned char MSN = ((byte >> 4) & 0x0F);
 5c0:	8b 81       	ldd	r24, Y+3	; 0x03
 5c2:	82 95       	swap	r24
 5c4:	8f 70       	andi	r24, 0x0F	; 15
 5c6:	8a 83       	std	Y+2, r24	; 0x02

	convert2ASCII_hex(LSN);
 5c8:	89 81       	ldd	r24, Y+1	; 0x01
 5ca:	8a 30       	cpi	r24, 0x0A	; 10
 5cc:	20 f4       	brcc	.+8      	; 0x5d6 <USART_Transmit_8_hex+0x2a>
 5ce:	89 81       	ldd	r24, Y+1	; 0x01
 5d0:	80 5d       	subi	r24, 0xD0	; 208
 5d2:	89 83       	std	Y+1, r24	; 0x01
 5d4:	06 c0       	rjmp	.+12     	; 0x5e2 <USART_Transmit_8_hex+0x36>
 5d6:	89 81       	ldd	r24, Y+1	; 0x01
 5d8:	80 31       	cpi	r24, 0x10	; 16
 5da:	18 f4       	brcc	.+6      	; 0x5e2 <USART_Transmit_8_hex+0x36>
 5dc:	89 81       	ldd	r24, Y+1	; 0x01
 5de:	89 5c       	subi	r24, 0xC9	; 201
 5e0:	89 83       	std	Y+1, r24	; 0x01
	convert2ASCII_hex(MSN);
 5e2:	8a 81       	ldd	r24, Y+2	; 0x02
 5e4:	8a 30       	cpi	r24, 0x0A	; 10
 5e6:	20 f4       	brcc	.+8      	; 0x5f0 <USART_Transmit_8_hex+0x44>
 5e8:	8a 81       	ldd	r24, Y+2	; 0x02
 5ea:	80 5d       	subi	r24, 0xD0	; 208
 5ec:	8a 83       	std	Y+2, r24	; 0x02
 5ee:	06 c0       	rjmp	.+12     	; 0x5fc <USART_Transmit_8_hex+0x50>
 5f0:	8a 81       	ldd	r24, Y+2	; 0x02
 5f2:	80 31       	cpi	r24, 0x10	; 16
 5f4:	18 f4       	brcc	.+6      	; 0x5fc <USART_Transmit_8_hex+0x50>
 5f6:	8a 81       	ldd	r24, Y+2	; 0x02
 5f8:	89 5c       	subi	r24, 0xC9	; 201
 5fa:	8a 83       	std	Y+2, r24	; 0x02

	USART_Transmit('0');
 5fc:	80 e3       	ldi	r24, 0x30	; 48
 5fe:	0e 94 87 01 	call	0x30e	; 0x30e <USART_Transmit>
	USART_Transmit('x');
 602:	88 e7       	ldi	r24, 0x78	; 120
 604:	0e 94 87 01 	call	0x30e	; 0x30e <USART_Transmit>
	USART_Transmit(MSN);
 608:	8a 81       	ldd	r24, Y+2	; 0x02
 60a:	0e 94 87 01 	call	0x30e	; 0x30e <USART_Transmit>
	USART_Transmit(LSN);
 60e:	89 81       	ldd	r24, Y+1	; 0x01
 610:	0e 94 87 01 	call	0x30e	; 0x30e <USART_Transmit>
	USART_Transmit(0x0A);
 614:	8a e0       	ldi	r24, 0x0A	; 10
 616:	0e 94 87 01 	call	0x30e	; 0x30e <USART_Transmit>
}
 61a:	0f 90       	pop	r0
 61c:	0f 90       	pop	r0
 61e:	0f 90       	pop	r0
 620:	df 91       	pop	r29
 622:	cf 91       	pop	r28
 624:	08 95       	ret

00000626 <USART_Transmit_8_dec>:

void USART_Transmit_8_dec(unsigned char byte){
 626:	cf 93       	push	r28
 628:	df 93       	push	r29
 62a:	00 d0       	rcall	.+0      	; 0x62c <USART_Transmit_8_dec+0x6>
 62c:	00 d0       	rcall	.+0      	; 0x62e <USART_Transmit_8_dec+0x8>
 62e:	1f 92       	push	r1
 630:	cd b7       	in	r28, 0x3d	; 61
 632:	de b7       	in	r29, 0x3e	; 62
 634:	89 83       	std	Y+1, r24	; 0x01
	if(byte < 10){
 636:	89 81       	ldd	r24, Y+1	; 0x01
 638:	8a 30       	cpi	r24, 0x0A	; 10
 63a:	40 f4       	brcc	.+16     	; 0x64c <USART_Transmit_8_dec+0x26>
		USART_Transmit(byte + 48);
 63c:	89 81       	ldd	r24, Y+1	; 0x01
 63e:	80 5d       	subi	r24, 0xD0	; 208
 640:	0e 94 87 01 	call	0x30e	; 0x30e <USART_Transmit>
		USART_Transmit(0x0A);
 644:	8a e0       	ldi	r24, 0x0A	; 10
 646:	0e 94 87 01 	call	0x30e	; 0x30e <USART_Transmit>
 64a:	6f c0       	rjmp	.+222    	; 0x72a <USART_Transmit_8_dec+0x104>
	}
	else if(byte < 100){
 64c:	89 81       	ldd	r24, Y+1	; 0x01
 64e:	84 36       	cpi	r24, 0x64	; 100
 650:	10 f5       	brcc	.+68     	; 0x696 <USART_Transmit_8_dec+0x70>
		USART_Transmit((byte / 10) + 48);
 652:	99 81       	ldd	r25, Y+1	; 0x01
 654:	8d ec       	ldi	r24, 0xCD	; 205
 656:	98 9f       	mul	r25, r24
 658:	81 2d       	mov	r24, r1
 65a:	11 24       	eor	r1, r1
 65c:	86 95       	lsr	r24
 65e:	86 95       	lsr	r24
 660:	86 95       	lsr	r24
 662:	80 5d       	subi	r24, 0xD0	; 208
 664:	0e 94 87 01 	call	0x30e	; 0x30e <USART_Transmit>
		USART_Transmit((byte % 10) + 48);
 668:	99 81       	ldd	r25, Y+1	; 0x01
 66a:	8d ec       	ldi	r24, 0xCD	; 205
 66c:	98 9f       	mul	r25, r24
 66e:	81 2d       	mov	r24, r1
 670:	11 24       	eor	r1, r1
 672:	86 95       	lsr	r24
 674:	86 95       	lsr	r24
 676:	86 95       	lsr	r24
 678:	88 0f       	add	r24, r24
 67a:	28 2f       	mov	r18, r24
 67c:	22 0f       	add	r18, r18
 67e:	22 0f       	add	r18, r18
 680:	82 0f       	add	r24, r18
 682:	29 2f       	mov	r18, r25
 684:	28 1b       	sub	r18, r24
 686:	82 2f       	mov	r24, r18
 688:	80 5d       	subi	r24, 0xD0	; 208
 68a:	0e 94 87 01 	call	0x30e	; 0x30e <USART_Transmit>
		USART_Transmit(0x0A);
 68e:	8a e0       	ldi	r24, 0x0A	; 10
 690:	0e 94 87 01 	call	0x30e	; 0x30e <USART_Transmit>
 694:	4a c0       	rjmp	.+148    	; 0x72a <USART_Transmit_8_dec+0x104>
	}
	else if(byte >= 100){
 696:	89 81       	ldd	r24, Y+1	; 0x01
 698:	84 36       	cpi	r24, 0x64	; 100
 69a:	08 f4       	brcc	.+2      	; 0x69e <USART_Transmit_8_dec+0x78>
 69c:	46 c0       	rjmp	.+140    	; 0x72a <USART_Transmit_8_dec+0x104>
		USART_Transmit((byte / 100) + 48);
 69e:	99 81       	ldd	r25, Y+1	; 0x01
 6a0:	89 e2       	ldi	r24, 0x29	; 41
 6a2:	98 9f       	mul	r25, r24
 6a4:	81 2d       	mov	r24, r1
 6a6:	11 24       	eor	r1, r1
 6a8:	82 95       	swap	r24
 6aa:	8f 70       	andi	r24, 0x0F	; 15
 6ac:	80 5d       	subi	r24, 0xD0	; 208
 6ae:	0e 94 87 01 	call	0x30e	; 0x30e <USART_Transmit>
		USART_Transmit(((byte - (byte/100)*100) / 10) + 48);
 6b2:	89 81       	ldd	r24, Y+1	; 0x01
 6b4:	28 2f       	mov	r18, r24
 6b6:	30 e0       	ldi	r19, 0x00	; 0
 6b8:	99 81       	ldd	r25, Y+1	; 0x01
 6ba:	89 e2       	ldi	r24, 0x29	; 41
 6bc:	98 9f       	mul	r25, r24
 6be:	81 2d       	mov	r24, r1
 6c0:	11 24       	eor	r1, r1
 6c2:	82 95       	swap	r24
 6c4:	8f 70       	andi	r24, 0x0F	; 15
 6c6:	48 2f       	mov	r20, r24
 6c8:	50 e0       	ldi	r21, 0x00	; 0
 6ca:	6c e9       	ldi	r22, 0x9C	; 156
 6cc:	64 03       	mulsu	r22, r20
 6ce:	c0 01       	movw	r24, r0
 6d0:	65 9f       	mul	r22, r21
 6d2:	90 0d       	add	r25, r0
 6d4:	11 24       	eor	r1, r1
 6d6:	82 0f       	add	r24, r18
 6d8:	93 1f       	adc	r25, r19
 6da:	2a e0       	ldi	r18, 0x0A	; 10
 6dc:	30 e0       	ldi	r19, 0x00	; 0
 6de:	b9 01       	movw	r22, r18
 6e0:	0e 94 48 06 	call	0xc90	; 0xc90 <__divmodhi4>
 6e4:	cb 01       	movw	r24, r22
 6e6:	80 5d       	subi	r24, 0xD0	; 208
 6e8:	0e 94 87 01 	call	0x30e	; 0x30e <USART_Transmit>
		USART_Transmit(((byte - (byte/100)*100) % 10) + 48);
 6ec:	89 81       	ldd	r24, Y+1	; 0x01
 6ee:	28 2f       	mov	r18, r24
 6f0:	30 e0       	ldi	r19, 0x00	; 0
 6f2:	99 81       	ldd	r25, Y+1	; 0x01
 6f4:	89 e2       	ldi	r24, 0x29	; 41
 6f6:	98 9f       	mul	r25, r24
 6f8:	81 2d       	mov	r24, r1
 6fa:	11 24       	eor	r1, r1
 6fc:	82 95       	swap	r24
 6fe:	8f 70       	andi	r24, 0x0F	; 15
 700:	48 2f       	mov	r20, r24
 702:	50 e0       	ldi	r21, 0x00	; 0
 704:	6c e9       	ldi	r22, 0x9C	; 156
 706:	64 03       	mulsu	r22, r20
 708:	c0 01       	movw	r24, r0
 70a:	65 9f       	mul	r22, r21
 70c:	90 0d       	add	r25, r0
 70e:	11 24       	eor	r1, r1
 710:	82 0f       	add	r24, r18
 712:	93 1f       	adc	r25, r19
 714:	2a e0       	ldi	r18, 0x0A	; 10
 716:	30 e0       	ldi	r19, 0x00	; 0
 718:	b9 01       	movw	r22, r18
 71a:	0e 94 48 06 	call	0xc90	; 0xc90 <__divmodhi4>
 71e:	80 5d       	subi	r24, 0xD0	; 208
 720:	0e 94 87 01 	call	0x30e	; 0x30e <USART_Transmit>
		USART_Transmit(0x0A);
 724:	8a e0       	ldi	r24, 0x0A	; 10
 726:	0e 94 87 01 	call	0x30e	; 0x30e <USART_Transmit>
	}
}
 72a:	0f 90       	pop	r0
 72c:	0f 90       	pop	r0
 72e:	0f 90       	pop	r0
 730:	0f 90       	pop	r0
 732:	0f 90       	pop	r0
 734:	df 91       	pop	r29
 736:	cf 91       	pop	r28
 738:	08 95       	ret

0000073a <USART_Transmit_16_dec>:

void USART_Transmit_16_dec(unsigned int word){
 73a:	cf 93       	push	r28
 73c:	df 93       	push	r29
 73e:	00 d0       	rcall	.+0      	; 0x740 <USART_Transmit_16_dec+0x6>
 740:	cd b7       	in	r28, 0x3d	; 61
 742:	de b7       	in	r29, 0x3e	; 62
 744:	9a 83       	std	Y+2, r25	; 0x02
 746:	89 83       	std	Y+1, r24	; 0x01
	if(word < 10){
 748:	89 81       	ldd	r24, Y+1	; 0x01
 74a:	9a 81       	ldd	r25, Y+2	; 0x02
 74c:	8a 30       	cpi	r24, 0x0A	; 10
 74e:	91 05       	cpc	r25, r1
 750:	40 f4       	brcc	.+16     	; 0x762 <USART_Transmit_16_dec+0x28>
		USART_Transmit(word + 48);
 752:	89 81       	ldd	r24, Y+1	; 0x01
 754:	80 5d       	subi	r24, 0xD0	; 208
 756:	0e 94 87 01 	call	0x30e	; 0x30e <USART_Transmit>
		USART_Transmit(0x0A);
 75a:	8a e0       	ldi	r24, 0x0A	; 10
 75c:	0e 94 87 01 	call	0x30e	; 0x30e <USART_Transmit>
 760:	c5 c1       	rjmp	.+906    	; 0xaec <__stack+0x1ed>
	}
	else if(word < 100){
 762:	89 81       	ldd	r24, Y+1	; 0x01
 764:	9a 81       	ldd	r25, Y+2	; 0x02
 766:	84 36       	cpi	r24, 0x64	; 100
 768:	91 05       	cpc	r25, r1
 76a:	88 f5       	brcc	.+98     	; 0x7ce <USART_Transmit_16_dec+0x94>
		USART_Transmit((word / 10) + 48);
 76c:	89 81       	ldd	r24, Y+1	; 0x01
 76e:	9a 81       	ldd	r25, Y+2	; 0x02
 770:	9c 01       	movw	r18, r24
 772:	ad ec       	ldi	r26, 0xCD	; 205
 774:	bc ec       	ldi	r27, 0xCC	; 204
 776:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <__umulhisi3>
 77a:	96 95       	lsr	r25
 77c:	87 95       	ror	r24
 77e:	96 95       	lsr	r25
 780:	87 95       	ror	r24
 782:	96 95       	lsr	r25
 784:	87 95       	ror	r24
 786:	80 5d       	subi	r24, 0xD0	; 208
 788:	0e 94 87 01 	call	0x30e	; 0x30e <USART_Transmit>
		USART_Transmit((word % 10) + 48);
 78c:	49 81       	ldd	r20, Y+1	; 0x01
 78e:	5a 81       	ldd	r21, Y+2	; 0x02
 790:	9a 01       	movw	r18, r20
 792:	ad ec       	ldi	r26, 0xCD	; 205
 794:	bc ec       	ldi	r27, 0xCC	; 204
 796:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <__umulhisi3>
 79a:	96 95       	lsr	r25
 79c:	87 95       	ror	r24
 79e:	96 95       	lsr	r25
 7a0:	87 95       	ror	r24
 7a2:	96 95       	lsr	r25
 7a4:	87 95       	ror	r24
 7a6:	88 0f       	add	r24, r24
 7a8:	99 1f       	adc	r25, r25
 7aa:	9c 01       	movw	r18, r24
 7ac:	22 0f       	add	r18, r18
 7ae:	33 1f       	adc	r19, r19
 7b0:	22 0f       	add	r18, r18
 7b2:	33 1f       	adc	r19, r19
 7b4:	82 0f       	add	r24, r18
 7b6:	93 1f       	adc	r25, r19
 7b8:	9a 01       	movw	r18, r20
 7ba:	28 1b       	sub	r18, r24
 7bc:	39 0b       	sbc	r19, r25
 7be:	c9 01       	movw	r24, r18
 7c0:	80 5d       	subi	r24, 0xD0	; 208
 7c2:	0e 94 87 01 	call	0x30e	; 0x30e <USART_Transmit>
		USART_Transmit(0x0A);
 7c6:	8a e0       	ldi	r24, 0x0A	; 10
 7c8:	0e 94 87 01 	call	0x30e	; 0x30e <USART_Transmit>
 7cc:	8f c1       	rjmp	.+798    	; 0xaec <__stack+0x1ed>
	}
	else if(word < 1000){
 7ce:	89 81       	ldd	r24, Y+1	; 0x01
 7d0:	9a 81       	ldd	r25, Y+2	; 0x02
 7d2:	88 3e       	cpi	r24, 0xE8	; 232
 7d4:	33 e0       	ldi	r19, 0x03	; 3
 7d6:	93 07       	cpc	r25, r19
 7d8:	08 f0       	brcs	.+2      	; 0x7dc <USART_Transmit_16_dec+0xa2>
 7da:	6c c0       	rjmp	.+216    	; 0x8b4 <USART_Transmit_16_dec+0x17a>
		USART_Transmit((word / 100) + 48);
 7dc:	89 81       	ldd	r24, Y+1	; 0x01
 7de:	9a 81       	ldd	r25, Y+2	; 0x02
 7e0:	96 95       	lsr	r25
 7e2:	87 95       	ror	r24
 7e4:	96 95       	lsr	r25
 7e6:	87 95       	ror	r24
 7e8:	9c 01       	movw	r18, r24
 7ea:	ab e7       	ldi	r26, 0x7B	; 123
 7ec:	b4 e1       	ldi	r27, 0x14	; 20
 7ee:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <__umulhisi3>
 7f2:	96 95       	lsr	r25
 7f4:	87 95       	ror	r24
 7f6:	80 5d       	subi	r24, 0xD0	; 208
 7f8:	0e 94 87 01 	call	0x30e	; 0x30e <USART_Transmit>
		USART_Transmit(((word - (word/100)*100) / 10) + 48);
 7fc:	49 81       	ldd	r20, Y+1	; 0x01
 7fe:	5a 81       	ldd	r21, Y+2	; 0x02
 800:	ca 01       	movw	r24, r20
 802:	96 95       	lsr	r25
 804:	87 95       	ror	r24
 806:	96 95       	lsr	r25
 808:	87 95       	ror	r24
 80a:	9c 01       	movw	r18, r24
 80c:	ab e7       	ldi	r26, 0x7B	; 123
 80e:	b4 e1       	ldi	r27, 0x14	; 20
 810:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <__umulhisi3>
 814:	96 95       	lsr	r25
 816:	87 95       	ror	r24
 818:	64 e6       	ldi	r22, 0x64	; 100
 81a:	68 9f       	mul	r22, r24
 81c:	90 01       	movw	r18, r0
 81e:	69 9f       	mul	r22, r25
 820:	30 0d       	add	r19, r0
 822:	11 24       	eor	r1, r1
 824:	ca 01       	movw	r24, r20
 826:	82 1b       	sub	r24, r18
 828:	93 0b       	sbc	r25, r19
 82a:	9c 01       	movw	r18, r24
 82c:	ad ec       	ldi	r26, 0xCD	; 205
 82e:	bc ec       	ldi	r27, 0xCC	; 204
 830:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <__umulhisi3>
 834:	96 95       	lsr	r25
 836:	87 95       	ror	r24
 838:	96 95       	lsr	r25
 83a:	87 95       	ror	r24
 83c:	96 95       	lsr	r25
 83e:	87 95       	ror	r24
 840:	80 5d       	subi	r24, 0xD0	; 208
 842:	0e 94 87 01 	call	0x30e	; 0x30e <USART_Transmit>
		USART_Transmit(((word - (word/100)*100) % 10) + 48);
 846:	e9 81       	ldd	r30, Y+1	; 0x01
 848:	fa 81       	ldd	r31, Y+2	; 0x02
 84a:	cf 01       	movw	r24, r30
 84c:	96 95       	lsr	r25
 84e:	87 95       	ror	r24
 850:	96 95       	lsr	r25
 852:	87 95       	ror	r24
 854:	9c 01       	movw	r18, r24
 856:	ab e7       	ldi	r26, 0x7B	; 123
 858:	b4 e1       	ldi	r27, 0x14	; 20
 85a:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <__umulhisi3>
 85e:	ac 01       	movw	r20, r24
 860:	56 95       	lsr	r21
 862:	47 95       	ror	r20
 864:	24 e6       	ldi	r18, 0x64	; 100
 866:	24 9f       	mul	r18, r20
 868:	c0 01       	movw	r24, r0
 86a:	25 9f       	mul	r18, r21
 86c:	90 0d       	add	r25, r0
 86e:	11 24       	eor	r1, r1
 870:	af 01       	movw	r20, r30
 872:	48 1b       	sub	r20, r24
 874:	59 0b       	sbc	r21, r25
 876:	9a 01       	movw	r18, r20
 878:	ad ec       	ldi	r26, 0xCD	; 205
 87a:	bc ec       	ldi	r27, 0xCC	; 204
 87c:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <__umulhisi3>
 880:	96 95       	lsr	r25
 882:	87 95       	ror	r24
 884:	96 95       	lsr	r25
 886:	87 95       	ror	r24
 888:	96 95       	lsr	r25
 88a:	87 95       	ror	r24
 88c:	88 0f       	add	r24, r24
 88e:	99 1f       	adc	r25, r25
 890:	9c 01       	movw	r18, r24
 892:	22 0f       	add	r18, r18
 894:	33 1f       	adc	r19, r19
 896:	22 0f       	add	r18, r18
 898:	33 1f       	adc	r19, r19
 89a:	82 0f       	add	r24, r18
 89c:	93 1f       	adc	r25, r19
 89e:	9a 01       	movw	r18, r20
 8a0:	28 1b       	sub	r18, r24
 8a2:	39 0b       	sbc	r19, r25
 8a4:	c9 01       	movw	r24, r18
 8a6:	80 5d       	subi	r24, 0xD0	; 208
 8a8:	0e 94 87 01 	call	0x30e	; 0x30e <USART_Transmit>
		USART_Transmit(0x0A);
 8ac:	8a e0       	ldi	r24, 0x0A	; 10
 8ae:	0e 94 87 01 	call	0x30e	; 0x30e <USART_Transmit>
 8b2:	1c c1       	rjmp	.+568    	; 0xaec <__stack+0x1ed>
	}
	else if(word < 10000){
 8b4:	89 81       	ldd	r24, Y+1	; 0x01
 8b6:	9a 81       	ldd	r25, Y+2	; 0x02
 8b8:	80 31       	cpi	r24, 0x10	; 16
 8ba:	37 e2       	ldi	r19, 0x27	; 39
 8bc:	93 07       	cpc	r25, r19
 8be:	08 f0       	brcs	.+2      	; 0x8c2 <USART_Transmit_16_dec+0x188>
 8c0:	12 c1       	rjmp	.+548    	; 0xae6 <__stack+0x1e7>
		USART_Transmit((word / 1000) + 48);
 8c2:	89 81       	ldd	r24, Y+1	; 0x01
 8c4:	9a 81       	ldd	r25, Y+2	; 0x02
 8c6:	96 95       	lsr	r25
 8c8:	87 95       	ror	r24
 8ca:	96 95       	lsr	r25
 8cc:	87 95       	ror	r24
 8ce:	96 95       	lsr	r25
 8d0:	87 95       	ror	r24
 8d2:	9c 01       	movw	r18, r24
 8d4:	a5 ec       	ldi	r26, 0xC5	; 197
 8d6:	b0 e2       	ldi	r27, 0x20	; 32
 8d8:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <__umulhisi3>
 8dc:	92 95       	swap	r25
 8de:	82 95       	swap	r24
 8e0:	8f 70       	andi	r24, 0x0F	; 15
 8e2:	89 27       	eor	r24, r25
 8e4:	9f 70       	andi	r25, 0x0F	; 15
 8e6:	89 27       	eor	r24, r25
 8e8:	80 5d       	subi	r24, 0xD0	; 208
 8ea:	0e 94 87 01 	call	0x30e	; 0x30e <USART_Transmit>
		USART_Transmit(((word - (word/1000)*1000) / 100) + 48);
 8ee:	49 81       	ldd	r20, Y+1	; 0x01
 8f0:	5a 81       	ldd	r21, Y+2	; 0x02
 8f2:	ca 01       	movw	r24, r20
 8f4:	96 95       	lsr	r25
 8f6:	87 95       	ror	r24
 8f8:	96 95       	lsr	r25
 8fa:	87 95       	ror	r24
 8fc:	96 95       	lsr	r25
 8fe:	87 95       	ror	r24
 900:	9c 01       	movw	r18, r24
 902:	a5 ec       	ldi	r26, 0xC5	; 197
 904:	b0 e2       	ldi	r27, 0x20	; 32
 906:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <__umulhisi3>
 90a:	92 95       	swap	r25
 90c:	82 95       	swap	r24
 90e:	8f 70       	andi	r24, 0x0F	; 15
 910:	89 27       	eor	r24, r25
 912:	9f 70       	andi	r25, 0x0F	; 15
 914:	89 27       	eor	r24, r25
 916:	68 ee       	ldi	r22, 0xE8	; 232
 918:	73 e0       	ldi	r23, 0x03	; 3
 91a:	86 9f       	mul	r24, r22
 91c:	90 01       	movw	r18, r0
 91e:	87 9f       	mul	r24, r23
 920:	30 0d       	add	r19, r0
 922:	96 9f       	mul	r25, r22
 924:	30 0d       	add	r19, r0
 926:	11 24       	eor	r1, r1
 928:	ca 01       	movw	r24, r20
 92a:	82 1b       	sub	r24, r18
 92c:	93 0b       	sbc	r25, r19
 92e:	96 95       	lsr	r25
 930:	87 95       	ror	r24
 932:	96 95       	lsr	r25
 934:	87 95       	ror	r24
 936:	9c 01       	movw	r18, r24
 938:	ab e7       	ldi	r26, 0x7B	; 123
 93a:	b4 e1       	ldi	r27, 0x14	; 20
 93c:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <__umulhisi3>
 940:	96 95       	lsr	r25
 942:	87 95       	ror	r24
 944:	80 5d       	subi	r24, 0xD0	; 208
 946:	0e 94 87 01 	call	0x30e	; 0x30e <USART_Transmit>
		USART_Transmit((((word - (word/1000)*1000) % 100) / 10) + 48);
 94a:	e9 81       	ldd	r30, Y+1	; 0x01
 94c:	fa 81       	ldd	r31, Y+2	; 0x02
 94e:	cf 01       	movw	r24, r30
 950:	96 95       	lsr	r25
 952:	87 95       	ror	r24
 954:	96 95       	lsr	r25
 956:	87 95       	ror	r24
 958:	96 95       	lsr	r25
 95a:	87 95       	ror	r24
 95c:	9c 01       	movw	r18, r24
 95e:	a5 ec       	ldi	r26, 0xC5	; 197
 960:	b0 e2       	ldi	r27, 0x20	; 32
 962:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <__umulhisi3>
 966:	ac 01       	movw	r20, r24
 968:	52 95       	swap	r21
 96a:	42 95       	swap	r20
 96c:	4f 70       	andi	r20, 0x0F	; 15
 96e:	45 27       	eor	r20, r21
 970:	5f 70       	andi	r21, 0x0F	; 15
 972:	45 27       	eor	r20, r21
 974:	28 ee       	ldi	r18, 0xE8	; 232
 976:	33 e0       	ldi	r19, 0x03	; 3
 978:	42 9f       	mul	r20, r18
 97a:	c0 01       	movw	r24, r0
 97c:	43 9f       	mul	r20, r19
 97e:	90 0d       	add	r25, r0
 980:	52 9f       	mul	r21, r18
 982:	90 0d       	add	r25, r0
 984:	11 24       	eor	r1, r1
 986:	af 01       	movw	r20, r30
 988:	48 1b       	sub	r20, r24
 98a:	59 0b       	sbc	r21, r25
 98c:	ca 01       	movw	r24, r20
 98e:	96 95       	lsr	r25
 990:	87 95       	ror	r24
 992:	96 95       	lsr	r25
 994:	87 95       	ror	r24
 996:	9c 01       	movw	r18, r24
 998:	ab e7       	ldi	r26, 0x7B	; 123
 99a:	b4 e1       	ldi	r27, 0x14	; 20
 99c:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <__umulhisi3>
 9a0:	96 95       	lsr	r25
 9a2:	87 95       	ror	r24
 9a4:	64 e6       	ldi	r22, 0x64	; 100
 9a6:	68 9f       	mul	r22, r24
 9a8:	90 01       	movw	r18, r0
 9aa:	69 9f       	mul	r22, r25
 9ac:	30 0d       	add	r19, r0
 9ae:	11 24       	eor	r1, r1
 9b0:	ca 01       	movw	r24, r20
 9b2:	82 1b       	sub	r24, r18
 9b4:	93 0b       	sbc	r25, r19
 9b6:	9c 01       	movw	r18, r24
 9b8:	ad ec       	ldi	r26, 0xCD	; 205
 9ba:	bc ec       	ldi	r27, 0xCC	; 204
 9bc:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <__umulhisi3>
 9c0:	96 95       	lsr	r25
 9c2:	87 95       	ror	r24
 9c4:	96 95       	lsr	r25
 9c6:	87 95       	ror	r24
 9c8:	96 95       	lsr	r25
 9ca:	87 95       	ror	r24
 9cc:	80 5d       	subi	r24, 0xD0	; 208
 9ce:	0e 94 87 01 	call	0x30e	; 0x30e <USART_Transmit>
		USART_Transmit((( (word - (word/1000)*1000) % 100) - (word - ((word/1000)*1000) % 100)/10)*10 +48);
 9d2:	e9 81       	ldd	r30, Y+1	; 0x01
 9d4:	fa 81       	ldd	r31, Y+2	; 0x02
 9d6:	cf 01       	movw	r24, r30
 9d8:	96 95       	lsr	r25
 9da:	87 95       	ror	r24
 9dc:	96 95       	lsr	r25
 9de:	87 95       	ror	r24
 9e0:	96 95       	lsr	r25
 9e2:	87 95       	ror	r24
 9e4:	9c 01       	movw	r18, r24
 9e6:	a5 ec       	ldi	r26, 0xC5	; 197
 9e8:	b0 e2       	ldi	r27, 0x20	; 32
 9ea:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <__umulhisi3>
 9ee:	ac 01       	movw	r20, r24
 9f0:	52 95       	swap	r21
 9f2:	42 95       	swap	r20
 9f4:	4f 70       	andi	r20, 0x0F	; 15
 9f6:	45 27       	eor	r20, r21
 9f8:	5f 70       	andi	r21, 0x0F	; 15
 9fa:	45 27       	eor	r20, r21
 9fc:	28 ee       	ldi	r18, 0xE8	; 232
 9fe:	33 e0       	ldi	r19, 0x03	; 3
 a00:	42 9f       	mul	r20, r18
 a02:	c0 01       	movw	r24, r0
 a04:	43 9f       	mul	r20, r19
 a06:	90 0d       	add	r25, r0
 a08:	52 9f       	mul	r21, r18
 a0a:	90 0d       	add	r25, r0
 a0c:	11 24       	eor	r1, r1
 a0e:	af 01       	movw	r20, r30
 a10:	48 1b       	sub	r20, r24
 a12:	59 0b       	sbc	r21, r25
 a14:	ca 01       	movw	r24, r20
 a16:	96 95       	lsr	r25
 a18:	87 95       	ror	r24
 a1a:	96 95       	lsr	r25
 a1c:	87 95       	ror	r24
 a1e:	9c 01       	movw	r18, r24
 a20:	ab e7       	ldi	r26, 0x7B	; 123
 a22:	b4 e1       	ldi	r27, 0x14	; 20
 a24:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <__umulhisi3>
 a28:	fc 01       	movw	r30, r24
 a2a:	f6 95       	lsr	r31
 a2c:	e7 95       	ror	r30
 a2e:	24 e6       	ldi	r18, 0x64	; 100
 a30:	2e 9f       	mul	r18, r30
 a32:	c0 01       	movw	r24, r0
 a34:	2f 9f       	mul	r18, r31
 a36:	90 0d       	add	r25, r0
 a38:	11 24       	eor	r1, r1
 a3a:	fa 01       	movw	r30, r20
 a3c:	e8 1b       	sub	r30, r24
 a3e:	f9 0b       	sbc	r31, r25
 a40:	89 81       	ldd	r24, Y+1	; 0x01
 a42:	9a 81       	ldd	r25, Y+2	; 0x02
 a44:	96 95       	lsr	r25
 a46:	87 95       	ror	r24
 a48:	96 95       	lsr	r25
 a4a:	87 95       	ror	r24
 a4c:	96 95       	lsr	r25
 a4e:	87 95       	ror	r24
 a50:	9c 01       	movw	r18, r24
 a52:	a5 ec       	ldi	r26, 0xC5	; 197
 a54:	b0 e2       	ldi	r27, 0x20	; 32
 a56:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <__umulhisi3>
 a5a:	9c 01       	movw	r18, r24
 a5c:	32 95       	swap	r19
 a5e:	22 95       	swap	r18
 a60:	2f 70       	andi	r18, 0x0F	; 15
 a62:	23 27       	eor	r18, r19
 a64:	3f 70       	andi	r19, 0x0F	; 15
 a66:	23 27       	eor	r18, r19
 a68:	88 ee       	ldi	r24, 0xE8	; 232
 a6a:	93 e0       	ldi	r25, 0x03	; 3
 a6c:	28 9f       	mul	r18, r24
 a6e:	a0 01       	movw	r20, r0
 a70:	29 9f       	mul	r18, r25
 a72:	50 0d       	add	r21, r0
 a74:	38 9f       	mul	r19, r24
 a76:	50 0d       	add	r21, r0
 a78:	11 24       	eor	r1, r1
 a7a:	ca 01       	movw	r24, r20
 a7c:	96 95       	lsr	r25
 a7e:	87 95       	ror	r24
 a80:	96 95       	lsr	r25
 a82:	87 95       	ror	r24
 a84:	9c 01       	movw	r18, r24
 a86:	ab e7       	ldi	r26, 0x7B	; 123
 a88:	b4 e1       	ldi	r27, 0x14	; 20
 a8a:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <__umulhisi3>
 a8e:	96 95       	lsr	r25
 a90:	87 95       	ror	r24
 a92:	64 e6       	ldi	r22, 0x64	; 100
 a94:	68 9f       	mul	r22, r24
 a96:	90 01       	movw	r18, r0
 a98:	69 9f       	mul	r22, r25
 a9a:	30 0d       	add	r19, r0
 a9c:	11 24       	eor	r1, r1
 a9e:	ca 01       	movw	r24, r20
 aa0:	82 1b       	sub	r24, r18
 aa2:	93 0b       	sbc	r25, r19
 aa4:	29 81       	ldd	r18, Y+1	; 0x01
 aa6:	3a 81       	ldd	r19, Y+2	; 0x02
 aa8:	a9 01       	movw	r20, r18
 aaa:	48 1b       	sub	r20, r24
 aac:	59 0b       	sbc	r21, r25
 aae:	ca 01       	movw	r24, r20
 ab0:	9c 01       	movw	r18, r24
 ab2:	ad ec       	ldi	r26, 0xCD	; 205
 ab4:	bc ec       	ldi	r27, 0xCC	; 204
 ab6:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <__umulhisi3>
 aba:	96 95       	lsr	r25
 abc:	87 95       	ror	r24
 abe:	96 95       	lsr	r25
 ac0:	87 95       	ror	r24
 ac2:	96 95       	lsr	r25
 ac4:	87 95       	ror	r24
 ac6:	9f 01       	movw	r18, r30
 ac8:	28 1b       	sub	r18, r24
 aca:	39 0b       	sbc	r19, r25
 acc:	c9 01       	movw	r24, r18
 ace:	88 0f       	add	r24, r24
 ad0:	98 2f       	mov	r25, r24
 ad2:	99 0f       	add	r25, r25
 ad4:	99 0f       	add	r25, r25
 ad6:	89 0f       	add	r24, r25
 ad8:	80 5d       	subi	r24, 0xD0	; 208
 ada:	0e 94 87 01 	call	0x30e	; 0x30e <USART_Transmit>
		USART_Transmit(0x0A);
 ade:	8a e0       	ldi	r24, 0x0A	; 10
 ae0:	0e 94 87 01 	call	0x30e	; 0x30e <USART_Transmit>
 ae4:	03 c0       	rjmp	.+6      	; 0xaec <__stack+0x1ed>
	}
	else{
		USART_Transmit('q');
 ae6:	81 e7       	ldi	r24, 0x71	; 113
 ae8:	0e 94 87 01 	call	0x30e	; 0x30e <USART_Transmit>
	}
}
 aec:	0f 90       	pop	r0
 aee:	0f 90       	pop	r0
 af0:	df 91       	pop	r29
 af2:	cf 91       	pop	r28
 af4:	08 95       	ret

00000af6 <myPrint>:


void myPrint(unsigned char str[], unsigned char len){
 af6:	cf 93       	push	r28
 af8:	df 93       	push	r29
 afa:	00 d0       	rcall	.+0      	; 0xafc <myPrint+0x6>
 afc:	00 d0       	rcall	.+0      	; 0xafe <myPrint+0x8>
 afe:	cd b7       	in	r28, 0x3d	; 61
 b00:	de b7       	in	r29, 0x3e	; 62
 b02:	9b 83       	std	Y+3, r25	; 0x03
 b04:	8a 83       	std	Y+2, r24	; 0x02
 b06:	6c 83       	std	Y+4, r22	; 0x04
	for(unsigned char i = 0; i < len; i++){
 b08:	19 82       	std	Y+1, r1	; 0x01
 b0a:	1a c0       	rjmp	.+52     	; 0xb40 <myPrint+0x4a>
		if(str[i] == '\0'){
 b0c:	89 81       	ldd	r24, Y+1	; 0x01
 b0e:	88 2f       	mov	r24, r24
 b10:	90 e0       	ldi	r25, 0x00	; 0
 b12:	2a 81       	ldd	r18, Y+2	; 0x02
 b14:	3b 81       	ldd	r19, Y+3	; 0x03
 b16:	82 0f       	add	r24, r18
 b18:	93 1f       	adc	r25, r19
 b1a:	fc 01       	movw	r30, r24
 b1c:	80 81       	ld	r24, Z
 b1e:	88 23       	and	r24, r24
 b20:	09 f4       	brne	.+2      	; 0xb24 <myPrint+0x2e>
			break;
 b22:	12 c0       	rjmp	.+36     	; 0xb48 <myPrint+0x52>
		}
		USART_Transmit(str[i]);
 b24:	89 81       	ldd	r24, Y+1	; 0x01
 b26:	88 2f       	mov	r24, r24
 b28:	90 e0       	ldi	r25, 0x00	; 0
 b2a:	2a 81       	ldd	r18, Y+2	; 0x02
 b2c:	3b 81       	ldd	r19, Y+3	; 0x03
 b2e:	82 0f       	add	r24, r18
 b30:	93 1f       	adc	r25, r19
 b32:	fc 01       	movw	r30, r24
 b34:	80 81       	ld	r24, Z
 b36:	0e 94 87 01 	call	0x30e	; 0x30e <USART_Transmit>
	}
}


void myPrint(unsigned char str[], unsigned char len){
	for(unsigned char i = 0; i < len; i++){
 b3a:	89 81       	ldd	r24, Y+1	; 0x01
 b3c:	8f 5f       	subi	r24, 0xFF	; 255
 b3e:	89 83       	std	Y+1, r24	; 0x01
 b40:	99 81       	ldd	r25, Y+1	; 0x01
 b42:	8c 81       	ldd	r24, Y+4	; 0x04
 b44:	98 17       	cp	r25, r24
 b46:	10 f3       	brcs	.-60     	; 0xb0c <myPrint+0x16>
		if(str[i] == '\0'){
			break;
		}
		USART_Transmit(str[i]);
	}
	USART_Transmit(0x0A);
 b48:	8a e0       	ldi	r24, 0x0A	; 10
 b4a:	0e 94 87 01 	call	0x30e	; 0x30e <USART_Transmit>
}
 b4e:	0f 90       	pop	r0
 b50:	0f 90       	pop	r0
 b52:	0f 90       	pop	r0
 b54:	0f 90       	pop	r0
 b56:	df 91       	pop	r29
 b58:	cf 91       	pop	r28
 b5a:	08 95       	ret

00000b5c <__vector_18>:


ISR(USART_RX_vect){
 b5c:	1f 92       	push	r1
 b5e:	0f 92       	push	r0
 b60:	00 90 5f 00 	lds	r0, 0x005F
 b64:	0f 92       	push	r0
 b66:	11 24       	eor	r1, r1
 b68:	8f 93       	push	r24
 b6a:	9f 93       	push	r25
 b6c:	ef 93       	push	r30
 b6e:	ff 93       	push	r31
 b70:	cf 93       	push	r28
 b72:	df 93       	push	r29
 b74:	cd b7       	in	r28, 0x3d	; 61
 b76:	de b7       	in	r29, 0x3e	; 62
	// dataReceived variable to allow the main function to know when new data is available
	dataReceived = 1;
 b78:	81 e0       	ldi	r24, 0x01	; 1
 b7a:	80 93 32 01 	sts	0x0132, r24
	// Write the data from the USART I/O register to a buffer
	rxBuffer = UDR0;
 b7e:	86 ec       	ldi	r24, 0xC6	; 198
 b80:	90 e0       	ldi	r25, 0x00	; 0
 b82:	fc 01       	movw	r30, r24
 b84:	80 81       	ld	r24, Z
 b86:	80 93 33 01 	sts	0x0133, r24
}
 b8a:	df 91       	pop	r29
 b8c:	cf 91       	pop	r28
 b8e:	ff 91       	pop	r31
 b90:	ef 91       	pop	r30
 b92:	9f 91       	pop	r25
 b94:	8f 91       	pop	r24
 b96:	0f 90       	pop	r0
 b98:	00 92 5f 00 	sts	0x005F, r0
 b9c:	0f 90       	pop	r0
 b9e:	1f 90       	pop	r1
 ba0:	18 95       	reti

00000ba2 <SPI_MasterInit>:


#include "spi_comm.h"
#include "myUSART.h"

void SPI_MasterInit(void){
 ba2:	cf 93       	push	r28
 ba4:	df 93       	push	r29
 ba6:	cd b7       	in	r28, 0x3d	; 61
 ba8:	de b7       	in	r29, 0x3e	; 62
 baa:	e2 97       	sbiw	r28, 0x32	; 50
 bac:	0f b6       	in	r0, 0x3f	; 63
 bae:	f8 94       	cli
 bb0:	de bf       	out	0x3e, r29	; 62
 bb2:	0f be       	out	0x3f, r0	; 63
 bb4:	cd bf       	out	0x3d, r28	; 61
	unsigned char initializingSPI[50] = "Initializing SPI now\0";
 bb6:	26 e1       	ldi	r18, 0x16	; 22
 bb8:	e0 e0       	ldi	r30, 0x00	; 0
 bba:	f1 e0       	ldi	r31, 0x01	; 1
 bbc:	ce 01       	movw	r24, r28
 bbe:	01 96       	adiw	r24, 0x01	; 1
 bc0:	dc 01       	movw	r26, r24
 bc2:	01 90       	ld	r0, Z+
 bc4:	0d 92       	st	X+, r0
 bc6:	2a 95       	dec	r18
 bc8:	e1 f7       	brne	.-8      	; 0xbc2 <SPI_MasterInit+0x20>
 bca:	2c e1       	ldi	r18, 0x1C	; 28
 bcc:	ce 01       	movw	r24, r28
 bce:	47 96       	adiw	r24, 0x17	; 23
 bd0:	fc 01       	movw	r30, r24
 bd2:	32 2f       	mov	r19, r18
 bd4:	11 92       	st	Z+, r1
 bd6:	3a 95       	dec	r19
 bd8:	e9 f7       	brne	.-6      	; 0xbd4 <SPI_MasterInit+0x32>
	myPrint(initializingSPI,21);
 bda:	65 e1       	ldi	r22, 0x15	; 21
 bdc:	ce 01       	movw	r24, r28
 bde:	01 96       	adiw	r24, 0x01	; 1
 be0:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <myPrint>
	// set MOSI, SCK and SS as output, all others are inputs.
	DDR_SPI = ( 1 << SPI_MOSI ) | ( 1 << SPI_SCK ) | ( 1 << SPI_SS );
 be4:	84 e2       	ldi	r24, 0x24	; 36
 be6:	90 e0       	ldi	r25, 0x00	; 0
 be8:	2c e2       	ldi	r18, 0x2C	; 44
 bea:	fc 01       	movw	r30, r24
 bec:	20 83       	st	Z, r18

	// SPI Control Register
	// SPE bit: SPI Enable
	// MSTR bit: Master select bit
	// SPR0 bit: Clock select bit, sets clock rate to Fosc/16, sets the clock polarity such that SCK is high when idle
	SPCR = ( 1 << SPE ) | ( 1 << MSTR ) | ( 1 << SPR0 ) | ( 1 << CPOL );
 bee:	8c e4       	ldi	r24, 0x4C	; 76
 bf0:	90 e0       	ldi	r25, 0x00	; 0
 bf2:	29 e5       	ldi	r18, 0x59	; 89
 bf4:	fc 01       	movw	r30, r24
 bf6:	20 83       	st	Z, r18

	// Ensure that the SS line is high (no transmission) when the initialization is finished
	SPI_PORT |= ( 1 << SPI_SS );
 bf8:	85 e2       	ldi	r24, 0x25	; 37
 bfa:	90 e0       	ldi	r25, 0x00	; 0
 bfc:	25 e2       	ldi	r18, 0x25	; 37
 bfe:	30 e0       	ldi	r19, 0x00	; 0
 c00:	f9 01       	movw	r30, r18
 c02:	20 81       	ld	r18, Z
 c04:	24 60       	ori	r18, 0x04	; 4
 c06:	fc 01       	movw	r30, r24
 c08:	20 83       	st	Z, r18
}
 c0a:	e2 96       	adiw	r28, 0x32	; 50
 c0c:	0f b6       	in	r0, 0x3f	; 63
 c0e:	f8 94       	cli
 c10:	de bf       	out	0x3e, r29	; 62
 c12:	0f be       	out	0x3f, r0	; 63
 c14:	cd bf       	out	0x3d, r28	; 61
 c16:	df 91       	pop	r29
 c18:	cf 91       	pop	r28
 c1a:	08 95       	ret

00000c1c <SPI_Initiate_Transmission>:

void SPI_Initiate_Transmission(){
 c1c:	cf 93       	push	r28
 c1e:	df 93       	push	r29
 c20:	cd b7       	in	r28, 0x3d	; 61
 c22:	de b7       	in	r29, 0x3e	; 62
	//unsigned char begin_transmit[50] = "Begin SPI Transmission\0";
	//myPrint(begin_transmit,30);
	// Pull the SS line low to initiate transmission
	SPI_PORT &= ~( 1 << SPI_SS );
 c24:	85 e2       	ldi	r24, 0x25	; 37
 c26:	90 e0       	ldi	r25, 0x00	; 0
 c28:	25 e2       	ldi	r18, 0x25	; 37
 c2a:	30 e0       	ldi	r19, 0x00	; 0
 c2c:	f9 01       	movw	r30, r18
 c2e:	20 81       	ld	r18, Z
 c30:	2b 7f       	andi	r18, 0xFB	; 251
 c32:	fc 01       	movw	r30, r24
 c34:	20 83       	st	Z, r18
}
 c36:	df 91       	pop	r29
 c38:	cf 91       	pop	r28
 c3a:	08 95       	ret

00000c3c <SPI_End_Transmission>:

void SPI_End_Transmission(){
 c3c:	cf 93       	push	r28
 c3e:	df 93       	push	r29
 c40:	cd b7       	in	r28, 0x3d	; 61
 c42:	de b7       	in	r29, 0x3e	; 62
	//unsigned char end_transmit[50] = "Ending SPI Transmission\0";
	//myPrint(end_transmit,30);
	// Pull the SS line high to end transmission
	SPI_PORT |= ( 1 << SPI_SS );
 c44:	85 e2       	ldi	r24, 0x25	; 37
 c46:	90 e0       	ldi	r25, 0x00	; 0
 c48:	25 e2       	ldi	r18, 0x25	; 37
 c4a:	30 e0       	ldi	r19, 0x00	; 0
 c4c:	f9 01       	movw	r30, r18
 c4e:	20 81       	ld	r18, Z
 c50:	24 60       	ori	r18, 0x04	; 4
 c52:	fc 01       	movw	r30, r24
 c54:	20 83       	st	Z, r18
}
 c56:	df 91       	pop	r29
 c58:	cf 91       	pop	r28
 c5a:	08 95       	ret

00000c5c <SPI_MasterTransmit>:

char SPI_MasterTransmit(char cData){
 c5c:	cf 93       	push	r28
 c5e:	df 93       	push	r29
 c60:	1f 92       	push	r1
 c62:	cd b7       	in	r28, 0x3d	; 61
 c64:	de b7       	in	r29, 0x3e	; 62
 c66:	89 83       	std	Y+1, r24	; 0x01
	//unsigned char transmitting[50] = "Transmitting over SPI now\0";
	//myPrint(transmitting,30);
	// SPI Data Register, transfers data between register file and the SPI shift register
	SPDR = cData;
 c68:	8e e4       	ldi	r24, 0x4E	; 78
 c6a:	90 e0       	ldi	r25, 0x00	; 0
 c6c:	29 81       	ldd	r18, Y+1	; 0x01
 c6e:	fc 01       	movw	r30, r24
 c70:	20 83       	st	Z, r18
	//asm volatile("nop");	// This is supposed to help

	// Wait for transmission to complete
	// SPI Status Register
	// SPIF bit: SPI Interrupt Flag, it is set when a serial transfer is complete
	while ( !( SPSR & ( 1 << SPIF ) ) );
 c72:	00 00       	nop
 c74:	8d e4       	ldi	r24, 0x4D	; 77
 c76:	90 e0       	ldi	r25, 0x00	; 0
 c78:	fc 01       	movw	r30, r24
 c7a:	80 81       	ld	r24, Z
 c7c:	88 23       	and	r24, r24
 c7e:	d4 f7       	brge	.-12     	; 0xc74 <SPI_MasterTransmit+0x18>
	return SPDR;
 c80:	8e e4       	ldi	r24, 0x4E	; 78
 c82:	90 e0       	ldi	r25, 0x00	; 0
 c84:	fc 01       	movw	r30, r24
 c86:	80 81       	ld	r24, Z

}
 c88:	0f 90       	pop	r0
 c8a:	df 91       	pop	r29
 c8c:	cf 91       	pop	r28
 c8e:	08 95       	ret

00000c90 <__divmodhi4>:
 c90:	97 fb       	bst	r25, 7
 c92:	07 2e       	mov	r0, r23
 c94:	16 f4       	brtc	.+4      	; 0xc9a <__divmodhi4+0xa>
 c96:	00 94       	com	r0
 c98:	07 d0       	rcall	.+14     	; 0xca8 <__divmodhi4_neg1>
 c9a:	77 fd       	sbrc	r23, 7
 c9c:	09 d0       	rcall	.+18     	; 0xcb0 <__divmodhi4_neg2>
 c9e:	0e 94 8a 06 	call	0xd14	; 0xd14 <__udivmodhi4>
 ca2:	07 fc       	sbrc	r0, 7
 ca4:	05 d0       	rcall	.+10     	; 0xcb0 <__divmodhi4_neg2>
 ca6:	3e f4       	brtc	.+14     	; 0xcb6 <__divmodhi4_exit>

00000ca8 <__divmodhi4_neg1>:
 ca8:	90 95       	com	r25
 caa:	81 95       	neg	r24
 cac:	9f 4f       	sbci	r25, 0xFF	; 255
 cae:	08 95       	ret

00000cb0 <__divmodhi4_neg2>:
 cb0:	70 95       	com	r23
 cb2:	61 95       	neg	r22
 cb4:	7f 4f       	sbci	r23, 0xFF	; 255

00000cb6 <__divmodhi4_exit>:
 cb6:	08 95       	ret

00000cb8 <__divmodsi4>:
 cb8:	05 2e       	mov	r0, r21
 cba:	97 fb       	bst	r25, 7
 cbc:	1e f4       	brtc	.+6      	; 0xcc4 <__divmodsi4+0xc>
 cbe:	00 94       	com	r0
 cc0:	0e 94 73 06 	call	0xce6	; 0xce6 <__negsi2>
 cc4:	57 fd       	sbrc	r21, 7
 cc6:	07 d0       	rcall	.+14     	; 0xcd6 <__divmodsi4_neg2>
 cc8:	0e 94 9e 06 	call	0xd3c	; 0xd3c <__udivmodsi4>
 ccc:	07 fc       	sbrc	r0, 7
 cce:	03 d0       	rcall	.+6      	; 0xcd6 <__divmodsi4_neg2>
 cd0:	4e f4       	brtc	.+18     	; 0xce4 <__divmodsi4_exit>
 cd2:	0c 94 73 06 	jmp	0xce6	; 0xce6 <__negsi2>

00000cd6 <__divmodsi4_neg2>:
 cd6:	50 95       	com	r21
 cd8:	40 95       	com	r20
 cda:	30 95       	com	r19
 cdc:	21 95       	neg	r18
 cde:	3f 4f       	sbci	r19, 0xFF	; 255
 ce0:	4f 4f       	sbci	r20, 0xFF	; 255
 ce2:	5f 4f       	sbci	r21, 0xFF	; 255

00000ce4 <__divmodsi4_exit>:
 ce4:	08 95       	ret

00000ce6 <__negsi2>:
 ce6:	90 95       	com	r25
 ce8:	80 95       	com	r24
 cea:	70 95       	com	r23
 cec:	61 95       	neg	r22
 cee:	7f 4f       	sbci	r23, 0xFF	; 255
 cf0:	8f 4f       	sbci	r24, 0xFF	; 255
 cf2:	9f 4f       	sbci	r25, 0xFF	; 255
 cf4:	08 95       	ret

00000cf6 <__umulhisi3>:
 cf6:	a2 9f       	mul	r26, r18
 cf8:	b0 01       	movw	r22, r0
 cfa:	b3 9f       	mul	r27, r19
 cfc:	c0 01       	movw	r24, r0
 cfe:	a3 9f       	mul	r26, r19
 d00:	70 0d       	add	r23, r0
 d02:	81 1d       	adc	r24, r1
 d04:	11 24       	eor	r1, r1
 d06:	91 1d       	adc	r25, r1
 d08:	b2 9f       	mul	r27, r18
 d0a:	70 0d       	add	r23, r0
 d0c:	81 1d       	adc	r24, r1
 d0e:	11 24       	eor	r1, r1
 d10:	91 1d       	adc	r25, r1
 d12:	08 95       	ret

00000d14 <__udivmodhi4>:
 d14:	aa 1b       	sub	r26, r26
 d16:	bb 1b       	sub	r27, r27
 d18:	51 e1       	ldi	r21, 0x11	; 17
 d1a:	07 c0       	rjmp	.+14     	; 0xd2a <__udivmodhi4_ep>

00000d1c <__udivmodhi4_loop>:
 d1c:	aa 1f       	adc	r26, r26
 d1e:	bb 1f       	adc	r27, r27
 d20:	a6 17       	cp	r26, r22
 d22:	b7 07       	cpc	r27, r23
 d24:	10 f0       	brcs	.+4      	; 0xd2a <__udivmodhi4_ep>
 d26:	a6 1b       	sub	r26, r22
 d28:	b7 0b       	sbc	r27, r23

00000d2a <__udivmodhi4_ep>:
 d2a:	88 1f       	adc	r24, r24
 d2c:	99 1f       	adc	r25, r25
 d2e:	5a 95       	dec	r21
 d30:	a9 f7       	brne	.-22     	; 0xd1c <__udivmodhi4_loop>
 d32:	80 95       	com	r24
 d34:	90 95       	com	r25
 d36:	bc 01       	movw	r22, r24
 d38:	cd 01       	movw	r24, r26
 d3a:	08 95       	ret

00000d3c <__udivmodsi4>:
 d3c:	a1 e2       	ldi	r26, 0x21	; 33
 d3e:	1a 2e       	mov	r1, r26
 d40:	aa 1b       	sub	r26, r26
 d42:	bb 1b       	sub	r27, r27
 d44:	fd 01       	movw	r30, r26
 d46:	0d c0       	rjmp	.+26     	; 0xd62 <__udivmodsi4_ep>

00000d48 <__udivmodsi4_loop>:
 d48:	aa 1f       	adc	r26, r26
 d4a:	bb 1f       	adc	r27, r27
 d4c:	ee 1f       	adc	r30, r30
 d4e:	ff 1f       	adc	r31, r31
 d50:	a2 17       	cp	r26, r18
 d52:	b3 07       	cpc	r27, r19
 d54:	e4 07       	cpc	r30, r20
 d56:	f5 07       	cpc	r31, r21
 d58:	20 f0       	brcs	.+8      	; 0xd62 <__udivmodsi4_ep>
 d5a:	a2 1b       	sub	r26, r18
 d5c:	b3 0b       	sbc	r27, r19
 d5e:	e4 0b       	sbc	r30, r20
 d60:	f5 0b       	sbc	r31, r21

00000d62 <__udivmodsi4_ep>:
 d62:	66 1f       	adc	r22, r22
 d64:	77 1f       	adc	r23, r23
 d66:	88 1f       	adc	r24, r24
 d68:	99 1f       	adc	r25, r25
 d6a:	1a 94       	dec	r1
 d6c:	69 f7       	brne	.-38     	; 0xd48 <__udivmodsi4_loop>
 d6e:	60 95       	com	r22
 d70:	70 95       	com	r23
 d72:	80 95       	com	r24
 d74:	90 95       	com	r25
 d76:	9b 01       	movw	r18, r22
 d78:	ac 01       	movw	r20, r24
 d7a:	bd 01       	movw	r22, r26
 d7c:	cf 01       	movw	r24, r30
 d7e:	08 95       	ret

00000d80 <_exit>:
 d80:	f8 94       	cli

00000d82 <__stop_program>:
 d82:	ff cf       	rjmp	.-2      	; 0xd82 <__stop_program>
