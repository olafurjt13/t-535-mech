
imu_spi_com.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000062  00800100  00001a72  00001b06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a72  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800162  00800162  00001b68  2**0
                  ALLOC
  3 .stab         00001ec0  00000000  00000000  00001b68  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012e7  00000000  00000000  00003a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00004d0f  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000160  00000000  00000000  00004d20  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000082a  00000000  00000000  00004e80  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000000dc  00000000  00000000  000056aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000470  00000000  00000000  00005786  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 75 08 	jmp	0x10ea	; 0x10ea <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e2 e7       	ldi	r30, 0x72	; 114
      7c:	fa e1       	ldi	r31, 0x1A	; 26
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a2 36       	cpi	r26, 0x62	; 98
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	a2 e6       	ldi	r26, 0x62	; 98
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	aa 36       	cpi	r26, 0x6A	; 106
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 c3 01 	call	0x386	; 0x386 <main>
      9e:	0c 94 37 0d 	jmp	0x1a6e	; 0x1a6e <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <IMU_init>:
#include "spi_comm.h"
#include "IMU_module.h"
#include "myUSART.h"


void IMU_init(){
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
      aa:	00 d0       	rcall	.+0      	; 0xac <IMU_init+0x6>
      ac:	1f 92       	push	r1
      ae:	cd b7       	in	r28, 0x3d	; 61
      b0:	de b7       	in	r29, 0x3e	; 62
	SPI_MasterInit();
      b2:	0e 94 98 08 	call	0x1130	; 0x1130 <SPI_MasterInit>
	// The bit pattern to turn on acceleration sensing in the Z,Y and X directions
	char setCtrlReg5 = ( 1 << ACC_Z ) | ( 1 << ACC_Y ) | ( 1 << ACC_X );
      b6:	88 e3       	ldi	r24, 0x38	; 56
      b8:	89 83       	std	Y+1, r24	; 0x01

	// Send write address
	SPI_Initiate_Transmission();
      ba:	85 e2       	ldi	r24, 0x25	; 37
      bc:	90 e0       	ldi	r25, 0x00	; 0
      be:	25 e2       	ldi	r18, 0x25	; 37
      c0:	30 e0       	ldi	r19, 0x00	; 0
      c2:	f9 01       	movw	r30, r18
      c4:	20 81       	ld	r18, Z
      c6:	2b 7f       	andi	r18, 0xFB	; 251
      c8:	fc 01       	movw	r30, r24
      ca:	20 83       	st	Z, r18
	SPI_MasterTransmit( WRITE | CTRL_REG5_XL );
      cc:	8f e1       	ldi	r24, 0x1F	; 31
      ce:	0e 94 de 08 	call	0x11bc	; 0x11bc <SPI_MasterTransmit>

	// Send ctrlReg5 bit pattern to turn on X,Y,Z acceleration sensors
	SPI_MasterTransmit( setCtrlReg5 );
      d2:	89 81       	ldd	r24, Y+1	; 0x01
      d4:	0e 94 de 08 	call	0x11bc	; 0x11bc <SPI_MasterTransmit>
	SPI_End_Transmission();
      d8:	85 e2       	ldi	r24, 0x25	; 37
      da:	90 e0       	ldi	r25, 0x00	; 0
      dc:	25 e2       	ldi	r18, 0x25	; 37
      de:	30 e0       	ldi	r19, 0x00	; 0
      e0:	f9 01       	movw	r30, r18
      e2:	20 81       	ld	r18, Z
      e4:	24 60       	ori	r18, 0x04	; 4
      e6:	fc 01       	movw	r30, r24
      e8:	20 83       	st	Z, r18


	char setCtrlReg8 = ( 1 << IF_ADD_INC );
      ea:	84 e0       	ldi	r24, 0x04	; 4
      ec:	8a 83       	std	Y+2, r24	; 0x02

	// Send write address
		SPI_Initiate_Transmission();
      ee:	85 e2       	ldi	r24, 0x25	; 37
      f0:	90 e0       	ldi	r25, 0x00	; 0
      f2:	25 e2       	ldi	r18, 0x25	; 37
      f4:	30 e0       	ldi	r19, 0x00	; 0
      f6:	f9 01       	movw	r30, r18
      f8:	20 81       	ld	r18, Z
      fa:	2b 7f       	andi	r18, 0xFB	; 251
      fc:	fc 01       	movw	r30, r24
      fe:	20 83       	st	Z, r18

	SPI_MasterTransmit( WRITE | CTRL_REG8 );
     100:	82 e2       	ldi	r24, 0x22	; 34
     102:	0e 94 de 08 	call	0x11bc	; 0x11bc <SPI_MasterTransmit>
	// Send setCtrlReg8 bit pattern to turn auto increment registers on
	SPI_MasterTransmit( setCtrlReg8 );
     106:	8a 81       	ldd	r24, Y+2	; 0x02
     108:	0e 94 de 08 	call	0x11bc	; 0x11bc <SPI_MasterTransmit>
		SPI_End_Transmission();
     10c:	85 e2       	ldi	r24, 0x25	; 37
     10e:	90 e0       	ldi	r25, 0x00	; 0
     110:	25 e2       	ldi	r18, 0x25	; 37
     112:	30 e0       	ldi	r19, 0x00	; 0
     114:	f9 01       	movw	r30, r18
     116:	20 81       	ld	r18, Z
     118:	24 60       	ori	r18, 0x04	; 4
     11a:	fc 01       	movw	r30, r24
     11c:	20 83       	st	Z, r18
	//unsigned char doneIMU[50] = "Finished initializing IMU\0";
	//myPrint(doneIMU,30);

	char setCtrlReg6 = ( 1 << ODR_XL2 );
     11e:	80 e8       	ldi	r24, 0x80	; 128
     120:	8b 83       	std	Y+3, r24	; 0x03
	setCtrlReg6 |= ( 1 << ODR_XL1 );
     122:	8b 81       	ldd	r24, Y+3	; 0x03
     124:	80 64       	ori	r24, 0x40	; 64
     126:	8b 83       	std	Y+3, r24	; 0x03

}
     128:	0f 90       	pop	r0
     12a:	0f 90       	pop	r0
     12c:	0f 90       	pop	r0
     12e:	df 91       	pop	r29
     130:	cf 91       	pop	r28
     132:	08 95       	ret

00000134 <IMU_read_acc>:
void IMU_read_acc(int *accBuffer){
     134:	0f 93       	push	r16
     136:	1f 93       	push	r17
     138:	cf 93       	push	r28
     13a:	df 93       	push	r29
     13c:	cd b7       	in	r28, 0x3d	; 61
     13e:	de b7       	in	r29, 0x3e	; 62
     140:	2b 97       	sbiw	r28, 0x0b	; 11
     142:	0f b6       	in	r0, 0x3f	; 63
     144:	f8 94       	cli
     146:	de bf       	out	0x3e, r29	; 62
     148:	0f be       	out	0x3f, r0	; 63
     14a:	cd bf       	out	0x3d, r28	; 61
     14c:	9b 87       	std	Y+11, r25	; 0x0b
     14e:	8a 87       	std	Y+10, r24	; 0x0a
	// char sendingRequest[27] = "Now sending request to IMU\n";
	// char readingFromSPDR[18] = "Reading from SPDR\n";

	char spiBuffer[6];
	int *acc = accBuffer;
     150:	8a 85       	ldd	r24, Y+10	; 0x0a
     152:	9b 85       	ldd	r25, Y+11	; 0x0b
     154:	9b 83       	std	Y+3, r25	; 0x03
     156:	8a 83       	std	Y+2, r24	; 0x02

	// Select the IMU as an SPI Slave

	SPI_Initiate_Transmission();
     158:	85 e2       	ldi	r24, 0x25	; 37
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	25 e2       	ldi	r18, 0x25	; 37
     15e:	30 e0       	ldi	r19, 0x00	; 0
     160:	f9 01       	movw	r30, r18
     162:	20 81       	ld	r18, Z
     164:	2b 7f       	andi	r18, 0xFB	; 251
     166:	fc 01       	movw	r30, r24
     168:	20 83       	st	Z, r18


	// Send "read from acceleration output register" signal
	SPI_MasterTransmit( READ | OUT_X_XL );
     16a:	88 ea       	ldi	r24, 0xA8	; 168
     16c:	0e 94 de 08 	call	0x11bc	; 0x11bc <SPI_MasterTransmit>
	for (unsigned char i = 0; i < 6; i++){
     170:	19 82       	std	Y+1, r1	; 0x01
     172:	10 c0       	rjmp	.+32     	; 0x194 <IMU_read_acc+0x60>
			spiBuffer[i] = SPI_MasterTransmit(0x00);
     174:	89 81       	ldd	r24, Y+1	; 0x01
     176:	08 2f       	mov	r16, r24
     178:	10 e0       	ldi	r17, 0x00	; 0
     17a:	80 e0       	ldi	r24, 0x00	; 0
     17c:	0e 94 de 08 	call	0x11bc	; 0x11bc <SPI_MasterTransmit>
     180:	28 2f       	mov	r18, r24
     182:	ce 01       	movw	r24, r28
     184:	04 96       	adiw	r24, 0x04	; 4
     186:	80 0f       	add	r24, r16
     188:	91 1f       	adc	r25, r17
     18a:	fc 01       	movw	r30, r24
     18c:	20 83       	st	Z, r18
	SPI_Initiate_Transmission();


	// Send "read from acceleration output register" signal
	SPI_MasterTransmit( READ | OUT_X_XL );
	for (unsigned char i = 0; i < 6; i++){
     18e:	89 81       	ldd	r24, Y+1	; 0x01
     190:	8f 5f       	subi	r24, 0xFF	; 255
     192:	89 83       	std	Y+1, r24	; 0x01
     194:	89 81       	ldd	r24, Y+1	; 0x01
     196:	86 30       	cpi	r24, 0x06	; 6
     198:	68 f3       	brcs	.-38     	; 0x174 <IMU_read_acc+0x40>
			spiBuffer[i] = SPI_MasterTransmit(0x00);
	}
	SPI_End_Transmission();
     19a:	85 e2       	ldi	r24, 0x25	; 37
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	25 e2       	ldi	r18, 0x25	; 37
     1a0:	30 e0       	ldi	r19, 0x00	; 0
     1a2:	f9 01       	movw	r30, r18
     1a4:	20 81       	ld	r18, Z
     1a6:	24 60       	ori	r18, 0x04	; 4
     1a8:	fc 01       	movw	r30, r24
     1aa:	20 83       	st	Z, r18

	acc[0] = (spiBuffer[1] << 8 | spiBuffer[0]);
     1ac:	8d 81       	ldd	r24, Y+5	; 0x05
     1ae:	88 2f       	mov	r24, r24
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	38 2f       	mov	r19, r24
     1b4:	22 27       	eor	r18, r18
     1b6:	8c 81       	ldd	r24, Y+4	; 0x04
     1b8:	88 2f       	mov	r24, r24
     1ba:	90 e0       	ldi	r25, 0x00	; 0
     1bc:	28 2b       	or	r18, r24
     1be:	39 2b       	or	r19, r25
     1c0:	8a 81       	ldd	r24, Y+2	; 0x02
     1c2:	9b 81       	ldd	r25, Y+3	; 0x03
     1c4:	fc 01       	movw	r30, r24
     1c6:	31 83       	std	Z+1, r19	; 0x01
     1c8:	20 83       	st	Z, r18
	acc[1] = (spiBuffer[3] << 8 | spiBuffer[2]);
     1ca:	8a 81       	ldd	r24, Y+2	; 0x02
     1cc:	9b 81       	ldd	r25, Y+3	; 0x03
     1ce:	02 96       	adiw	r24, 0x02	; 2
     1d0:	2f 81       	ldd	r18, Y+7	; 0x07
     1d2:	22 2f       	mov	r18, r18
     1d4:	30 e0       	ldi	r19, 0x00	; 0
     1d6:	52 2f       	mov	r21, r18
     1d8:	44 27       	eor	r20, r20
     1da:	2e 81       	ldd	r18, Y+6	; 0x06
     1dc:	22 2f       	mov	r18, r18
     1de:	30 e0       	ldi	r19, 0x00	; 0
     1e0:	24 2b       	or	r18, r20
     1e2:	35 2b       	or	r19, r21
     1e4:	fc 01       	movw	r30, r24
     1e6:	31 83       	std	Z+1, r19	; 0x01
     1e8:	20 83       	st	Z, r18
	acc[2] = (spiBuffer[5] << 8 | spiBuffer[4]);
     1ea:	8a 81       	ldd	r24, Y+2	; 0x02
     1ec:	9b 81       	ldd	r25, Y+3	; 0x03
     1ee:	04 96       	adiw	r24, 0x04	; 4
     1f0:	29 85       	ldd	r18, Y+9	; 0x09
     1f2:	22 2f       	mov	r18, r18
     1f4:	30 e0       	ldi	r19, 0x00	; 0
     1f6:	52 2f       	mov	r21, r18
     1f8:	44 27       	eor	r20, r20
     1fa:	28 85       	ldd	r18, Y+8	; 0x08
     1fc:	22 2f       	mov	r18, r18
     1fe:	30 e0       	ldi	r19, 0x00	; 0
     200:	24 2b       	or	r18, r20
     202:	35 2b       	or	r19, r21
     204:	fc 01       	movw	r30, r24
     206:	31 83       	std	Z+1, r19	; 0x01
     208:	20 83       	st	Z, r18
}
     20a:	2b 96       	adiw	r28, 0x0b	; 11
     20c:	0f b6       	in	r0, 0x3f	; 63
     20e:	f8 94       	cli
     210:	de bf       	out	0x3e, r29	; 62
     212:	0f be       	out	0x3f, r0	; 63
     214:	cd bf       	out	0x3d, r28	; 61
     216:	df 91       	pop	r29
     218:	cf 91       	pop	r28
     21a:	1f 91       	pop	r17
     21c:	0f 91       	pop	r16
     21e:	08 95       	ret

00000220 <IMU_read_gyro>:


void IMU_read_gyro(int *gyroBuffer){
     220:	0f 93       	push	r16
     222:	1f 93       	push	r17
     224:	cf 93       	push	r28
     226:	df 93       	push	r29
     228:	cd b7       	in	r28, 0x3d	; 61
     22a:	de b7       	in	r29, 0x3e	; 62
     22c:	2b 97       	sbiw	r28, 0x0b	; 11
     22e:	0f b6       	in	r0, 0x3f	; 63
     230:	f8 94       	cli
     232:	de bf       	out	0x3e, r29	; 62
     234:	0f be       	out	0x3f, r0	; 63
     236:	cd bf       	out	0x3d, r28	; 61
     238:	9b 87       	std	Y+11, r25	; 0x0b
     23a:	8a 87       	std	Y+10, r24	; 0x0a
	// char sendingRequest[27] = "Now sending request to IMU\n";
	// char readingFromSPDR[18] = "Reading from SPDR\n";

	char spiBuffer[6];
	int *ang_rate = gyroBuffer;
     23c:	8a 85       	ldd	r24, Y+10	; 0x0a
     23e:	9b 85       	ldd	r25, Y+11	; 0x0b
     240:	9b 83       	std	Y+3, r25	; 0x03
     242:	8a 83       	std	Y+2, r24	; 0x02

	// Select the IMU as an SPI Slave

	SPI_Initiate_Transmission();
     244:	85 e2       	ldi	r24, 0x25	; 37
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	25 e2       	ldi	r18, 0x25	; 37
     24a:	30 e0       	ldi	r19, 0x00	; 0
     24c:	f9 01       	movw	r30, r18
     24e:	20 81       	ld	r18, Z
     250:	2b 7f       	andi	r18, 0xFB	; 251
     252:	fc 01       	movw	r30, r24
     254:	20 83       	st	Z, r18


	// Send "read from acceleration output register" signal
	SPI_MasterTransmit( READ | OUT_X_G );
     256:	88 e9       	ldi	r24, 0x98	; 152
     258:	0e 94 de 08 	call	0x11bc	; 0x11bc <SPI_MasterTransmit>
	for (unsigned char i = 0; i < 6; i++){
     25c:	19 82       	std	Y+1, r1	; 0x01
     25e:	10 c0       	rjmp	.+32     	; 0x280 <IMU_read_gyro+0x60>
			spiBuffer[i] = SPI_MasterTransmit(0x00);
     260:	89 81       	ldd	r24, Y+1	; 0x01
     262:	08 2f       	mov	r16, r24
     264:	10 e0       	ldi	r17, 0x00	; 0
     266:	80 e0       	ldi	r24, 0x00	; 0
     268:	0e 94 de 08 	call	0x11bc	; 0x11bc <SPI_MasterTransmit>
     26c:	28 2f       	mov	r18, r24
     26e:	ce 01       	movw	r24, r28
     270:	04 96       	adiw	r24, 0x04	; 4
     272:	80 0f       	add	r24, r16
     274:	91 1f       	adc	r25, r17
     276:	fc 01       	movw	r30, r24
     278:	20 83       	st	Z, r18
	SPI_Initiate_Transmission();


	// Send "read from acceleration output register" signal
	SPI_MasterTransmit( READ | OUT_X_G );
	for (unsigned char i = 0; i < 6; i++){
     27a:	89 81       	ldd	r24, Y+1	; 0x01
     27c:	8f 5f       	subi	r24, 0xFF	; 255
     27e:	89 83       	std	Y+1, r24	; 0x01
     280:	89 81       	ldd	r24, Y+1	; 0x01
     282:	86 30       	cpi	r24, 0x06	; 6
     284:	68 f3       	brcs	.-38     	; 0x260 <IMU_read_gyro+0x40>
			spiBuffer[i] = SPI_MasterTransmit(0x00);
	}
	SPI_End_Transmission();
     286:	85 e2       	ldi	r24, 0x25	; 37
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	25 e2       	ldi	r18, 0x25	; 37
     28c:	30 e0       	ldi	r19, 0x00	; 0
     28e:	f9 01       	movw	r30, r18
     290:	20 81       	ld	r18, Z
     292:	24 60       	ori	r18, 0x04	; 4
     294:	fc 01       	movw	r30, r24
     296:	20 83       	st	Z, r18

	ang_rate[0] = (spiBuffer[1] << 8 | spiBuffer[0]);
     298:	8d 81       	ldd	r24, Y+5	; 0x05
     29a:	88 2f       	mov	r24, r24
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	38 2f       	mov	r19, r24
     2a0:	22 27       	eor	r18, r18
     2a2:	8c 81       	ldd	r24, Y+4	; 0x04
     2a4:	88 2f       	mov	r24, r24
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	28 2b       	or	r18, r24
     2aa:	39 2b       	or	r19, r25
     2ac:	8a 81       	ldd	r24, Y+2	; 0x02
     2ae:	9b 81       	ldd	r25, Y+3	; 0x03
     2b0:	fc 01       	movw	r30, r24
     2b2:	31 83       	std	Z+1, r19	; 0x01
     2b4:	20 83       	st	Z, r18
	ang_rate[1] = (spiBuffer[3] << 8 | spiBuffer[2]);
     2b6:	8a 81       	ldd	r24, Y+2	; 0x02
     2b8:	9b 81       	ldd	r25, Y+3	; 0x03
     2ba:	02 96       	adiw	r24, 0x02	; 2
     2bc:	2f 81       	ldd	r18, Y+7	; 0x07
     2be:	22 2f       	mov	r18, r18
     2c0:	30 e0       	ldi	r19, 0x00	; 0
     2c2:	52 2f       	mov	r21, r18
     2c4:	44 27       	eor	r20, r20
     2c6:	2e 81       	ldd	r18, Y+6	; 0x06
     2c8:	22 2f       	mov	r18, r18
     2ca:	30 e0       	ldi	r19, 0x00	; 0
     2cc:	24 2b       	or	r18, r20
     2ce:	35 2b       	or	r19, r21
     2d0:	fc 01       	movw	r30, r24
     2d2:	31 83       	std	Z+1, r19	; 0x01
     2d4:	20 83       	st	Z, r18
	ang_rate[2] = (spiBuffer[5] << 8 | spiBuffer[4]);
     2d6:	8a 81       	ldd	r24, Y+2	; 0x02
     2d8:	9b 81       	ldd	r25, Y+3	; 0x03
     2da:	04 96       	adiw	r24, 0x04	; 4
     2dc:	29 85       	ldd	r18, Y+9	; 0x09
     2de:	22 2f       	mov	r18, r18
     2e0:	30 e0       	ldi	r19, 0x00	; 0
     2e2:	52 2f       	mov	r21, r18
     2e4:	44 27       	eor	r20, r20
     2e6:	28 85       	ldd	r18, Y+8	; 0x08
     2e8:	22 2f       	mov	r18, r18
     2ea:	30 e0       	ldi	r19, 0x00	; 0
     2ec:	24 2b       	or	r18, r20
     2ee:	35 2b       	or	r19, r21
     2f0:	fc 01       	movw	r30, r24
     2f2:	31 83       	std	Z+1, r19	; 0x01
     2f4:	20 83       	st	Z, r18
}
     2f6:	2b 96       	adiw	r28, 0x0b	; 11
     2f8:	0f b6       	in	r0, 0x3f	; 63
     2fa:	f8 94       	cli
     2fc:	de bf       	out	0x3e, r29	; 62
     2fe:	0f be       	out	0x3f, r0	; 63
     300:	cd bf       	out	0x3d, r28	; 61
     302:	df 91       	pop	r29
     304:	cf 91       	pop	r28
     306:	1f 91       	pop	r17
     308:	0f 91       	pop	r16
     30a:	08 95       	ret

0000030c <whoami>:



char whoami(void){
     30c:	cf 93       	push	r28
     30e:	df 93       	push	r29
     310:	1f 92       	push	r1
     312:	cd b7       	in	r28, 0x3d	; 61
     314:	de b7       	in	r29, 0x3e	; 62
	char buff;
	SPI_Initiate_Transmission();
     316:	85 e2       	ldi	r24, 0x25	; 37
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	25 e2       	ldi	r18, 0x25	; 37
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	f9 01       	movw	r30, r18
     320:	20 81       	ld	r18, Z
     322:	2b 7f       	andi	r18, 0xFB	; 251
     324:	fc 01       	movw	r30, r24
     326:	20 83       	st	Z, r18
	SPI_MasterTransmit( READ | WHO_AM_I );	// Request Identification
     328:	8f e8       	ldi	r24, 0x8F	; 143
     32a:	0e 94 de 08 	call	0x11bc	; 0x11bc <SPI_MasterTransmit>
	buff = SPI_MasterTransmit(0x00);	// Store Identification
     32e:	80 e0       	ldi	r24, 0x00	; 0
     330:	0e 94 de 08 	call	0x11bc	; 0x11bc <SPI_MasterTransmit>
     334:	89 83       	std	Y+1, r24	; 0x01
	SPI_End_Transmission();
     336:	85 e2       	ldi	r24, 0x25	; 37
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	25 e2       	ldi	r18, 0x25	; 37
     33c:	30 e0       	ldi	r19, 0x00	; 0
     33e:	f9 01       	movw	r30, r18
     340:	20 81       	ld	r18, Z
     342:	24 60       	ori	r18, 0x04	; 4
     344:	fc 01       	movw	r30, r24
     346:	20 83       	st	Z, r18

	return buff;
     348:	89 81       	ldd	r24, Y+1	; 0x01
}
     34a:	0f 90       	pop	r0
     34c:	df 91       	pop	r29
     34e:	cf 91       	pop	r28
     350:	08 95       	ret

00000352 <usart_putchar_printf>:
#include "myUSART.h"
#include <stdio.h>

#define BAUD 9600

int usart_putchar_printf(char var, FILE *stream){
     352:	cf 93       	push	r28
     354:	df 93       	push	r29
     356:	00 d0       	rcall	.+0      	; 0x358 <usart_putchar_printf+0x6>
     358:	1f 92       	push	r1
     35a:	cd b7       	in	r28, 0x3d	; 61
     35c:	de b7       	in	r29, 0x3e	; 62
     35e:	89 83       	std	Y+1, r24	; 0x01
     360:	7b 83       	std	Y+3, r23	; 0x03
     362:	6a 83       	std	Y+2, r22	; 0x02
	if(var == 'n'){USART_Transmit('\r');}
     364:	89 81       	ldd	r24, Y+1	; 0x01
     366:	8e 36       	cpi	r24, 0x6E	; 110
     368:	19 f4       	brne	.+6      	; 0x370 <usart_putchar_printf+0x1e>
     36a:	8d e0       	ldi	r24, 0x0D	; 13
     36c:	0e 94 b4 02 	call	0x568	; 0x568 <USART_Transmit>
	USART_Transmit(var);
     370:	89 81       	ldd	r24, Y+1	; 0x01
     372:	0e 94 b4 02 	call	0x568	; 0x568 <USART_Transmit>
	return 0;
     376:	80 e0       	ldi	r24, 0x00	; 0
     378:	90 e0       	ldi	r25, 0x00	; 0
}
     37a:	0f 90       	pop	r0
     37c:	0f 90       	pop	r0
     37e:	0f 90       	pop	r0
     380:	df 91       	pop	r29
     382:	cf 91       	pop	r28
     384:	08 95       	ret

00000386 <main>:
static FILE mystdout = FDEV_SETUP_STREAM(usart_putchar_printf, NULL, _FDEV_SETUP_WRITE);


int main(){
     386:	cf 93       	push	r28
     388:	df 93       	push	r29
     38a:	cd b7       	in	r28, 0x3d	; 61
     38c:	de b7       	in	r29, 0x3e	; 62
     38e:	af 97       	sbiw	r28, 0x2f	; 47
     390:	0f b6       	in	r0, 0x3f	; 63
     392:	f8 94       	cli
     394:	de bf       	out	0x3e, r29	; 62
     396:	0f be       	out	0x3f, r0	; 63
     398:	cd bf       	out	0x3d, r28	; 61
	stdout = &mystdout;
     39a:	80 e0       	ldi	r24, 0x00	; 0
     39c:	91 e0       	ldi	r25, 0x01	; 1
     39e:	90 93 67 01 	sts	0x0167, r25
     3a2:	80 93 66 01 	sts	0x0166, r24
	asm("sei");
     3a6:	78 94       	sei
	USART_init(BAUD);
     3a8:	80 e8       	ldi	r24, 0x80	; 128
     3aa:	95 e2       	ldi	r25, 0x25	; 37
     3ac:	0e 94 ce 02 	call	0x59c	; 0x59c <USART_init>
	IMU_init();
     3b0:	0e 94 53 00 	call	0xa6	; 0xa6 <IMU_init>
	int acc_data[3];
	int last[3];
	unsigned char X[10] = "X: \0";
     3b4:	85 e0       	ldi	r24, 0x05	; 5
     3b6:	e1 e1       	ldi	r30, 0x11	; 17
     3b8:	f1 e0       	ldi	r31, 0x01	; 1
     3ba:	de 01       	movw	r26, r28
     3bc:	52 96       	adiw	r26, 0x12	; 18
     3be:	01 90       	ld	r0, Z+
     3c0:	0d 92       	st	X+, r0
     3c2:	8a 95       	dec	r24
     3c4:	e1 f7       	brne	.-8      	; 0x3be <main+0x38>
     3c6:	25 e0       	ldi	r18, 0x05	; 5
     3c8:	ce 01       	movw	r24, r28
     3ca:	47 96       	adiw	r24, 0x17	; 23
     3cc:	fc 01       	movw	r30, r24
     3ce:	32 2f       	mov	r19, r18
     3d0:	11 92       	st	Z+, r1
     3d2:	3a 95       	dec	r19
     3d4:	e9 f7       	brne	.-6      	; 0x3d0 <main+0x4a>
	unsigned char Y[10] = "Y: \0";
     3d6:	85 e0       	ldi	r24, 0x05	; 5
     3d8:	eb e1       	ldi	r30, 0x1B	; 27
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	de 01       	movw	r26, r28
     3de:	5c 96       	adiw	r26, 0x1c	; 28
     3e0:	01 90       	ld	r0, Z+
     3e2:	0d 92       	st	X+, r0
     3e4:	8a 95       	dec	r24
     3e6:	e1 f7       	brne	.-8      	; 0x3e0 <main+0x5a>
     3e8:	25 e0       	ldi	r18, 0x05	; 5
     3ea:	ce 01       	movw	r24, r28
     3ec:	81 96       	adiw	r24, 0x21	; 33
     3ee:	fc 01       	movw	r30, r24
     3f0:	32 2f       	mov	r19, r18
     3f2:	11 92       	st	Z+, r1
     3f4:	3a 95       	dec	r19
     3f6:	e9 f7       	brne	.-6      	; 0x3f2 <main+0x6c>
	unsigned char Z[10] = "Z: \0";
     3f8:	85 e0       	ldi	r24, 0x05	; 5
     3fa:	e5 e2       	ldi	r30, 0x25	; 37
     3fc:	f1 e0       	ldi	r31, 0x01	; 1
     3fe:	de 01       	movw	r26, r28
     400:	96 96       	adiw	r26, 0x26	; 38
     402:	01 90       	ld	r0, Z+
     404:	0d 92       	st	X+, r0
     406:	8a 95       	dec	r24
     408:	e1 f7       	brne	.-8      	; 0x402 <main+0x7c>
     40a:	25 e0       	ldi	r18, 0x05	; 5
     40c:	ce 01       	movw	r24, r28
     40e:	8b 96       	adiw	r24, 0x2b	; 43
     410:	fc 01       	movw	r30, r24
     412:	32 2f       	mov	r19, r18
     414:	11 92       	st	Z+, r1
     416:	3a 95       	dec	r19
     418:	e9 f7       	brne	.-6      	; 0x414 <main+0x8e>
	float acc_res = 4.0/65536.0;
     41a:	80 e0       	ldi	r24, 0x00	; 0
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	a0 e8       	ldi	r26, 0x80	; 128
     420:	b8 e3       	ldi	r27, 0x38	; 56
     422:	89 83       	std	Y+1, r24	; 0x01
     424:	9a 83       	std	Y+2, r25	; 0x02
     426:	ab 83       	std	Y+3, r26	; 0x03
     428:	bc 83       	std	Y+4, r27	; 0x04
	char firstvalues = 0;
     42a:	1d 82       	std	Y+5, r1	; 0x05


	while(1){
		if(dataReceived){
     42c:	80 91 62 01 	lds	r24, 0x0162
     430:	88 23       	and	r24, r24
     432:	09 f4       	brne	.+2      	; 0x436 <main+0xb0>
     434:	98 c0       	rjmp	.+304    	; 0x566 <main+0x1e0>
			if (rxBuffer == '0' ){dataReceived = 0;};
     436:	80 91 63 01 	lds	r24, 0x0163
     43a:	80 33       	cpi	r24, 0x30	; 48
     43c:	11 f4       	brne	.+4      	; 0x442 <main+0xbc>
     43e:	10 92 62 01 	sts	0x0162, r1
			IMU_read_acc(acc_data);
     442:	ce 01       	movw	r24, r28
     444:	06 96       	adiw	r24, 0x06	; 6
     446:	0e 94 9a 00 	call	0x134	; 0x134 <IMU_read_acc>

			printf("%f", acc_res*acc_data[0]);
     44a:	8e 81       	ldd	r24, Y+6	; 0x06
     44c:	9f 81       	ldd	r25, Y+7	; 0x07
     44e:	aa 27       	eor	r26, r26
     450:	97 fd       	sbrc	r25, 7
     452:	a0 95       	com	r26
     454:	ba 2f       	mov	r27, r26
     456:	bc 01       	movw	r22, r24
     458:	cd 01       	movw	r24, r26
     45a:	0e 94 85 09 	call	0x130a	; 0x130a <__floatsisf>
     45e:	dc 01       	movw	r26, r24
     460:	cb 01       	movw	r24, r22
     462:	29 81       	ldd	r18, Y+1	; 0x01
     464:	3a 81       	ldd	r19, Y+2	; 0x02
     466:	4b 81       	ldd	r20, Y+3	; 0x03
     468:	5c 81       	ldd	r21, Y+4	; 0x04
     46a:	bc 01       	movw	r22, r24
     46c:	cd 01       	movw	r24, r26
     46e:	0e 94 c0 09 	call	0x1380	; 0x1380 <__mulsf3>
     472:	dc 01       	movw	r26, r24
     474:	cb 01       	movw	r24, r22
     476:	2b 2f       	mov	r18, r27
     478:	2f 93       	push	r18
     47a:	2a 2f       	mov	r18, r26
     47c:	2f 93       	push	r18
     47e:	29 2f       	mov	r18, r25
     480:	2f 93       	push	r18
     482:	8f 93       	push	r24
     484:	8e e0       	ldi	r24, 0x0E	; 14
     486:	91 e0       	ldi	r25, 0x01	; 1
     488:	89 2f       	mov	r24, r25
     48a:	8f 93       	push	r24
     48c:	8e e0       	ldi	r24, 0x0E	; 14
     48e:	91 e0       	ldi	r25, 0x01	; 1
     490:	8f 93       	push	r24
     492:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <printf>
     496:	0f 90       	pop	r0
     498:	0f 90       	pop	r0
     49a:	0f 90       	pop	r0
     49c:	0f 90       	pop	r0
     49e:	0f 90       	pop	r0
     4a0:	0f 90       	pop	r0
			USART_Transmit(0x20);
     4a2:	80 e2       	ldi	r24, 0x20	; 32
     4a4:	0e 94 b4 02 	call	0x568	; 0x568 <USART_Transmit>
			printf("%f", acc_res*acc_data[1]);
     4a8:	88 85       	ldd	r24, Y+8	; 0x08
     4aa:	99 85       	ldd	r25, Y+9	; 0x09
     4ac:	aa 27       	eor	r26, r26
     4ae:	97 fd       	sbrc	r25, 7
     4b0:	a0 95       	com	r26
     4b2:	ba 2f       	mov	r27, r26
     4b4:	bc 01       	movw	r22, r24
     4b6:	cd 01       	movw	r24, r26
     4b8:	0e 94 85 09 	call	0x130a	; 0x130a <__floatsisf>
     4bc:	dc 01       	movw	r26, r24
     4be:	cb 01       	movw	r24, r22
     4c0:	29 81       	ldd	r18, Y+1	; 0x01
     4c2:	3a 81       	ldd	r19, Y+2	; 0x02
     4c4:	4b 81       	ldd	r20, Y+3	; 0x03
     4c6:	5c 81       	ldd	r21, Y+4	; 0x04
     4c8:	bc 01       	movw	r22, r24
     4ca:	cd 01       	movw	r24, r26
     4cc:	0e 94 c0 09 	call	0x1380	; 0x1380 <__mulsf3>
     4d0:	dc 01       	movw	r26, r24
     4d2:	cb 01       	movw	r24, r22
     4d4:	2b 2f       	mov	r18, r27
     4d6:	2f 93       	push	r18
     4d8:	2a 2f       	mov	r18, r26
     4da:	2f 93       	push	r18
     4dc:	29 2f       	mov	r18, r25
     4de:	2f 93       	push	r18
     4e0:	8f 93       	push	r24
     4e2:	8e e0       	ldi	r24, 0x0E	; 14
     4e4:	91 e0       	ldi	r25, 0x01	; 1
     4e6:	89 2f       	mov	r24, r25
     4e8:	8f 93       	push	r24
     4ea:	8e e0       	ldi	r24, 0x0E	; 14
     4ec:	91 e0       	ldi	r25, 0x01	; 1
     4ee:	8f 93       	push	r24
     4f0:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <printf>
     4f4:	0f 90       	pop	r0
     4f6:	0f 90       	pop	r0
     4f8:	0f 90       	pop	r0
     4fa:	0f 90       	pop	r0
     4fc:	0f 90       	pop	r0
     4fe:	0f 90       	pop	r0
			USART_Transmit(0x20);
     500:	80 e2       	ldi	r24, 0x20	; 32
     502:	0e 94 b4 02 	call	0x568	; 0x568 <USART_Transmit>
			printf("%f", acc_res*acc_data[2]);
     506:	8a 85       	ldd	r24, Y+10	; 0x0a
     508:	9b 85       	ldd	r25, Y+11	; 0x0b
     50a:	aa 27       	eor	r26, r26
     50c:	97 fd       	sbrc	r25, 7
     50e:	a0 95       	com	r26
     510:	ba 2f       	mov	r27, r26
     512:	bc 01       	movw	r22, r24
     514:	cd 01       	movw	r24, r26
     516:	0e 94 85 09 	call	0x130a	; 0x130a <__floatsisf>
     51a:	dc 01       	movw	r26, r24
     51c:	cb 01       	movw	r24, r22
     51e:	29 81       	ldd	r18, Y+1	; 0x01
     520:	3a 81       	ldd	r19, Y+2	; 0x02
     522:	4b 81       	ldd	r20, Y+3	; 0x03
     524:	5c 81       	ldd	r21, Y+4	; 0x04
     526:	bc 01       	movw	r22, r24
     528:	cd 01       	movw	r24, r26
     52a:	0e 94 c0 09 	call	0x1380	; 0x1380 <__mulsf3>
     52e:	dc 01       	movw	r26, r24
     530:	cb 01       	movw	r24, r22
     532:	2b 2f       	mov	r18, r27
     534:	2f 93       	push	r18
     536:	2a 2f       	mov	r18, r26
     538:	2f 93       	push	r18
     53a:	29 2f       	mov	r18, r25
     53c:	2f 93       	push	r18
     53e:	8f 93       	push	r24
     540:	8e e0       	ldi	r24, 0x0E	; 14
     542:	91 e0       	ldi	r25, 0x01	; 1
     544:	89 2f       	mov	r24, r25
     546:	8f 93       	push	r24
     548:	8e e0       	ldi	r24, 0x0E	; 14
     54a:	91 e0       	ldi	r25, 0x01	; 1
     54c:	8f 93       	push	r24
     54e:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <printf>
     552:	0f 90       	pop	r0
     554:	0f 90       	pop	r0
     556:	0f 90       	pop	r0
     558:	0f 90       	pop	r0
     55a:	0f 90       	pop	r0
     55c:	0f 90       	pop	r0
			USART_Transmit(0x0A);
     55e:	8a e0       	ldi	r24, 0x0A	; 10
     560:	0e 94 b4 02 	call	0x568	; 0x568 <USART_Transmit>
		}


	}
     564:	63 cf       	rjmp	.-314    	; 0x42c <main+0xa6>
     566:	62 cf       	rjmp	.-316    	; 0x42c <main+0xa6>

00000568 <USART_Transmit>:
#define convert2ASCII_hex(byte){	\
	if(byte <= 0x09){byte += 0x30;}			\
	else if(byte <= 0x0F){byte += 0x37;};	\
}

void USART_Transmit(unsigned char data){
     568:	cf 93       	push	r28
     56a:	df 93       	push	r29
     56c:	1f 92       	push	r1
     56e:	cd b7       	in	r28, 0x3d	; 61
     570:	de b7       	in	r29, 0x3e	; 62
     572:	89 83       	std	Y+1, r24	; 0x01
	/* While the transmit buffer is not empty (UDRE0 flag in UCSR0A)	*/
	while( !(UCSR0A & (1 << UDRE0)) ){};
     574:	00 00       	nop
     576:	80 ec       	ldi	r24, 0xC0	; 192
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	fc 01       	movw	r30, r24
     57c:	80 81       	ld	r24, Z
     57e:	88 2f       	mov	r24, r24
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	80 72       	andi	r24, 0x20	; 32
     584:	99 27       	eor	r25, r25
     586:	00 97       	sbiw	r24, 0x00	; 0
     588:	b1 f3       	breq	.-20     	; 0x576 <USART_Transmit+0xe>
	/* Write the data into the USART Data I/O register	*/
	UDR0 = data;
     58a:	86 ec       	ldi	r24, 0xC6	; 198
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	29 81       	ldd	r18, Y+1	; 0x01
     590:	fc 01       	movw	r30, r24
     592:	20 83       	st	Z, r18
}
     594:	0f 90       	pop	r0
     596:	df 91       	pop	r29
     598:	cf 91       	pop	r28
     59a:	08 95       	ret

0000059c <USART_init>:


void USART_init(unsigned int br){
     59c:	cf 93       	push	r28
     59e:	df 93       	push	r29
     5a0:	cd b7       	in	r28, 0x3d	; 61
     5a2:	de b7       	in	r29, 0x3e	; 62
     5a4:	28 97       	sbiw	r28, 0x08	; 8
     5a6:	0f b6       	in	r0, 0x3f	; 63
     5a8:	f8 94       	cli
     5aa:	de bf       	out	0x3e, r29	; 62
     5ac:	0f be       	out	0x3f, r0	; 63
     5ae:	cd bf       	out	0x3d, r28	; 61
     5b0:	9c 83       	std	Y+4, r25	; 0x04
     5b2:	8b 83       	std	Y+3, r24	; 0x03
	unsigned int ubrr = 16000000/16/br - 1;
     5b4:	8b 81       	ldd	r24, Y+3	; 0x03
     5b6:	9c 81       	ldd	r25, Y+4	; 0x04
     5b8:	9c 01       	movw	r18, r24
     5ba:	40 e0       	ldi	r20, 0x00	; 0
     5bc:	50 e0       	ldi	r21, 0x00	; 0
     5be:	80 e4       	ldi	r24, 0x40	; 64
     5c0:	92 e4       	ldi	r25, 0x42	; 66
     5c2:	af e0       	ldi	r26, 0x0F	; 15
     5c4:	b0 e0       	ldi	r27, 0x00	; 0
     5c6:	bc 01       	movw	r22, r24
     5c8:	cd 01       	movw	r24, r26
     5ca:	0e 94 1f 09 	call	0x123e	; 0x123e <__divmodsi4>
     5ce:	da 01       	movw	r26, r20
     5d0:	c9 01       	movw	r24, r18
     5d2:	01 97       	sbiw	r24, 0x01	; 1
     5d4:	9a 83       	std	Y+2, r25	; 0x02
     5d6:	89 83       	std	Y+1, r24	; 0x01
	// Settin Baud Rate to br
	UBRR0H = (unsigned char) (ubrr >> 8);
     5d8:	85 ec       	ldi	r24, 0xC5	; 197
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	29 81       	ldd	r18, Y+1	; 0x01
     5de:	3a 81       	ldd	r19, Y+2	; 0x02
     5e0:	23 2f       	mov	r18, r19
     5e2:	33 27       	eor	r19, r19
     5e4:	fc 01       	movw	r30, r24
     5e6:	20 83       	st	Z, r18
	UBRR0L = (unsigned char) ubrr;
     5e8:	84 ec       	ldi	r24, 0xC4	; 196
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	29 81       	ldd	r18, Y+1	; 0x01
     5ee:	fc 01       	movw	r30, r24
     5f0:	20 83       	st	Z, r18

	// Enabling Receive (RXEN0) and transmit (TXEN0) and
	// the RX Complete Interrupt in the USART
	//Control and Status Register 0B
	UCSR0B = (1 << RXEN0) | ( 1 << TXEN0 ) | ( 1 << RXCIE0);
     5f2:	81 ec       	ldi	r24, 0xC1	; 193
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	28 e9       	ldi	r18, 0x98	; 152
     5f8:	fc 01       	movw	r30, r24
     5fa:	20 83       	st	Z, r18

	// Setting frame format:
			// 2 stop bits		8 bit
	UCSR0C = (1 << USBS0) | (3 << UCSZ00);
     5fc:	82 ec       	ldi	r24, 0xC2	; 194
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	2e e0       	ldi	r18, 0x0E	; 14
     602:	fc 01       	movw	r30, r24
     604:	20 83       	st	Z, r18
}
     606:	28 96       	adiw	r28, 0x08	; 8
     608:	0f b6       	in	r0, 0x3f	; 63
     60a:	f8 94       	cli
     60c:	de bf       	out	0x3e, r29	; 62
     60e:	0f be       	out	0x3f, r0	; 63
     610:	cd bf       	out	0x3d, r28	; 61
     612:	df 91       	pop	r29
     614:	cf 91       	pop	r28
     616:	08 95       	ret

00000618 <USART_Transmit_32_hex>:


void USART_Transmit_32_hex(long data32bit){
     618:	cf 93       	push	r28
     61a:	df 93       	push	r29
     61c:	cd b7       	in	r28, 0x3d	; 61
     61e:	de b7       	in	r29, 0x3e	; 62
     620:	60 97       	sbiw	r28, 0x10	; 16
     622:	0f b6       	in	r0, 0x3f	; 63
     624:	f8 94       	cli
     626:	de bf       	out	0x3e, r29	; 62
     628:	0f be       	out	0x3f, r0	; 63
     62a:	cd bf       	out	0x3d, r28	; 61
     62c:	6d 87       	std	Y+13, r22	; 0x0d
     62e:	7e 87       	std	Y+14, r23	; 0x0e
     630:	8f 87       	std	Y+15, r24	; 0x0f
     632:	98 8b       	std	Y+16, r25	; 0x10
	unsigned char N[8];
	unsigned char *ptr = &N[0];
     634:	ce 01       	movw	r24, r28
     636:	05 96       	adiw	r24, 0x05	; 5
     638:	9a 83       	std	Y+2, r25	; 0x02
     63a:	89 83       	std	Y+1, r24	; 0x01
	for (uint8_t i = 0; i < 8; i++){
     63c:	1b 82       	std	Y+3, r1	; 0x03
     63e:	21 c0       	rjmp	.+66     	; 0x682 <USART_Transmit_32_hex+0x6a>
		N[i] = ((data32bit >> 4*i) & 0xF);
     640:	8b 81       	ldd	r24, Y+3	; 0x03
     642:	28 2f       	mov	r18, r24
     644:	30 e0       	ldi	r19, 0x00	; 0
     646:	8b 81       	ldd	r24, Y+3	; 0x03
     648:	88 2f       	mov	r24, r24
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	ac 01       	movw	r20, r24
     64e:	44 0f       	add	r20, r20
     650:	55 1f       	adc	r21, r21
     652:	44 0f       	add	r20, r20
     654:	55 1f       	adc	r21, r21
     656:	8d 85       	ldd	r24, Y+13	; 0x0d
     658:	9e 85       	ldd	r25, Y+14	; 0x0e
     65a:	af 85       	ldd	r26, Y+15	; 0x0f
     65c:	b8 89       	ldd	r27, Y+16	; 0x10
     65e:	04 c0       	rjmp	.+8      	; 0x668 <USART_Transmit_32_hex+0x50>
     660:	b5 95       	asr	r27
     662:	a7 95       	ror	r26
     664:	97 95       	ror	r25
     666:	87 95       	ror	r24
     668:	4a 95       	dec	r20
     66a:	d2 f7       	brpl	.-12     	; 0x660 <USART_Transmit_32_hex+0x48>
     66c:	48 2f       	mov	r20, r24
     66e:	4f 70       	andi	r20, 0x0F	; 15
     670:	ce 01       	movw	r24, r28
     672:	05 96       	adiw	r24, 0x05	; 5
     674:	82 0f       	add	r24, r18
     676:	93 1f       	adc	r25, r19
     678:	fc 01       	movw	r30, r24
     67a:	40 83       	st	Z, r20


void USART_Transmit_32_hex(long data32bit){
	unsigned char N[8];
	unsigned char *ptr = &N[0];
	for (uint8_t i = 0; i < 8; i++){
     67c:	8b 81       	ldd	r24, Y+3	; 0x03
     67e:	8f 5f       	subi	r24, 0xFF	; 255
     680:	8b 83       	std	Y+3, r24	; 0x03
     682:	8b 81       	ldd	r24, Y+3	; 0x03
     684:	88 30       	cpi	r24, 0x08	; 8
     686:	e0 f2       	brcs	.-72     	; 0x640 <USART_Transmit_32_hex+0x28>
		N[i] = ((data32bit >> 4*i) & 0xF);
	}
	for (unsigned char i = 0; i < 8; i++){
     688:	1c 82       	std	Y+4, r1	; 0x04
     68a:	36 c0       	rjmp	.+108    	; 0x6f8 <USART_Transmit_32_hex+0xe0>
		convert2ASCII_hex(*(ptr+7))	// The MSN is last in the memory so we loop backwards
     68c:	89 81       	ldd	r24, Y+1	; 0x01
     68e:	9a 81       	ldd	r25, Y+2	; 0x02
     690:	07 96       	adiw	r24, 0x07	; 7
     692:	fc 01       	movw	r30, r24
     694:	80 81       	ld	r24, Z
     696:	8a 30       	cpi	r24, 0x0A	; 10
     698:	68 f4       	brcc	.+26     	; 0x6b4 <USART_Transmit_32_hex+0x9c>
     69a:	89 81       	ldd	r24, Y+1	; 0x01
     69c:	9a 81       	ldd	r25, Y+2	; 0x02
     69e:	07 96       	adiw	r24, 0x07	; 7
     6a0:	29 81       	ldd	r18, Y+1	; 0x01
     6a2:	3a 81       	ldd	r19, Y+2	; 0x02
     6a4:	29 5f       	subi	r18, 0xF9	; 249
     6a6:	3f 4f       	sbci	r19, 0xFF	; 255
     6a8:	f9 01       	movw	r30, r18
     6aa:	20 81       	ld	r18, Z
     6ac:	20 5d       	subi	r18, 0xD0	; 208
     6ae:	fc 01       	movw	r30, r24
     6b0:	20 83       	st	Z, r18
     6b2:	13 c0       	rjmp	.+38     	; 0x6da <USART_Transmit_32_hex+0xc2>
     6b4:	89 81       	ldd	r24, Y+1	; 0x01
     6b6:	9a 81       	ldd	r25, Y+2	; 0x02
     6b8:	07 96       	adiw	r24, 0x07	; 7
     6ba:	fc 01       	movw	r30, r24
     6bc:	80 81       	ld	r24, Z
     6be:	80 31       	cpi	r24, 0x10	; 16
     6c0:	60 f4       	brcc	.+24     	; 0x6da <USART_Transmit_32_hex+0xc2>
     6c2:	89 81       	ldd	r24, Y+1	; 0x01
     6c4:	9a 81       	ldd	r25, Y+2	; 0x02
     6c6:	07 96       	adiw	r24, 0x07	; 7
     6c8:	29 81       	ldd	r18, Y+1	; 0x01
     6ca:	3a 81       	ldd	r19, Y+2	; 0x02
     6cc:	29 5f       	subi	r18, 0xF9	; 249
     6ce:	3f 4f       	sbci	r19, 0xFF	; 255
     6d0:	f9 01       	movw	r30, r18
     6d2:	20 81       	ld	r18, Z
     6d4:	29 5c       	subi	r18, 0xC9	; 201
     6d6:	fc 01       	movw	r30, r24
     6d8:	20 83       	st	Z, r18
		USART_Transmit(*(ptr+7));
     6da:	89 81       	ldd	r24, Y+1	; 0x01
     6dc:	9a 81       	ldd	r25, Y+2	; 0x02
     6de:	07 96       	adiw	r24, 0x07	; 7
     6e0:	fc 01       	movw	r30, r24
     6e2:	80 81       	ld	r24, Z
     6e4:	0e 94 b4 02 	call	0x568	; 0x568 <USART_Transmit>
		ptr--;
     6e8:	89 81       	ldd	r24, Y+1	; 0x01
     6ea:	9a 81       	ldd	r25, Y+2	; 0x02
     6ec:	01 97       	sbiw	r24, 0x01	; 1
     6ee:	9a 83       	std	Y+2, r25	; 0x02
     6f0:	89 83       	std	Y+1, r24	; 0x01
	unsigned char N[8];
	unsigned char *ptr = &N[0];
	for (uint8_t i = 0; i < 8; i++){
		N[i] = ((data32bit >> 4*i) & 0xF);
	}
	for (unsigned char i = 0; i < 8; i++){
     6f2:	8c 81       	ldd	r24, Y+4	; 0x04
     6f4:	8f 5f       	subi	r24, 0xFF	; 255
     6f6:	8c 83       	std	Y+4, r24	; 0x04
     6f8:	8c 81       	ldd	r24, Y+4	; 0x04
     6fa:	88 30       	cpi	r24, 0x08	; 8
     6fc:	38 f2       	brcs	.-114    	; 0x68c <USART_Transmit_32_hex+0x74>
		convert2ASCII_hex(*(ptr+7))	// The MSN is last in the memory so we loop backwards
		USART_Transmit(*(ptr+7));
		ptr--;
	}
	USART_Transmit(0x0A);
     6fe:	8a e0       	ldi	r24, 0x0A	; 10
     700:	0e 94 b4 02 	call	0x568	; 0x568 <USART_Transmit>
}
     704:	60 96       	adiw	r28, 0x10	; 16
     706:	0f b6       	in	r0, 0x3f	; 63
     708:	f8 94       	cli
     70a:	de bf       	out	0x3e, r29	; 62
     70c:	0f be       	out	0x3f, r0	; 63
     70e:	cd bf       	out	0x3d, r28	; 61
     710:	df 91       	pop	r29
     712:	cf 91       	pop	r28
     714:	08 95       	ret

00000716 <USART_Transmit_16_hex>:


void USART_Transmit_16_hex(int data16bit){
     716:	cf 93       	push	r28
     718:	df 93       	push	r29
     71a:	00 d0       	rcall	.+0      	; 0x71c <USART_Transmit_16_hex+0x6>
     71c:	00 d0       	rcall	.+0      	; 0x71e <USART_Transmit_16_hex+0x8>
     71e:	00 d0       	rcall	.+0      	; 0x720 <USART_Transmit_16_hex+0xa>
     720:	cd b7       	in	r28, 0x3d	; 61
     722:	de b7       	in	r29, 0x3e	; 62
     724:	9e 83       	std	Y+6, r25	; 0x06
     726:	8d 83       	std	Y+5, r24	; 0x05
	unsigned char N_1 = (data16bit & 0x000F);
     728:	8d 81       	ldd	r24, Y+5	; 0x05
     72a:	8f 70       	andi	r24, 0x0F	; 15
     72c:	89 83       	std	Y+1, r24	; 0x01
	unsigned char N_2 = ((data16bit >> 4 ) & 0x000F);
     72e:	8d 81       	ldd	r24, Y+5	; 0x05
     730:	9e 81       	ldd	r25, Y+6	; 0x06
     732:	95 95       	asr	r25
     734:	87 95       	ror	r24
     736:	95 95       	asr	r25
     738:	87 95       	ror	r24
     73a:	95 95       	asr	r25
     73c:	87 95       	ror	r24
     73e:	95 95       	asr	r25
     740:	87 95       	ror	r24
     742:	8f 70       	andi	r24, 0x0F	; 15
     744:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char N_3 = ((data16bit >> 8 ) & 0x000F);
     746:	8d 81       	ldd	r24, Y+5	; 0x05
     748:	9e 81       	ldd	r25, Y+6	; 0x06
     74a:	89 2f       	mov	r24, r25
     74c:	99 0f       	add	r25, r25
     74e:	99 0b       	sbc	r25, r25
     750:	8f 70       	andi	r24, 0x0F	; 15
     752:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char N_4 = ((data16bit >> 12 ) & 0x000F);
     754:	8d 81       	ldd	r24, Y+5	; 0x05
     756:	9e 81       	ldd	r25, Y+6	; 0x06
     758:	89 2f       	mov	r24, r25
     75a:	99 27       	eor	r25, r25
     75c:	82 95       	swap	r24
     75e:	8f 70       	andi	r24, 0x0F	; 15
     760:	8c 83       	std	Y+4, r24	; 0x04

	convert2ASCII_hex(N_1);
     762:	89 81       	ldd	r24, Y+1	; 0x01
     764:	8a 30       	cpi	r24, 0x0A	; 10
     766:	20 f4       	brcc	.+8      	; 0x770 <USART_Transmit_16_hex+0x5a>
     768:	89 81       	ldd	r24, Y+1	; 0x01
     76a:	80 5d       	subi	r24, 0xD0	; 208
     76c:	89 83       	std	Y+1, r24	; 0x01
     76e:	06 c0       	rjmp	.+12     	; 0x77c <USART_Transmit_16_hex+0x66>
     770:	89 81       	ldd	r24, Y+1	; 0x01
     772:	80 31       	cpi	r24, 0x10	; 16
     774:	18 f4       	brcc	.+6      	; 0x77c <USART_Transmit_16_hex+0x66>
     776:	89 81       	ldd	r24, Y+1	; 0x01
     778:	89 5c       	subi	r24, 0xC9	; 201
     77a:	89 83       	std	Y+1, r24	; 0x01
	convert2ASCII_hex(N_2);
     77c:	8a 81       	ldd	r24, Y+2	; 0x02
     77e:	8a 30       	cpi	r24, 0x0A	; 10
     780:	20 f4       	brcc	.+8      	; 0x78a <USART_Transmit_16_hex+0x74>
     782:	8a 81       	ldd	r24, Y+2	; 0x02
     784:	80 5d       	subi	r24, 0xD0	; 208
     786:	8a 83       	std	Y+2, r24	; 0x02
     788:	06 c0       	rjmp	.+12     	; 0x796 <USART_Transmit_16_hex+0x80>
     78a:	8a 81       	ldd	r24, Y+2	; 0x02
     78c:	80 31       	cpi	r24, 0x10	; 16
     78e:	18 f4       	brcc	.+6      	; 0x796 <USART_Transmit_16_hex+0x80>
     790:	8a 81       	ldd	r24, Y+2	; 0x02
     792:	89 5c       	subi	r24, 0xC9	; 201
     794:	8a 83       	std	Y+2, r24	; 0x02
	convert2ASCII_hex(N_3);
     796:	8b 81       	ldd	r24, Y+3	; 0x03
     798:	8a 30       	cpi	r24, 0x0A	; 10
     79a:	20 f4       	brcc	.+8      	; 0x7a4 <USART_Transmit_16_hex+0x8e>
     79c:	8b 81       	ldd	r24, Y+3	; 0x03
     79e:	80 5d       	subi	r24, 0xD0	; 208
     7a0:	8b 83       	std	Y+3, r24	; 0x03
     7a2:	06 c0       	rjmp	.+12     	; 0x7b0 <USART_Transmit_16_hex+0x9a>
     7a4:	8b 81       	ldd	r24, Y+3	; 0x03
     7a6:	80 31       	cpi	r24, 0x10	; 16
     7a8:	18 f4       	brcc	.+6      	; 0x7b0 <USART_Transmit_16_hex+0x9a>
     7aa:	8b 81       	ldd	r24, Y+3	; 0x03
     7ac:	89 5c       	subi	r24, 0xC9	; 201
     7ae:	8b 83       	std	Y+3, r24	; 0x03
	convert2ASCII_hex(N_4);
     7b0:	8c 81       	ldd	r24, Y+4	; 0x04
     7b2:	8a 30       	cpi	r24, 0x0A	; 10
     7b4:	20 f4       	brcc	.+8      	; 0x7be <USART_Transmit_16_hex+0xa8>
     7b6:	8c 81       	ldd	r24, Y+4	; 0x04
     7b8:	80 5d       	subi	r24, 0xD0	; 208
     7ba:	8c 83       	std	Y+4, r24	; 0x04
     7bc:	06 c0       	rjmp	.+12     	; 0x7ca <USART_Transmit_16_hex+0xb4>
     7be:	8c 81       	ldd	r24, Y+4	; 0x04
     7c0:	80 31       	cpi	r24, 0x10	; 16
     7c2:	18 f4       	brcc	.+6      	; 0x7ca <USART_Transmit_16_hex+0xb4>
     7c4:	8c 81       	ldd	r24, Y+4	; 0x04
     7c6:	89 5c       	subi	r24, 0xC9	; 201
     7c8:	8c 83       	std	Y+4, r24	; 0x04

	USART_Transmit('0');
     7ca:	80 e3       	ldi	r24, 0x30	; 48
     7cc:	0e 94 b4 02 	call	0x568	; 0x568 <USART_Transmit>
	USART_Transmit('x');
     7d0:	88 e7       	ldi	r24, 0x78	; 120
     7d2:	0e 94 b4 02 	call	0x568	; 0x568 <USART_Transmit>

	USART_Transmit(N_4);
     7d6:	8c 81       	ldd	r24, Y+4	; 0x04
     7d8:	0e 94 b4 02 	call	0x568	; 0x568 <USART_Transmit>
	USART_Transmit(N_3);
     7dc:	8b 81       	ldd	r24, Y+3	; 0x03
     7de:	0e 94 b4 02 	call	0x568	; 0x568 <USART_Transmit>
	USART_Transmit(N_2);
     7e2:	8a 81       	ldd	r24, Y+2	; 0x02
     7e4:	0e 94 b4 02 	call	0x568	; 0x568 <USART_Transmit>
	USART_Transmit(N_1);
     7e8:	89 81       	ldd	r24, Y+1	; 0x01
     7ea:	0e 94 b4 02 	call	0x568	; 0x568 <USART_Transmit>
	USART_Transmit(0x0A);
     7ee:	8a e0       	ldi	r24, 0x0A	; 10
     7f0:	0e 94 b4 02 	call	0x568	; 0x568 <USART_Transmit>
}
     7f4:	26 96       	adiw	r28, 0x06	; 6
     7f6:	0f b6       	in	r0, 0x3f	; 63
     7f8:	f8 94       	cli
     7fa:	de bf       	out	0x3e, r29	; 62
     7fc:	0f be       	out	0x3f, r0	; 63
     7fe:	cd bf       	out	0x3d, r28	; 61
     800:	df 91       	pop	r29
     802:	cf 91       	pop	r28
     804:	08 95       	ret

00000806 <USART_Transmit_8_hex>:



void USART_Transmit_8_hex(unsigned char byte){
     806:	cf 93       	push	r28
     808:	df 93       	push	r29
     80a:	00 d0       	rcall	.+0      	; 0x80c <USART_Transmit_8_hex+0x6>
     80c:	1f 92       	push	r1
     80e:	cd b7       	in	r28, 0x3d	; 61
     810:	de b7       	in	r29, 0x3e	; 62
     812:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char LSN = (byte & 0x0F);
     814:	8b 81       	ldd	r24, Y+3	; 0x03
     816:	8f 70       	andi	r24, 0x0F	; 15
     818:	89 83       	std	Y+1, r24	; 0x01
	unsigned char MSN = ((byte >> 4) & 0x0F);
     81a:	8b 81       	ldd	r24, Y+3	; 0x03
     81c:	82 95       	swap	r24
     81e:	8f 70       	andi	r24, 0x0F	; 15
     820:	8a 83       	std	Y+2, r24	; 0x02

	convert2ASCII_hex(LSN);
     822:	89 81       	ldd	r24, Y+1	; 0x01
     824:	8a 30       	cpi	r24, 0x0A	; 10
     826:	20 f4       	brcc	.+8      	; 0x830 <USART_Transmit_8_hex+0x2a>
     828:	89 81       	ldd	r24, Y+1	; 0x01
     82a:	80 5d       	subi	r24, 0xD0	; 208
     82c:	89 83       	std	Y+1, r24	; 0x01
     82e:	06 c0       	rjmp	.+12     	; 0x83c <USART_Transmit_8_hex+0x36>
     830:	89 81       	ldd	r24, Y+1	; 0x01
     832:	80 31       	cpi	r24, 0x10	; 16
     834:	18 f4       	brcc	.+6      	; 0x83c <USART_Transmit_8_hex+0x36>
     836:	89 81       	ldd	r24, Y+1	; 0x01
     838:	89 5c       	subi	r24, 0xC9	; 201
     83a:	89 83       	std	Y+1, r24	; 0x01
	convert2ASCII_hex(MSN);
     83c:	8a 81       	ldd	r24, Y+2	; 0x02
     83e:	8a 30       	cpi	r24, 0x0A	; 10
     840:	20 f4       	brcc	.+8      	; 0x84a <USART_Transmit_8_hex+0x44>
     842:	8a 81       	ldd	r24, Y+2	; 0x02
     844:	80 5d       	subi	r24, 0xD0	; 208
     846:	8a 83       	std	Y+2, r24	; 0x02
     848:	06 c0       	rjmp	.+12     	; 0x856 <USART_Transmit_8_hex+0x50>
     84a:	8a 81       	ldd	r24, Y+2	; 0x02
     84c:	80 31       	cpi	r24, 0x10	; 16
     84e:	18 f4       	brcc	.+6      	; 0x856 <USART_Transmit_8_hex+0x50>
     850:	8a 81       	ldd	r24, Y+2	; 0x02
     852:	89 5c       	subi	r24, 0xC9	; 201
     854:	8a 83       	std	Y+2, r24	; 0x02

	USART_Transmit('0');
     856:	80 e3       	ldi	r24, 0x30	; 48
     858:	0e 94 b4 02 	call	0x568	; 0x568 <USART_Transmit>
	USART_Transmit('x');
     85c:	88 e7       	ldi	r24, 0x78	; 120
     85e:	0e 94 b4 02 	call	0x568	; 0x568 <USART_Transmit>
	USART_Transmit(MSN);
     862:	8a 81       	ldd	r24, Y+2	; 0x02
     864:	0e 94 b4 02 	call	0x568	; 0x568 <USART_Transmit>
	USART_Transmit(LSN);
     868:	89 81       	ldd	r24, Y+1	; 0x01
     86a:	0e 94 b4 02 	call	0x568	; 0x568 <USART_Transmit>
	USART_Transmit(0x0A);
     86e:	8a e0       	ldi	r24, 0x0A	; 10
     870:	0e 94 b4 02 	call	0x568	; 0x568 <USART_Transmit>
}
     874:	0f 90       	pop	r0
     876:	0f 90       	pop	r0
     878:	0f 90       	pop	r0
     87a:	df 91       	pop	r29
     87c:	cf 91       	pop	r28
     87e:	08 95       	ret

00000880 <USART_Transmit_8_dec>:

void USART_Transmit_8_dec(unsigned char byte){
     880:	cf 93       	push	r28
     882:	df 93       	push	r29
     884:	00 d0       	rcall	.+0      	; 0x886 <USART_Transmit_8_dec+0x6>
     886:	00 d0       	rcall	.+0      	; 0x888 <USART_Transmit_8_dec+0x8>
     888:	1f 92       	push	r1
     88a:	cd b7       	in	r28, 0x3d	; 61
     88c:	de b7       	in	r29, 0x3e	; 62
     88e:	89 83       	std	Y+1, r24	; 0x01
	if(byte < 10){
     890:	89 81       	ldd	r24, Y+1	; 0x01
     892:	8a 30       	cpi	r24, 0x0A	; 10
     894:	40 f4       	brcc	.+16     	; 0x8a6 <USART_Transmit_8_dec+0x26>
		USART_Transmit(byte + 48);
     896:	89 81       	ldd	r24, Y+1	; 0x01
     898:	80 5d       	subi	r24, 0xD0	; 208
     89a:	0e 94 b4 02 	call	0x568	; 0x568 <USART_Transmit>
		USART_Transmit(0x0A);
     89e:	8a e0       	ldi	r24, 0x0A	; 10
     8a0:	0e 94 b4 02 	call	0x568	; 0x568 <USART_Transmit>
     8a4:	6f c0       	rjmp	.+222    	; 0x984 <__stack+0x85>
	}
	else if(byte < 100){
     8a6:	89 81       	ldd	r24, Y+1	; 0x01
     8a8:	84 36       	cpi	r24, 0x64	; 100
     8aa:	10 f5       	brcc	.+68     	; 0x8f0 <USART_Transmit_8_dec+0x70>
		USART_Transmit((byte / 10) + 48);
     8ac:	99 81       	ldd	r25, Y+1	; 0x01
     8ae:	8d ec       	ldi	r24, 0xCD	; 205
     8b0:	98 9f       	mul	r25, r24
     8b2:	81 2d       	mov	r24, r1
     8b4:	11 24       	eor	r1, r1
     8b6:	86 95       	lsr	r24
     8b8:	86 95       	lsr	r24
     8ba:	86 95       	lsr	r24
     8bc:	80 5d       	subi	r24, 0xD0	; 208
     8be:	0e 94 b4 02 	call	0x568	; 0x568 <USART_Transmit>
		USART_Transmit((byte % 10) + 48);
     8c2:	99 81       	ldd	r25, Y+1	; 0x01
     8c4:	8d ec       	ldi	r24, 0xCD	; 205
     8c6:	98 9f       	mul	r25, r24
     8c8:	81 2d       	mov	r24, r1
     8ca:	11 24       	eor	r1, r1
     8cc:	86 95       	lsr	r24
     8ce:	86 95       	lsr	r24
     8d0:	86 95       	lsr	r24
     8d2:	88 0f       	add	r24, r24
     8d4:	28 2f       	mov	r18, r24
     8d6:	22 0f       	add	r18, r18
     8d8:	22 0f       	add	r18, r18
     8da:	82 0f       	add	r24, r18
     8dc:	29 2f       	mov	r18, r25
     8de:	28 1b       	sub	r18, r24
     8e0:	82 2f       	mov	r24, r18
     8e2:	80 5d       	subi	r24, 0xD0	; 208
     8e4:	0e 94 b4 02 	call	0x568	; 0x568 <USART_Transmit>
		USART_Transmit(0x0A);
     8e8:	8a e0       	ldi	r24, 0x0A	; 10
     8ea:	0e 94 b4 02 	call	0x568	; 0x568 <USART_Transmit>
     8ee:	4a c0       	rjmp	.+148    	; 0x984 <__stack+0x85>
	}
	else if(byte >= 100){
     8f0:	89 81       	ldd	r24, Y+1	; 0x01
     8f2:	84 36       	cpi	r24, 0x64	; 100
     8f4:	08 f4       	brcc	.+2      	; 0x8f8 <USART_Transmit_8_dec+0x78>
     8f6:	46 c0       	rjmp	.+140    	; 0x984 <__stack+0x85>
		USART_Transmit((byte / 100) + 48);
     8f8:	99 81       	ldd	r25, Y+1	; 0x01
     8fa:	89 e2       	ldi	r24, 0x29	; 41
     8fc:	98 9f       	mul	r25, r24
     8fe:	81 2d       	mov	r24, r1
     900:	11 24       	eor	r1, r1
     902:	82 95       	swap	r24
     904:	8f 70       	andi	r24, 0x0F	; 15
     906:	80 5d       	subi	r24, 0xD0	; 208
     908:	0e 94 b4 02 	call	0x568	; 0x568 <USART_Transmit>
		USART_Transmit(((byte - (byte/100)*100) / 10) + 48);
     90c:	89 81       	ldd	r24, Y+1	; 0x01
     90e:	28 2f       	mov	r18, r24
     910:	30 e0       	ldi	r19, 0x00	; 0
     912:	99 81       	ldd	r25, Y+1	; 0x01
     914:	89 e2       	ldi	r24, 0x29	; 41
     916:	98 9f       	mul	r25, r24
     918:	81 2d       	mov	r24, r1
     91a:	11 24       	eor	r1, r1
     91c:	82 95       	swap	r24
     91e:	8f 70       	andi	r24, 0x0F	; 15
     920:	48 2f       	mov	r20, r24
     922:	50 e0       	ldi	r21, 0x00	; 0
     924:	6c e9       	ldi	r22, 0x9C	; 156
     926:	64 03       	mulsu	r22, r20
     928:	c0 01       	movw	r24, r0
     92a:	65 9f       	mul	r22, r21
     92c:	90 0d       	add	r25, r0
     92e:	11 24       	eor	r1, r1
     930:	82 0f       	add	r24, r18
     932:	93 1f       	adc	r25, r19
     934:	2a e0       	ldi	r18, 0x0A	; 10
     936:	30 e0       	ldi	r19, 0x00	; 0
     938:	b9 01       	movw	r22, r18
     93a:	0e 94 0b 09 	call	0x1216	; 0x1216 <__divmodhi4>
     93e:	cb 01       	movw	r24, r22
     940:	80 5d       	subi	r24, 0xD0	; 208
     942:	0e 94 b4 02 	call	0x568	; 0x568 <USART_Transmit>
		USART_Transmit(((byte - (byte/100)*100) % 10) + 48);
     946:	89 81       	ldd	r24, Y+1	; 0x01
     948:	28 2f       	mov	r18, r24
     94a:	30 e0       	ldi	r19, 0x00	; 0
     94c:	99 81       	ldd	r25, Y+1	; 0x01
     94e:	89 e2       	ldi	r24, 0x29	; 41
     950:	98 9f       	mul	r25, r24
     952:	81 2d       	mov	r24, r1
     954:	11 24       	eor	r1, r1
     956:	82 95       	swap	r24
     958:	8f 70       	andi	r24, 0x0F	; 15
     95a:	48 2f       	mov	r20, r24
     95c:	50 e0       	ldi	r21, 0x00	; 0
     95e:	6c e9       	ldi	r22, 0x9C	; 156
     960:	64 03       	mulsu	r22, r20
     962:	c0 01       	movw	r24, r0
     964:	65 9f       	mul	r22, r21
     966:	90 0d       	add	r25, r0
     968:	11 24       	eor	r1, r1
     96a:	82 0f       	add	r24, r18
     96c:	93 1f       	adc	r25, r19
     96e:	2a e0       	ldi	r18, 0x0A	; 10
     970:	30 e0       	ldi	r19, 0x00	; 0
     972:	b9 01       	movw	r22, r18
     974:	0e 94 0b 09 	call	0x1216	; 0x1216 <__divmodhi4>
     978:	80 5d       	subi	r24, 0xD0	; 208
     97a:	0e 94 b4 02 	call	0x568	; 0x568 <USART_Transmit>
		USART_Transmit(0x0A);
     97e:	8a e0       	ldi	r24, 0x0A	; 10
     980:	0e 94 b4 02 	call	0x568	; 0x568 <USART_Transmit>
	}
}
     984:	0f 90       	pop	r0
     986:	0f 90       	pop	r0
     988:	0f 90       	pop	r0
     98a:	0f 90       	pop	r0
     98c:	0f 90       	pop	r0
     98e:	df 91       	pop	r29
     990:	cf 91       	pop	r28
     992:	08 95       	ret

00000994 <USART_Transmit_16_dec>:

void USART_Transmit_16_dec(unsigned int word){
     994:	cf 93       	push	r28
     996:	df 93       	push	r29
     998:	00 d0       	rcall	.+0      	; 0x99a <USART_Transmit_16_dec+0x6>
     99a:	cd b7       	in	r28, 0x3d	; 61
     99c:	de b7       	in	r29, 0x3e	; 62
     99e:	9a 83       	std	Y+2, r25	; 0x02
     9a0:	89 83       	std	Y+1, r24	; 0x01
	if(word < 10){
     9a2:	89 81       	ldd	r24, Y+1	; 0x01
     9a4:	9a 81       	ldd	r25, Y+2	; 0x02
     9a6:	8a 30       	cpi	r24, 0x0A	; 10
     9a8:	91 05       	cpc	r25, r1
     9aa:	40 f4       	brcc	.+16     	; 0x9bc <USART_Transmit_16_dec+0x28>
		USART_Transmit(word + 48);
     9ac:	89 81       	ldd	r24, Y+1	; 0x01
     9ae:	80 5d       	subi	r24, 0xD0	; 208
     9b0:	0e 94 b4 02 	call	0x568	; 0x568 <USART_Transmit>
		USART_Transmit(0x0A);
     9b4:	8a e0       	ldi	r24, 0x0A	; 10
     9b6:	0e 94 b4 02 	call	0x568	; 0x568 <USART_Transmit>
     9ba:	c5 c1       	rjmp	.+906    	; 0xd46 <USART_Transmit_16_dec+0x3b2>
	}
	else if(word < 100){
     9bc:	89 81       	ldd	r24, Y+1	; 0x01
     9be:	9a 81       	ldd	r25, Y+2	; 0x02
     9c0:	84 36       	cpi	r24, 0x64	; 100
     9c2:	91 05       	cpc	r25, r1
     9c4:	88 f5       	brcc	.+98     	; 0xa28 <USART_Transmit_16_dec+0x94>
		USART_Transmit((word / 10) + 48);
     9c6:	89 81       	ldd	r24, Y+1	; 0x01
     9c8:	9a 81       	ldd	r25, Y+2	; 0x02
     9ca:	9c 01       	movw	r18, r24
     9cc:	ad ec       	ldi	r26, 0xCD	; 205
     9ce:	bc ec       	ldi	r27, 0xCC	; 204
     9d0:	0e 94 3e 09 	call	0x127c	; 0x127c <__umulhisi3>
     9d4:	96 95       	lsr	r25
     9d6:	87 95       	ror	r24
     9d8:	96 95       	lsr	r25
     9da:	87 95       	ror	r24
     9dc:	96 95       	lsr	r25
     9de:	87 95       	ror	r24
     9e0:	80 5d       	subi	r24, 0xD0	; 208
     9e2:	0e 94 b4 02 	call	0x568	; 0x568 <USART_Transmit>
		USART_Transmit((word % 10) + 48);
     9e6:	49 81       	ldd	r20, Y+1	; 0x01
     9e8:	5a 81       	ldd	r21, Y+2	; 0x02
     9ea:	9a 01       	movw	r18, r20
     9ec:	ad ec       	ldi	r26, 0xCD	; 205
     9ee:	bc ec       	ldi	r27, 0xCC	; 204
     9f0:	0e 94 3e 09 	call	0x127c	; 0x127c <__umulhisi3>
     9f4:	96 95       	lsr	r25
     9f6:	87 95       	ror	r24
     9f8:	96 95       	lsr	r25
     9fa:	87 95       	ror	r24
     9fc:	96 95       	lsr	r25
     9fe:	87 95       	ror	r24
     a00:	88 0f       	add	r24, r24
     a02:	99 1f       	adc	r25, r25
     a04:	9c 01       	movw	r18, r24
     a06:	22 0f       	add	r18, r18
     a08:	33 1f       	adc	r19, r19
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	82 0f       	add	r24, r18
     a10:	93 1f       	adc	r25, r19
     a12:	9a 01       	movw	r18, r20
     a14:	28 1b       	sub	r18, r24
     a16:	39 0b       	sbc	r19, r25
     a18:	c9 01       	movw	r24, r18
     a1a:	80 5d       	subi	r24, 0xD0	; 208
     a1c:	0e 94 b4 02 	call	0x568	; 0x568 <USART_Transmit>
		USART_Transmit(0x0A);
     a20:	8a e0       	ldi	r24, 0x0A	; 10
     a22:	0e 94 b4 02 	call	0x568	; 0x568 <USART_Transmit>
     a26:	8f c1       	rjmp	.+798    	; 0xd46 <USART_Transmit_16_dec+0x3b2>
	}
	else if(word < 1000){
     a28:	89 81       	ldd	r24, Y+1	; 0x01
     a2a:	9a 81       	ldd	r25, Y+2	; 0x02
     a2c:	88 3e       	cpi	r24, 0xE8	; 232
     a2e:	33 e0       	ldi	r19, 0x03	; 3
     a30:	93 07       	cpc	r25, r19
     a32:	08 f0       	brcs	.+2      	; 0xa36 <USART_Transmit_16_dec+0xa2>
     a34:	6c c0       	rjmp	.+216    	; 0xb0e <USART_Transmit_16_dec+0x17a>
		USART_Transmit((word / 100) + 48);
     a36:	89 81       	ldd	r24, Y+1	; 0x01
     a38:	9a 81       	ldd	r25, Y+2	; 0x02
     a3a:	96 95       	lsr	r25
     a3c:	87 95       	ror	r24
     a3e:	96 95       	lsr	r25
     a40:	87 95       	ror	r24
     a42:	9c 01       	movw	r18, r24
     a44:	ab e7       	ldi	r26, 0x7B	; 123
     a46:	b4 e1       	ldi	r27, 0x14	; 20
     a48:	0e 94 3e 09 	call	0x127c	; 0x127c <__umulhisi3>
     a4c:	96 95       	lsr	r25
     a4e:	87 95       	ror	r24
     a50:	80 5d       	subi	r24, 0xD0	; 208
     a52:	0e 94 b4 02 	call	0x568	; 0x568 <USART_Transmit>
		USART_Transmit(((word - (word/100)*100) / 10) + 48);
     a56:	49 81       	ldd	r20, Y+1	; 0x01
     a58:	5a 81       	ldd	r21, Y+2	; 0x02
     a5a:	ca 01       	movw	r24, r20
     a5c:	96 95       	lsr	r25
     a5e:	87 95       	ror	r24
     a60:	96 95       	lsr	r25
     a62:	87 95       	ror	r24
     a64:	9c 01       	movw	r18, r24
     a66:	ab e7       	ldi	r26, 0x7B	; 123
     a68:	b4 e1       	ldi	r27, 0x14	; 20
     a6a:	0e 94 3e 09 	call	0x127c	; 0x127c <__umulhisi3>
     a6e:	96 95       	lsr	r25
     a70:	87 95       	ror	r24
     a72:	64 e6       	ldi	r22, 0x64	; 100
     a74:	68 9f       	mul	r22, r24
     a76:	90 01       	movw	r18, r0
     a78:	69 9f       	mul	r22, r25
     a7a:	30 0d       	add	r19, r0
     a7c:	11 24       	eor	r1, r1
     a7e:	ca 01       	movw	r24, r20
     a80:	82 1b       	sub	r24, r18
     a82:	93 0b       	sbc	r25, r19
     a84:	9c 01       	movw	r18, r24
     a86:	ad ec       	ldi	r26, 0xCD	; 205
     a88:	bc ec       	ldi	r27, 0xCC	; 204
     a8a:	0e 94 3e 09 	call	0x127c	; 0x127c <__umulhisi3>
     a8e:	96 95       	lsr	r25
     a90:	87 95       	ror	r24
     a92:	96 95       	lsr	r25
     a94:	87 95       	ror	r24
     a96:	96 95       	lsr	r25
     a98:	87 95       	ror	r24
     a9a:	80 5d       	subi	r24, 0xD0	; 208
     a9c:	0e 94 b4 02 	call	0x568	; 0x568 <USART_Transmit>
		USART_Transmit(((word - (word/100)*100) % 10) + 48);
     aa0:	e9 81       	ldd	r30, Y+1	; 0x01
     aa2:	fa 81       	ldd	r31, Y+2	; 0x02
     aa4:	cf 01       	movw	r24, r30
     aa6:	96 95       	lsr	r25
     aa8:	87 95       	ror	r24
     aaa:	96 95       	lsr	r25
     aac:	87 95       	ror	r24
     aae:	9c 01       	movw	r18, r24
     ab0:	ab e7       	ldi	r26, 0x7B	; 123
     ab2:	b4 e1       	ldi	r27, 0x14	; 20
     ab4:	0e 94 3e 09 	call	0x127c	; 0x127c <__umulhisi3>
     ab8:	ac 01       	movw	r20, r24
     aba:	56 95       	lsr	r21
     abc:	47 95       	ror	r20
     abe:	24 e6       	ldi	r18, 0x64	; 100
     ac0:	24 9f       	mul	r18, r20
     ac2:	c0 01       	movw	r24, r0
     ac4:	25 9f       	mul	r18, r21
     ac6:	90 0d       	add	r25, r0
     ac8:	11 24       	eor	r1, r1
     aca:	af 01       	movw	r20, r30
     acc:	48 1b       	sub	r20, r24
     ace:	59 0b       	sbc	r21, r25
     ad0:	9a 01       	movw	r18, r20
     ad2:	ad ec       	ldi	r26, 0xCD	; 205
     ad4:	bc ec       	ldi	r27, 0xCC	; 204
     ad6:	0e 94 3e 09 	call	0x127c	; 0x127c <__umulhisi3>
     ada:	96 95       	lsr	r25
     adc:	87 95       	ror	r24
     ade:	96 95       	lsr	r25
     ae0:	87 95       	ror	r24
     ae2:	96 95       	lsr	r25
     ae4:	87 95       	ror	r24
     ae6:	88 0f       	add	r24, r24
     ae8:	99 1f       	adc	r25, r25
     aea:	9c 01       	movw	r18, r24
     aec:	22 0f       	add	r18, r18
     aee:	33 1f       	adc	r19, r19
     af0:	22 0f       	add	r18, r18
     af2:	33 1f       	adc	r19, r19
     af4:	82 0f       	add	r24, r18
     af6:	93 1f       	adc	r25, r19
     af8:	9a 01       	movw	r18, r20
     afa:	28 1b       	sub	r18, r24
     afc:	39 0b       	sbc	r19, r25
     afe:	c9 01       	movw	r24, r18
     b00:	80 5d       	subi	r24, 0xD0	; 208
     b02:	0e 94 b4 02 	call	0x568	; 0x568 <USART_Transmit>
		USART_Transmit(0x0A);
     b06:	8a e0       	ldi	r24, 0x0A	; 10
     b08:	0e 94 b4 02 	call	0x568	; 0x568 <USART_Transmit>
     b0c:	1c c1       	rjmp	.+568    	; 0xd46 <USART_Transmit_16_dec+0x3b2>
	}
	else if(word < 10000){
     b0e:	89 81       	ldd	r24, Y+1	; 0x01
     b10:	9a 81       	ldd	r25, Y+2	; 0x02
     b12:	80 31       	cpi	r24, 0x10	; 16
     b14:	37 e2       	ldi	r19, 0x27	; 39
     b16:	93 07       	cpc	r25, r19
     b18:	08 f0       	brcs	.+2      	; 0xb1c <USART_Transmit_16_dec+0x188>
     b1a:	12 c1       	rjmp	.+548    	; 0xd40 <USART_Transmit_16_dec+0x3ac>
		USART_Transmit((word / 1000) + 48);
     b1c:	89 81       	ldd	r24, Y+1	; 0x01
     b1e:	9a 81       	ldd	r25, Y+2	; 0x02
     b20:	96 95       	lsr	r25
     b22:	87 95       	ror	r24
     b24:	96 95       	lsr	r25
     b26:	87 95       	ror	r24
     b28:	96 95       	lsr	r25
     b2a:	87 95       	ror	r24
     b2c:	9c 01       	movw	r18, r24
     b2e:	a5 ec       	ldi	r26, 0xC5	; 197
     b30:	b0 e2       	ldi	r27, 0x20	; 32
     b32:	0e 94 3e 09 	call	0x127c	; 0x127c <__umulhisi3>
     b36:	92 95       	swap	r25
     b38:	82 95       	swap	r24
     b3a:	8f 70       	andi	r24, 0x0F	; 15
     b3c:	89 27       	eor	r24, r25
     b3e:	9f 70       	andi	r25, 0x0F	; 15
     b40:	89 27       	eor	r24, r25
     b42:	80 5d       	subi	r24, 0xD0	; 208
     b44:	0e 94 b4 02 	call	0x568	; 0x568 <USART_Transmit>
		USART_Transmit(((word - (word/1000)*1000) / 100) + 48);
     b48:	49 81       	ldd	r20, Y+1	; 0x01
     b4a:	5a 81       	ldd	r21, Y+2	; 0x02
     b4c:	ca 01       	movw	r24, r20
     b4e:	96 95       	lsr	r25
     b50:	87 95       	ror	r24
     b52:	96 95       	lsr	r25
     b54:	87 95       	ror	r24
     b56:	96 95       	lsr	r25
     b58:	87 95       	ror	r24
     b5a:	9c 01       	movw	r18, r24
     b5c:	a5 ec       	ldi	r26, 0xC5	; 197
     b5e:	b0 e2       	ldi	r27, 0x20	; 32
     b60:	0e 94 3e 09 	call	0x127c	; 0x127c <__umulhisi3>
     b64:	92 95       	swap	r25
     b66:	82 95       	swap	r24
     b68:	8f 70       	andi	r24, 0x0F	; 15
     b6a:	89 27       	eor	r24, r25
     b6c:	9f 70       	andi	r25, 0x0F	; 15
     b6e:	89 27       	eor	r24, r25
     b70:	68 ee       	ldi	r22, 0xE8	; 232
     b72:	73 e0       	ldi	r23, 0x03	; 3
     b74:	86 9f       	mul	r24, r22
     b76:	90 01       	movw	r18, r0
     b78:	87 9f       	mul	r24, r23
     b7a:	30 0d       	add	r19, r0
     b7c:	96 9f       	mul	r25, r22
     b7e:	30 0d       	add	r19, r0
     b80:	11 24       	eor	r1, r1
     b82:	ca 01       	movw	r24, r20
     b84:	82 1b       	sub	r24, r18
     b86:	93 0b       	sbc	r25, r19
     b88:	96 95       	lsr	r25
     b8a:	87 95       	ror	r24
     b8c:	96 95       	lsr	r25
     b8e:	87 95       	ror	r24
     b90:	9c 01       	movw	r18, r24
     b92:	ab e7       	ldi	r26, 0x7B	; 123
     b94:	b4 e1       	ldi	r27, 0x14	; 20
     b96:	0e 94 3e 09 	call	0x127c	; 0x127c <__umulhisi3>
     b9a:	96 95       	lsr	r25
     b9c:	87 95       	ror	r24
     b9e:	80 5d       	subi	r24, 0xD0	; 208
     ba0:	0e 94 b4 02 	call	0x568	; 0x568 <USART_Transmit>
		USART_Transmit((((word - (word/1000)*1000) % 100) / 10) + 48);
     ba4:	e9 81       	ldd	r30, Y+1	; 0x01
     ba6:	fa 81       	ldd	r31, Y+2	; 0x02
     ba8:	cf 01       	movw	r24, r30
     baa:	96 95       	lsr	r25
     bac:	87 95       	ror	r24
     bae:	96 95       	lsr	r25
     bb0:	87 95       	ror	r24
     bb2:	96 95       	lsr	r25
     bb4:	87 95       	ror	r24
     bb6:	9c 01       	movw	r18, r24
     bb8:	a5 ec       	ldi	r26, 0xC5	; 197
     bba:	b0 e2       	ldi	r27, 0x20	; 32
     bbc:	0e 94 3e 09 	call	0x127c	; 0x127c <__umulhisi3>
     bc0:	ac 01       	movw	r20, r24
     bc2:	52 95       	swap	r21
     bc4:	42 95       	swap	r20
     bc6:	4f 70       	andi	r20, 0x0F	; 15
     bc8:	45 27       	eor	r20, r21
     bca:	5f 70       	andi	r21, 0x0F	; 15
     bcc:	45 27       	eor	r20, r21
     bce:	28 ee       	ldi	r18, 0xE8	; 232
     bd0:	33 e0       	ldi	r19, 0x03	; 3
     bd2:	42 9f       	mul	r20, r18
     bd4:	c0 01       	movw	r24, r0
     bd6:	43 9f       	mul	r20, r19
     bd8:	90 0d       	add	r25, r0
     bda:	52 9f       	mul	r21, r18
     bdc:	90 0d       	add	r25, r0
     bde:	11 24       	eor	r1, r1
     be0:	af 01       	movw	r20, r30
     be2:	48 1b       	sub	r20, r24
     be4:	59 0b       	sbc	r21, r25
     be6:	ca 01       	movw	r24, r20
     be8:	96 95       	lsr	r25
     bea:	87 95       	ror	r24
     bec:	96 95       	lsr	r25
     bee:	87 95       	ror	r24
     bf0:	9c 01       	movw	r18, r24
     bf2:	ab e7       	ldi	r26, 0x7B	; 123
     bf4:	b4 e1       	ldi	r27, 0x14	; 20
     bf6:	0e 94 3e 09 	call	0x127c	; 0x127c <__umulhisi3>
     bfa:	96 95       	lsr	r25
     bfc:	87 95       	ror	r24
     bfe:	64 e6       	ldi	r22, 0x64	; 100
     c00:	68 9f       	mul	r22, r24
     c02:	90 01       	movw	r18, r0
     c04:	69 9f       	mul	r22, r25
     c06:	30 0d       	add	r19, r0
     c08:	11 24       	eor	r1, r1
     c0a:	ca 01       	movw	r24, r20
     c0c:	82 1b       	sub	r24, r18
     c0e:	93 0b       	sbc	r25, r19
     c10:	9c 01       	movw	r18, r24
     c12:	ad ec       	ldi	r26, 0xCD	; 205
     c14:	bc ec       	ldi	r27, 0xCC	; 204
     c16:	0e 94 3e 09 	call	0x127c	; 0x127c <__umulhisi3>
     c1a:	96 95       	lsr	r25
     c1c:	87 95       	ror	r24
     c1e:	96 95       	lsr	r25
     c20:	87 95       	ror	r24
     c22:	96 95       	lsr	r25
     c24:	87 95       	ror	r24
     c26:	80 5d       	subi	r24, 0xD0	; 208
     c28:	0e 94 b4 02 	call	0x568	; 0x568 <USART_Transmit>
		USART_Transmit((( (word - (word/1000)*1000) % 100) - (word - ((word/1000)*1000) % 100)/10)*10 +48);
     c2c:	e9 81       	ldd	r30, Y+1	; 0x01
     c2e:	fa 81       	ldd	r31, Y+2	; 0x02
     c30:	cf 01       	movw	r24, r30
     c32:	96 95       	lsr	r25
     c34:	87 95       	ror	r24
     c36:	96 95       	lsr	r25
     c38:	87 95       	ror	r24
     c3a:	96 95       	lsr	r25
     c3c:	87 95       	ror	r24
     c3e:	9c 01       	movw	r18, r24
     c40:	a5 ec       	ldi	r26, 0xC5	; 197
     c42:	b0 e2       	ldi	r27, 0x20	; 32
     c44:	0e 94 3e 09 	call	0x127c	; 0x127c <__umulhisi3>
     c48:	ac 01       	movw	r20, r24
     c4a:	52 95       	swap	r21
     c4c:	42 95       	swap	r20
     c4e:	4f 70       	andi	r20, 0x0F	; 15
     c50:	45 27       	eor	r20, r21
     c52:	5f 70       	andi	r21, 0x0F	; 15
     c54:	45 27       	eor	r20, r21
     c56:	28 ee       	ldi	r18, 0xE8	; 232
     c58:	33 e0       	ldi	r19, 0x03	; 3
     c5a:	42 9f       	mul	r20, r18
     c5c:	c0 01       	movw	r24, r0
     c5e:	43 9f       	mul	r20, r19
     c60:	90 0d       	add	r25, r0
     c62:	52 9f       	mul	r21, r18
     c64:	90 0d       	add	r25, r0
     c66:	11 24       	eor	r1, r1
     c68:	af 01       	movw	r20, r30
     c6a:	48 1b       	sub	r20, r24
     c6c:	59 0b       	sbc	r21, r25
     c6e:	ca 01       	movw	r24, r20
     c70:	96 95       	lsr	r25
     c72:	87 95       	ror	r24
     c74:	96 95       	lsr	r25
     c76:	87 95       	ror	r24
     c78:	9c 01       	movw	r18, r24
     c7a:	ab e7       	ldi	r26, 0x7B	; 123
     c7c:	b4 e1       	ldi	r27, 0x14	; 20
     c7e:	0e 94 3e 09 	call	0x127c	; 0x127c <__umulhisi3>
     c82:	fc 01       	movw	r30, r24
     c84:	f6 95       	lsr	r31
     c86:	e7 95       	ror	r30
     c88:	24 e6       	ldi	r18, 0x64	; 100
     c8a:	2e 9f       	mul	r18, r30
     c8c:	c0 01       	movw	r24, r0
     c8e:	2f 9f       	mul	r18, r31
     c90:	90 0d       	add	r25, r0
     c92:	11 24       	eor	r1, r1
     c94:	fa 01       	movw	r30, r20
     c96:	e8 1b       	sub	r30, r24
     c98:	f9 0b       	sbc	r31, r25
     c9a:	89 81       	ldd	r24, Y+1	; 0x01
     c9c:	9a 81       	ldd	r25, Y+2	; 0x02
     c9e:	96 95       	lsr	r25
     ca0:	87 95       	ror	r24
     ca2:	96 95       	lsr	r25
     ca4:	87 95       	ror	r24
     ca6:	96 95       	lsr	r25
     ca8:	87 95       	ror	r24
     caa:	9c 01       	movw	r18, r24
     cac:	a5 ec       	ldi	r26, 0xC5	; 197
     cae:	b0 e2       	ldi	r27, 0x20	; 32
     cb0:	0e 94 3e 09 	call	0x127c	; 0x127c <__umulhisi3>
     cb4:	9c 01       	movw	r18, r24
     cb6:	32 95       	swap	r19
     cb8:	22 95       	swap	r18
     cba:	2f 70       	andi	r18, 0x0F	; 15
     cbc:	23 27       	eor	r18, r19
     cbe:	3f 70       	andi	r19, 0x0F	; 15
     cc0:	23 27       	eor	r18, r19
     cc2:	88 ee       	ldi	r24, 0xE8	; 232
     cc4:	93 e0       	ldi	r25, 0x03	; 3
     cc6:	28 9f       	mul	r18, r24
     cc8:	a0 01       	movw	r20, r0
     cca:	29 9f       	mul	r18, r25
     ccc:	50 0d       	add	r21, r0
     cce:	38 9f       	mul	r19, r24
     cd0:	50 0d       	add	r21, r0
     cd2:	11 24       	eor	r1, r1
     cd4:	ca 01       	movw	r24, r20
     cd6:	96 95       	lsr	r25
     cd8:	87 95       	ror	r24
     cda:	96 95       	lsr	r25
     cdc:	87 95       	ror	r24
     cde:	9c 01       	movw	r18, r24
     ce0:	ab e7       	ldi	r26, 0x7B	; 123
     ce2:	b4 e1       	ldi	r27, 0x14	; 20
     ce4:	0e 94 3e 09 	call	0x127c	; 0x127c <__umulhisi3>
     ce8:	96 95       	lsr	r25
     cea:	87 95       	ror	r24
     cec:	64 e6       	ldi	r22, 0x64	; 100
     cee:	68 9f       	mul	r22, r24
     cf0:	90 01       	movw	r18, r0
     cf2:	69 9f       	mul	r22, r25
     cf4:	30 0d       	add	r19, r0
     cf6:	11 24       	eor	r1, r1
     cf8:	ca 01       	movw	r24, r20
     cfa:	82 1b       	sub	r24, r18
     cfc:	93 0b       	sbc	r25, r19
     cfe:	29 81       	ldd	r18, Y+1	; 0x01
     d00:	3a 81       	ldd	r19, Y+2	; 0x02
     d02:	a9 01       	movw	r20, r18
     d04:	48 1b       	sub	r20, r24
     d06:	59 0b       	sbc	r21, r25
     d08:	ca 01       	movw	r24, r20
     d0a:	9c 01       	movw	r18, r24
     d0c:	ad ec       	ldi	r26, 0xCD	; 205
     d0e:	bc ec       	ldi	r27, 0xCC	; 204
     d10:	0e 94 3e 09 	call	0x127c	; 0x127c <__umulhisi3>
     d14:	96 95       	lsr	r25
     d16:	87 95       	ror	r24
     d18:	96 95       	lsr	r25
     d1a:	87 95       	ror	r24
     d1c:	96 95       	lsr	r25
     d1e:	87 95       	ror	r24
     d20:	9f 01       	movw	r18, r30
     d22:	28 1b       	sub	r18, r24
     d24:	39 0b       	sbc	r19, r25
     d26:	c9 01       	movw	r24, r18
     d28:	88 0f       	add	r24, r24
     d2a:	98 2f       	mov	r25, r24
     d2c:	99 0f       	add	r25, r25
     d2e:	99 0f       	add	r25, r25
     d30:	89 0f       	add	r24, r25
     d32:	80 5d       	subi	r24, 0xD0	; 208
     d34:	0e 94 b4 02 	call	0x568	; 0x568 <USART_Transmit>
		USART_Transmit(0x0A);
     d38:	8a e0       	ldi	r24, 0x0A	; 10
     d3a:	0e 94 b4 02 	call	0x568	; 0x568 <USART_Transmit>
     d3e:	03 c0       	rjmp	.+6      	; 0xd46 <USART_Transmit_16_dec+0x3b2>
	}
	else{
		USART_Transmit('q');
     d40:	81 e7       	ldi	r24, 0x71	; 113
     d42:	0e 94 b4 02 	call	0x568	; 0x568 <USART_Transmit>
	}
}
     d46:	0f 90       	pop	r0
     d48:	0f 90       	pop	r0
     d4a:	df 91       	pop	r29
     d4c:	cf 91       	pop	r28
     d4e:	08 95       	ret

00000d50 <USART_Transmit_16_dec_signed>:


void USART_Transmit_16_dec_signed(int word){
     d50:	cf 93       	push	r28
     d52:	df 93       	push	r29
     d54:	cd b7       	in	r28, 0x3d	; 61
     d56:	de b7       	in	r29, 0x3e	; 62
     d58:	a6 97       	sbiw	r28, 0x26	; 38
     d5a:	0f b6       	in	r0, 0x3f	; 63
     d5c:	f8 94       	cli
     d5e:	de bf       	out	0x3e, r29	; 62
     d60:	0f be       	out	0x3f, r0	; 63
     d62:	cd bf       	out	0x3d, r28	; 61
     d64:	9a 83       	std	Y+2, r25	; 0x02
     d66:	89 83       	std	Y+1, r24	; 0x01
		if (word < 0){
     d68:	89 81       	ldd	r24, Y+1	; 0x01
     d6a:	9a 81       	ldd	r25, Y+2	; 0x02
     d6c:	99 23       	and	r25, r25
     d6e:	54 f4       	brge	.+20     	; 0xd84 <USART_Transmit_16_dec_signed+0x34>
			USART_Transmit(0x2D);	// Minus sign
     d70:	8d e2       	ldi	r24, 0x2D	; 45
     d72:	0e 94 b4 02 	call	0x568	; 0x568 <USART_Transmit>
			word = ~word + 1;
     d76:	89 81       	ldd	r24, Y+1	; 0x01
     d78:	9a 81       	ldd	r25, Y+2	; 0x02
     d7a:	91 95       	neg	r25
     d7c:	81 95       	neg	r24
     d7e:	91 09       	sbc	r25, r1
     d80:	9a 83       	std	Y+2, r25	; 0x02
     d82:	89 83       	std	Y+1, r24	; 0x01
		}

		if(word < 10){
     d84:	89 81       	ldd	r24, Y+1	; 0x01
     d86:	9a 81       	ldd	r25, Y+2	; 0x02
     d88:	8a 30       	cpi	r24, 0x0A	; 10
     d8a:	91 05       	cpc	r25, r1
     d8c:	44 f4       	brge	.+16     	; 0xd9e <USART_Transmit_16_dec_signed+0x4e>
			USART_Transmit(word + 48);
     d8e:	89 81       	ldd	r24, Y+1	; 0x01
     d90:	80 5d       	subi	r24, 0xD0	; 208
     d92:	0e 94 b4 02 	call	0x568	; 0x568 <USART_Transmit>
			USART_Transmit(0x0A);
     d96:	8a e0       	ldi	r24, 0x0A	; 10
     d98:	0e 94 b4 02 	call	0x568	; 0x568 <USART_Transmit>
     d9c:	cc c0       	rjmp	.+408    	; 0xf36 <USART_Transmit_16_dec_signed+0x1e6>
		}
		else if(word < 100){
     d9e:	89 81       	ldd	r24, Y+1	; 0x01
     da0:	9a 81       	ldd	r25, Y+2	; 0x02
     da2:	84 36       	cpi	r24, 0x64	; 100
     da4:	91 05       	cpc	r25, r1
     da6:	cc f4       	brge	.+50     	; 0xdda <USART_Transmit_16_dec_signed+0x8a>
			USART_Transmit((word / 10) + 48);
     da8:	89 81       	ldd	r24, Y+1	; 0x01
     daa:	9a 81       	ldd	r25, Y+2	; 0x02
     dac:	2a e0       	ldi	r18, 0x0A	; 10
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	b9 01       	movw	r22, r18
     db2:	0e 94 0b 09 	call	0x1216	; 0x1216 <__divmodhi4>
     db6:	cb 01       	movw	r24, r22
     db8:	80 5d       	subi	r24, 0xD0	; 208
     dba:	0e 94 b4 02 	call	0x568	; 0x568 <USART_Transmit>
			USART_Transmit((word % 10) + 48);
     dbe:	89 81       	ldd	r24, Y+1	; 0x01
     dc0:	9a 81       	ldd	r25, Y+2	; 0x02
     dc2:	2a e0       	ldi	r18, 0x0A	; 10
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	b9 01       	movw	r22, r18
     dc8:	0e 94 0b 09 	call	0x1216	; 0x1216 <__divmodhi4>
     dcc:	80 5d       	subi	r24, 0xD0	; 208
     dce:	0e 94 b4 02 	call	0x568	; 0x568 <USART_Transmit>
			USART_Transmit(0x0A);
     dd2:	8a e0       	ldi	r24, 0x0A	; 10
     dd4:	0e 94 b4 02 	call	0x568	; 0x568 <USART_Transmit>
     dd8:	ae c0       	rjmp	.+348    	; 0xf36 <USART_Transmit_16_dec_signed+0x1e6>
		}
		else if(word < 1000){
     dda:	89 81       	ldd	r24, Y+1	; 0x01
     ddc:	9a 81       	ldd	r25, Y+2	; 0x02
     dde:	88 3e       	cpi	r24, 0xE8	; 232
     de0:	23 e0       	ldi	r18, 0x03	; 3
     de2:	92 07       	cpc	r25, r18
     de4:	74 f5       	brge	.+92     	; 0xe42 <USART_Transmit_16_dec_signed+0xf2>
			USART_Transmit((word / 100) + 48);
     de6:	89 81       	ldd	r24, Y+1	; 0x01
     de8:	9a 81       	ldd	r25, Y+2	; 0x02
     dea:	24 e6       	ldi	r18, 0x64	; 100
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	b9 01       	movw	r22, r18
     df0:	0e 94 0b 09 	call	0x1216	; 0x1216 <__divmodhi4>
     df4:	cb 01       	movw	r24, r22
     df6:	80 5d       	subi	r24, 0xD0	; 208
     df8:	0e 94 b4 02 	call	0x568	; 0x568 <USART_Transmit>
			USART_Transmit(((word - (word/100)*100) / 10) + 48);
     dfc:	89 81       	ldd	r24, Y+1	; 0x01
     dfe:	9a 81       	ldd	r25, Y+2	; 0x02
     e00:	24 e6       	ldi	r18, 0x64	; 100
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	b9 01       	movw	r22, r18
     e06:	0e 94 0b 09 	call	0x1216	; 0x1216 <__divmodhi4>
     e0a:	2a e0       	ldi	r18, 0x0A	; 10
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	b9 01       	movw	r22, r18
     e10:	0e 94 0b 09 	call	0x1216	; 0x1216 <__divmodhi4>
     e14:	cb 01       	movw	r24, r22
     e16:	80 5d       	subi	r24, 0xD0	; 208
     e18:	0e 94 b4 02 	call	0x568	; 0x568 <USART_Transmit>
			USART_Transmit(((word - (word/100)*100) % 10) + 48);
     e1c:	89 81       	ldd	r24, Y+1	; 0x01
     e1e:	9a 81       	ldd	r25, Y+2	; 0x02
     e20:	24 e6       	ldi	r18, 0x64	; 100
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	b9 01       	movw	r22, r18
     e26:	0e 94 0b 09 	call	0x1216	; 0x1216 <__divmodhi4>
     e2a:	2a e0       	ldi	r18, 0x0A	; 10
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	b9 01       	movw	r22, r18
     e30:	0e 94 0b 09 	call	0x1216	; 0x1216 <__divmodhi4>
     e34:	80 5d       	subi	r24, 0xD0	; 208
     e36:	0e 94 b4 02 	call	0x568	; 0x568 <USART_Transmit>
			USART_Transmit(0x0A);
     e3a:	8a e0       	ldi	r24, 0x0A	; 10
     e3c:	0e 94 b4 02 	call	0x568	; 0x568 <USART_Transmit>
     e40:	7a c0       	rjmp	.+244    	; 0xf36 <USART_Transmit_16_dec_signed+0x1e6>
		}
		else if(word < 10000){
     e42:	89 81       	ldd	r24, Y+1	; 0x01
     e44:	9a 81       	ldd	r25, Y+2	; 0x02
     e46:	80 31       	cpi	r24, 0x10	; 16
     e48:	47 e2       	ldi	r20, 0x27	; 39
     e4a:	94 07       	cpc	r25, r20
     e4c:	0c f0       	brlt	.+2      	; 0xe50 <USART_Transmit_16_dec_signed+0x100>
     e4e:	70 c0       	rjmp	.+224    	; 0xf30 <USART_Transmit_16_dec_signed+0x1e0>
			USART_Transmit((word / 1000) + 48);
     e50:	89 81       	ldd	r24, Y+1	; 0x01
     e52:	9a 81       	ldd	r25, Y+2	; 0x02
     e54:	28 ee       	ldi	r18, 0xE8	; 232
     e56:	33 e0       	ldi	r19, 0x03	; 3
     e58:	b9 01       	movw	r22, r18
     e5a:	0e 94 0b 09 	call	0x1216	; 0x1216 <__divmodhi4>
     e5e:	cb 01       	movw	r24, r22
     e60:	80 5d       	subi	r24, 0xD0	; 208
     e62:	0e 94 b4 02 	call	0x568	; 0x568 <USART_Transmit>
			USART_Transmit(((word - (word/1000)*1000) / 100) + 48);
     e66:	89 81       	ldd	r24, Y+1	; 0x01
     e68:	9a 81       	ldd	r25, Y+2	; 0x02
     e6a:	28 ee       	ldi	r18, 0xE8	; 232
     e6c:	33 e0       	ldi	r19, 0x03	; 3
     e6e:	b9 01       	movw	r22, r18
     e70:	0e 94 0b 09 	call	0x1216	; 0x1216 <__divmodhi4>
     e74:	24 e6       	ldi	r18, 0x64	; 100
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	b9 01       	movw	r22, r18
     e7a:	0e 94 0b 09 	call	0x1216	; 0x1216 <__divmodhi4>
     e7e:	cb 01       	movw	r24, r22
     e80:	80 5d       	subi	r24, 0xD0	; 208
     e82:	0e 94 b4 02 	call	0x568	; 0x568 <USART_Transmit>
			USART_Transmit((((word - (word/1000)*1000) % 100) / 10) + 48);
     e86:	89 81       	ldd	r24, Y+1	; 0x01
     e88:	9a 81       	ldd	r25, Y+2	; 0x02
     e8a:	28 ee       	ldi	r18, 0xE8	; 232
     e8c:	33 e0       	ldi	r19, 0x03	; 3
     e8e:	b9 01       	movw	r22, r18
     e90:	0e 94 0b 09 	call	0x1216	; 0x1216 <__divmodhi4>
     e94:	24 e6       	ldi	r18, 0x64	; 100
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	b9 01       	movw	r22, r18
     e9a:	0e 94 0b 09 	call	0x1216	; 0x1216 <__divmodhi4>
     e9e:	2a e0       	ldi	r18, 0x0A	; 10
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	b9 01       	movw	r22, r18
     ea4:	0e 94 0b 09 	call	0x1216	; 0x1216 <__divmodhi4>
     ea8:	cb 01       	movw	r24, r22
     eaa:	80 5d       	subi	r24, 0xD0	; 208
     eac:	0e 94 b4 02 	call	0x568	; 0x568 <USART_Transmit>
			USART_Transmit((( (word - (word/1000)*1000) % 100) - (word - ((word/1000)*1000) % 100)/10)*10 +48);
     eb0:	89 81       	ldd	r24, Y+1	; 0x01
     eb2:	9a 81       	ldd	r25, Y+2	; 0x02
     eb4:	28 ee       	ldi	r18, 0xE8	; 232
     eb6:	33 e0       	ldi	r19, 0x03	; 3
     eb8:	b9 01       	movw	r22, r18
     eba:	0e 94 0b 09 	call	0x1216	; 0x1216 <__divmodhi4>
     ebe:	24 e6       	ldi	r18, 0x64	; 100
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	b9 01       	movw	r22, r18
     ec4:	0e 94 0b 09 	call	0x1216	; 0x1216 <__divmodhi4>
     ec8:	9c 01       	movw	r18, r24
     eca:	89 81       	ldd	r24, Y+1	; 0x01
     ecc:	9a 81       	ldd	r25, Y+2	; 0x02
     ece:	48 ee       	ldi	r20, 0xE8	; 232
     ed0:	53 e0       	ldi	r21, 0x03	; 3
     ed2:	ba 01       	movw	r22, r20
     ed4:	0e 94 0b 09 	call	0x1216	; 0x1216 <__divmodhi4>
     ed8:	cb 01       	movw	r24, r22
     eda:	bc 01       	movw	r22, r24
     edc:	48 ee       	ldi	r20, 0xE8	; 232
     ede:	53 e0       	ldi	r21, 0x03	; 3
     ee0:	64 9f       	mul	r22, r20
     ee2:	c0 01       	movw	r24, r0
     ee4:	65 9f       	mul	r22, r21
     ee6:	90 0d       	add	r25, r0
     ee8:	74 9f       	mul	r23, r20
     eea:	90 0d       	add	r25, r0
     eec:	11 24       	eor	r1, r1
     eee:	44 e6       	ldi	r20, 0x64	; 100
     ef0:	50 e0       	ldi	r21, 0x00	; 0
     ef2:	ba 01       	movw	r22, r20
     ef4:	0e 94 0b 09 	call	0x1216	; 0x1216 <__divmodhi4>
     ef8:	49 81       	ldd	r20, Y+1	; 0x01
     efa:	5a 81       	ldd	r21, Y+2	; 0x02
     efc:	ba 01       	movw	r22, r20
     efe:	68 1b       	sub	r22, r24
     f00:	79 0b       	sbc	r23, r25
     f02:	cb 01       	movw	r24, r22
     f04:	4a e0       	ldi	r20, 0x0A	; 10
     f06:	50 e0       	ldi	r21, 0x00	; 0
     f08:	ba 01       	movw	r22, r20
     f0a:	0e 94 0b 09 	call	0x1216	; 0x1216 <__divmodhi4>
     f0e:	cb 01       	movw	r24, r22
     f10:	a9 01       	movw	r20, r18
     f12:	48 1b       	sub	r20, r24
     f14:	59 0b       	sbc	r21, r25
     f16:	ca 01       	movw	r24, r20
     f18:	88 0f       	add	r24, r24
     f1a:	98 2f       	mov	r25, r24
     f1c:	99 0f       	add	r25, r25
     f1e:	99 0f       	add	r25, r25
     f20:	89 0f       	add	r24, r25
     f22:	80 5d       	subi	r24, 0xD0	; 208
     f24:	0e 94 b4 02 	call	0x568	; 0x568 <USART_Transmit>
			USART_Transmit(0x0A);
     f28:	8a e0       	ldi	r24, 0x0A	; 10
     f2a:	0e 94 b4 02 	call	0x568	; 0x568 <USART_Transmit>
     f2e:	03 c0       	rjmp	.+6      	; 0xf36 <USART_Transmit_16_dec_signed+0x1e6>
		}
		else{
			USART_Transmit('q');
     f30:	81 e7       	ldi	r24, 0x71	; 113
     f32:	0e 94 b4 02 	call	0x568	; 0x568 <USART_Transmit>
		}
	}
     f36:	a6 96       	adiw	r28, 0x26	; 38
     f38:	0f b6       	in	r0, 0x3f	; 63
     f3a:	f8 94       	cli
     f3c:	de bf       	out	0x3e, r29	; 62
     f3e:	0f be       	out	0x3f, r0	; 63
     f40:	cd bf       	out	0x3d, r28	; 61
     f42:	df 91       	pop	r29
     f44:	cf 91       	pop	r28
     f46:	08 95       	ret

00000f48 <USART_Transmit_dec>:

void USART_Transmit_dec(int word){
     f48:	cf 93       	push	r28
     f4a:	df 93       	push	r29
     f4c:	cd b7       	in	r28, 0x3d	; 61
     f4e:	de b7       	in	r29, 0x3e	; 62
     f50:	6d 97       	sbiw	r28, 0x1d	; 29
     f52:	0f b6       	in	r0, 0x3f	; 63
     f54:	f8 94       	cli
     f56:	de bf       	out	0x3e, r29	; 62
     f58:	0f be       	out	0x3f, r0	; 63
     f5a:	cd bf       	out	0x3d, r28	; 61
     f5c:	99 8f       	std	Y+25, r25	; 0x19
     f5e:	88 8f       	std	Y+24, r24	; 0x18
	if (word < 0){
     f60:	88 8d       	ldd	r24, Y+24	; 0x18
     f62:	99 8d       	ldd	r25, Y+25	; 0x19
     f64:	99 23       	and	r25, r25
     f66:	54 f4       	brge	.+20     	; 0xf7c <USART_Transmit_dec+0x34>
				USART_Transmit(0x2D);	// Minus sign
     f68:	8d e2       	ldi	r24, 0x2D	; 45
     f6a:	0e 94 b4 02 	call	0x568	; 0x568 <USART_Transmit>
				word = ~word + 1;
     f6e:	88 8d       	ldd	r24, Y+24	; 0x18
     f70:	99 8d       	ldd	r25, Y+25	; 0x19
     f72:	91 95       	neg	r25
     f74:	81 95       	neg	r24
     f76:	91 09       	sbc	r25, r1
     f78:	99 8f       	std	Y+25, r25	; 0x19
     f7a:	88 8f       	std	Y+24, r24	; 0x18
	}

	char tmp[20];
	char count = 0;
     f7c:	19 82       	std	Y+1, r1	; 0x01
	while(word > 9){
     f7e:	1e c0       	rjmp	.+60     	; 0xfbc <USART_Transmit_dec+0x74>
		tmp[count] = word%10;
     f80:	89 81       	ldd	r24, Y+1	; 0x01
     f82:	28 2f       	mov	r18, r24
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	88 8d       	ldd	r24, Y+24	; 0x18
     f88:	99 8d       	ldd	r25, Y+25	; 0x19
     f8a:	4a e0       	ldi	r20, 0x0A	; 10
     f8c:	50 e0       	ldi	r21, 0x00	; 0
     f8e:	ba 01       	movw	r22, r20
     f90:	0e 94 0b 09 	call	0x1216	; 0x1216 <__divmodhi4>
     f94:	48 2f       	mov	r20, r24
     f96:	ce 01       	movw	r24, r28
     f98:	04 96       	adiw	r24, 0x04	; 4
     f9a:	82 0f       	add	r24, r18
     f9c:	93 1f       	adc	r25, r19
     f9e:	fc 01       	movw	r30, r24
     fa0:	40 83       	st	Z, r20
		word = word/10;
     fa2:	88 8d       	ldd	r24, Y+24	; 0x18
     fa4:	99 8d       	ldd	r25, Y+25	; 0x19
     fa6:	2a e0       	ldi	r18, 0x0A	; 10
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	b9 01       	movw	r22, r18
     fac:	0e 94 0b 09 	call	0x1216	; 0x1216 <__divmodhi4>
     fb0:	cb 01       	movw	r24, r22
     fb2:	99 8f       	std	Y+25, r25	; 0x19
     fb4:	88 8f       	std	Y+24, r24	; 0x18
		count++;
     fb6:	89 81       	ldd	r24, Y+1	; 0x01
     fb8:	8f 5f       	subi	r24, 0xFF	; 255
     fba:	89 83       	std	Y+1, r24	; 0x01
				word = ~word + 1;
	}

	char tmp[20];
	char count = 0;
	while(word > 9){
     fbc:	88 8d       	ldd	r24, Y+24	; 0x18
     fbe:	99 8d       	ldd	r25, Y+25	; 0x19
     fc0:	8a 30       	cpi	r24, 0x0A	; 10
     fc2:	91 05       	cpc	r25, r1
     fc4:	ec f6       	brge	.-70     	; 0xf80 <USART_Transmit_dec+0x38>
		tmp[count] = word%10;
		word = word/10;
		count++;
	}
	tmp[count] = word;
     fc6:	89 81       	ldd	r24, Y+1	; 0x01
     fc8:	88 2f       	mov	r24, r24
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	48 8d       	ldd	r20, Y+24	; 0x18
     fce:	9e 01       	movw	r18, r28
     fd0:	2c 5f       	subi	r18, 0xFC	; 252
     fd2:	3f 4f       	sbci	r19, 0xFF	; 255
     fd4:	82 0f       	add	r24, r18
     fd6:	93 1f       	adc	r25, r19
     fd8:	fc 01       	movw	r30, r24
     fda:	40 83       	st	Z, r20
	for(int i = count; i >= 0; i--){
     fdc:	89 81       	ldd	r24, Y+1	; 0x01
     fde:	88 2f       	mov	r24, r24
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	9b 83       	std	Y+3, r25	; 0x03
     fe4:	8a 83       	std	Y+2, r24	; 0x02
     fe6:	11 c0       	rjmp	.+34     	; 0x100a <USART_Transmit_dec+0xc2>
		USART_Transmit(tmp[i] + 48);
     fe8:	9e 01       	movw	r18, r28
     fea:	2c 5f       	subi	r18, 0xFC	; 252
     fec:	3f 4f       	sbci	r19, 0xFF	; 255
     fee:	8a 81       	ldd	r24, Y+2	; 0x02
     ff0:	9b 81       	ldd	r25, Y+3	; 0x03
     ff2:	82 0f       	add	r24, r18
     ff4:	93 1f       	adc	r25, r19
     ff6:	fc 01       	movw	r30, r24
     ff8:	80 81       	ld	r24, Z
     ffa:	80 5d       	subi	r24, 0xD0	; 208
     ffc:	0e 94 b4 02 	call	0x568	; 0x568 <USART_Transmit>
		tmp[count] = word%10;
		word = word/10;
		count++;
	}
	tmp[count] = word;
	for(int i = count; i >= 0; i--){
    1000:	8a 81       	ldd	r24, Y+2	; 0x02
    1002:	9b 81       	ldd	r25, Y+3	; 0x03
    1004:	01 97       	sbiw	r24, 0x01	; 1
    1006:	9b 83       	std	Y+3, r25	; 0x03
    1008:	8a 83       	std	Y+2, r24	; 0x02
    100a:	8a 81       	ldd	r24, Y+2	; 0x02
    100c:	9b 81       	ldd	r25, Y+3	; 0x03
    100e:	99 23       	and	r25, r25
    1010:	5c f7       	brge	.-42     	; 0xfe8 <USART_Transmit_dec+0xa0>
		USART_Transmit(tmp[i] + 48);
	}
}
    1012:	6d 96       	adiw	r28, 0x1d	; 29
    1014:	0f b6       	in	r0, 0x3f	; 63
    1016:	f8 94       	cli
    1018:	de bf       	out	0x3e, r29	; 62
    101a:	0f be       	out	0x3f, r0	; 63
    101c:	cd bf       	out	0x3d, r28	; 61
    101e:	df 91       	pop	r29
    1020:	cf 91       	pop	r28
    1022:	08 95       	ret

00001024 <myPrintNL>:




void myPrintNL(unsigned char str[], unsigned char len){
    1024:	cf 93       	push	r28
    1026:	df 93       	push	r29
    1028:	00 d0       	rcall	.+0      	; 0x102a <myPrintNL+0x6>
    102a:	00 d0       	rcall	.+0      	; 0x102c <myPrintNL+0x8>
    102c:	cd b7       	in	r28, 0x3d	; 61
    102e:	de b7       	in	r29, 0x3e	; 62
    1030:	9b 83       	std	Y+3, r25	; 0x03
    1032:	8a 83       	std	Y+2, r24	; 0x02
    1034:	6c 83       	std	Y+4, r22	; 0x04
	for(unsigned char i = 0; i < len; i++){
    1036:	19 82       	std	Y+1, r1	; 0x01
    1038:	1a c0       	rjmp	.+52     	; 0x106e <myPrintNL+0x4a>
		if(str[i] == '\0'){
    103a:	89 81       	ldd	r24, Y+1	; 0x01
    103c:	88 2f       	mov	r24, r24
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	2a 81       	ldd	r18, Y+2	; 0x02
    1042:	3b 81       	ldd	r19, Y+3	; 0x03
    1044:	82 0f       	add	r24, r18
    1046:	93 1f       	adc	r25, r19
    1048:	fc 01       	movw	r30, r24
    104a:	80 81       	ld	r24, Z
    104c:	88 23       	and	r24, r24
    104e:	09 f4       	brne	.+2      	; 0x1052 <myPrintNL+0x2e>
			break;
    1050:	12 c0       	rjmp	.+36     	; 0x1076 <myPrintNL+0x52>
		}
		USART_Transmit(str[i]);
    1052:	89 81       	ldd	r24, Y+1	; 0x01
    1054:	88 2f       	mov	r24, r24
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	2a 81       	ldd	r18, Y+2	; 0x02
    105a:	3b 81       	ldd	r19, Y+3	; 0x03
    105c:	82 0f       	add	r24, r18
    105e:	93 1f       	adc	r25, r19
    1060:	fc 01       	movw	r30, r24
    1062:	80 81       	ld	r24, Z
    1064:	0e 94 b4 02 	call	0x568	; 0x568 <USART_Transmit>




void myPrintNL(unsigned char str[], unsigned char len){
	for(unsigned char i = 0; i < len; i++){
    1068:	89 81       	ldd	r24, Y+1	; 0x01
    106a:	8f 5f       	subi	r24, 0xFF	; 255
    106c:	89 83       	std	Y+1, r24	; 0x01
    106e:	99 81       	ldd	r25, Y+1	; 0x01
    1070:	8c 81       	ldd	r24, Y+4	; 0x04
    1072:	98 17       	cp	r25, r24
    1074:	10 f3       	brcs	.-60     	; 0x103a <myPrintNL+0x16>
		if(str[i] == '\0'){
			break;
		}
		USART_Transmit(str[i]);
	}
	USART_Transmit(0x0A);
    1076:	8a e0       	ldi	r24, 0x0A	; 10
    1078:	0e 94 b4 02 	call	0x568	; 0x568 <USART_Transmit>
}
    107c:	0f 90       	pop	r0
    107e:	0f 90       	pop	r0
    1080:	0f 90       	pop	r0
    1082:	0f 90       	pop	r0
    1084:	df 91       	pop	r29
    1086:	cf 91       	pop	r28
    1088:	08 95       	ret

0000108a <myPrint>:

void myPrint(unsigned char str[], unsigned char len){
    108a:	cf 93       	push	r28
    108c:	df 93       	push	r29
    108e:	00 d0       	rcall	.+0      	; 0x1090 <myPrint+0x6>
    1090:	00 d0       	rcall	.+0      	; 0x1092 <myPrint+0x8>
    1092:	cd b7       	in	r28, 0x3d	; 61
    1094:	de b7       	in	r29, 0x3e	; 62
    1096:	9b 83       	std	Y+3, r25	; 0x03
    1098:	8a 83       	std	Y+2, r24	; 0x02
    109a:	6c 83       	std	Y+4, r22	; 0x04
	for(unsigned char i = 0; i < len; i++){
    109c:	19 82       	std	Y+1, r1	; 0x01
    109e:	1a c0       	rjmp	.+52     	; 0x10d4 <myPrint+0x4a>
		if(str[i] == '\0'){
    10a0:	89 81       	ldd	r24, Y+1	; 0x01
    10a2:	88 2f       	mov	r24, r24
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	2a 81       	ldd	r18, Y+2	; 0x02
    10a8:	3b 81       	ldd	r19, Y+3	; 0x03
    10aa:	82 0f       	add	r24, r18
    10ac:	93 1f       	adc	r25, r19
    10ae:	fc 01       	movw	r30, r24
    10b0:	80 81       	ld	r24, Z
    10b2:	88 23       	and	r24, r24
    10b4:	09 f4       	brne	.+2      	; 0x10b8 <myPrint+0x2e>
			break;
    10b6:	12 c0       	rjmp	.+36     	; 0x10dc <myPrint+0x52>
		}
		USART_Transmit(str[i]);
    10b8:	89 81       	ldd	r24, Y+1	; 0x01
    10ba:	88 2f       	mov	r24, r24
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	2a 81       	ldd	r18, Y+2	; 0x02
    10c0:	3b 81       	ldd	r19, Y+3	; 0x03
    10c2:	82 0f       	add	r24, r18
    10c4:	93 1f       	adc	r25, r19
    10c6:	fc 01       	movw	r30, r24
    10c8:	80 81       	ld	r24, Z
    10ca:	0e 94 b4 02 	call	0x568	; 0x568 <USART_Transmit>
	}
	USART_Transmit(0x0A);
}

void myPrint(unsigned char str[], unsigned char len){
	for(unsigned char i = 0; i < len; i++){
    10ce:	89 81       	ldd	r24, Y+1	; 0x01
    10d0:	8f 5f       	subi	r24, 0xFF	; 255
    10d2:	89 83       	std	Y+1, r24	; 0x01
    10d4:	99 81       	ldd	r25, Y+1	; 0x01
    10d6:	8c 81       	ldd	r24, Y+4	; 0x04
    10d8:	98 17       	cp	r25, r24
    10da:	10 f3       	brcs	.-60     	; 0x10a0 <myPrint+0x16>
		if(str[i] == '\0'){
			break;
		}
		USART_Transmit(str[i]);
	}
}
    10dc:	0f 90       	pop	r0
    10de:	0f 90       	pop	r0
    10e0:	0f 90       	pop	r0
    10e2:	0f 90       	pop	r0
    10e4:	df 91       	pop	r29
    10e6:	cf 91       	pop	r28
    10e8:	08 95       	ret

000010ea <__vector_18>:


ISR(USART_RX_vect){
    10ea:	1f 92       	push	r1
    10ec:	0f 92       	push	r0
    10ee:	00 90 5f 00 	lds	r0, 0x005F
    10f2:	0f 92       	push	r0
    10f4:	11 24       	eor	r1, r1
    10f6:	8f 93       	push	r24
    10f8:	9f 93       	push	r25
    10fa:	ef 93       	push	r30
    10fc:	ff 93       	push	r31
    10fe:	cf 93       	push	r28
    1100:	df 93       	push	r29
    1102:	cd b7       	in	r28, 0x3d	; 61
    1104:	de b7       	in	r29, 0x3e	; 62
	// dataReceived variable to allow the main function to know when new data is available
	dataReceived = 1;
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	80 93 62 01 	sts	0x0162, r24
	// Write the data from the USART I/O register to a buffer
	rxBuffer = UDR0;
    110c:	86 ec       	ldi	r24, 0xC6	; 198
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	fc 01       	movw	r30, r24
    1112:	80 81       	ld	r24, Z
    1114:	80 93 63 01 	sts	0x0163, r24
}
    1118:	df 91       	pop	r29
    111a:	cf 91       	pop	r28
    111c:	ff 91       	pop	r31
    111e:	ef 91       	pop	r30
    1120:	9f 91       	pop	r25
    1122:	8f 91       	pop	r24
    1124:	0f 90       	pop	r0
    1126:	00 92 5f 00 	sts	0x005F, r0
    112a:	0f 90       	pop	r0
    112c:	1f 90       	pop	r1
    112e:	18 95       	reti

00001130 <SPI_MasterInit>:


#include "spi_comm.h"
#include "myUSART.h"

void SPI_MasterInit(void){
    1130:	cf 93       	push	r28
    1132:	df 93       	push	r29
    1134:	cd b7       	in	r28, 0x3d	; 61
    1136:	de b7       	in	r29, 0x3e	; 62
    1138:	e2 97       	sbiw	r28, 0x32	; 50
    113a:	0f b6       	in	r0, 0x3f	; 63
    113c:	f8 94       	cli
    113e:	de bf       	out	0x3e, r29	; 62
    1140:	0f be       	out	0x3f, r0	; 63
    1142:	cd bf       	out	0x3d, r28	; 61
	unsigned char initializingSPI[50] = "Initializing SPI now\0";
    1144:	26 e1       	ldi	r18, 0x16	; 22
    1146:	ef e2       	ldi	r30, 0x2F	; 47
    1148:	f1 e0       	ldi	r31, 0x01	; 1
    114a:	ce 01       	movw	r24, r28
    114c:	01 96       	adiw	r24, 0x01	; 1
    114e:	dc 01       	movw	r26, r24
    1150:	01 90       	ld	r0, Z+
    1152:	0d 92       	st	X+, r0
    1154:	2a 95       	dec	r18
    1156:	e1 f7       	brne	.-8      	; 0x1150 <SPI_MasterInit+0x20>
    1158:	2c e1       	ldi	r18, 0x1C	; 28
    115a:	ce 01       	movw	r24, r28
    115c:	47 96       	adiw	r24, 0x17	; 23
    115e:	fc 01       	movw	r30, r24
    1160:	32 2f       	mov	r19, r18
    1162:	11 92       	st	Z+, r1
    1164:	3a 95       	dec	r19
    1166:	e9 f7       	brne	.-6      	; 0x1162 <SPI_MasterInit+0x32>
	myPrint(initializingSPI,21);
    1168:	65 e1       	ldi	r22, 0x15	; 21
    116a:	ce 01       	movw	r24, r28
    116c:	01 96       	adiw	r24, 0x01	; 1
    116e:	0e 94 45 08 	call	0x108a	; 0x108a <myPrint>
	// set MOSI, SCK and SS as output, all others are inputs.
	DDR_SPI = ( 1 << SPI_MOSI ) | ( 1 << SPI_SCK ) | ( 1 << SPI_SS );
    1172:	84 e2       	ldi	r24, 0x24	; 36
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	2c e2       	ldi	r18, 0x2C	; 44
    1178:	fc 01       	movw	r30, r24
    117a:	20 83       	st	Z, r18

	// Ensure that the SS line is high (no transmission) when the initialization is finished
	SPI_PORT |= ( 1 << SPI_SS );
    117c:	85 e2       	ldi	r24, 0x25	; 37
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	25 e2       	ldi	r18, 0x25	; 37
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	f9 01       	movw	r30, r18
    1186:	20 81       	ld	r18, Z
    1188:	24 60       	ori	r18, 0x04	; 4
    118a:	fc 01       	movw	r30, r24
    118c:	20 83       	st	Z, r18

	// SPI Control Register
	// SPE bit: SPI Enable
	// MSTR bit: Master select bit
	// SPR0 bit: Clock select bit, sets clock rate to Fosc/16, sets the clock polarity such that SCK is high when idle
	SPCR = ( 1 << SPE ) | ( 1 << MSTR ) | ( 1 << CPOL ) | ( 1 << SPR1 );// | ( 1 << SPR0 );
    118e:	8c e4       	ldi	r24, 0x4C	; 76
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	2a e5       	ldi	r18, 0x5A	; 90
    1194:	fc 01       	movw	r30, r24
    1196:	20 83       	st	Z, r18

	// Set data sampling at the trailing edge of SCK
	SPCR |= ( 1 << CPHA );
    1198:	8c e4       	ldi	r24, 0x4C	; 76
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	2c e4       	ldi	r18, 0x4C	; 76
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	f9 01       	movw	r30, r18
    11a2:	20 81       	ld	r18, Z
    11a4:	24 60       	ori	r18, 0x04	; 4
    11a6:	fc 01       	movw	r30, r24
    11a8:	20 83       	st	Z, r18
}
    11aa:	e2 96       	adiw	r28, 0x32	; 50
    11ac:	0f b6       	in	r0, 0x3f	; 63
    11ae:	f8 94       	cli
    11b0:	de bf       	out	0x3e, r29	; 62
    11b2:	0f be       	out	0x3f, r0	; 63
    11b4:	cd bf       	out	0x3d, r28	; 61
    11b6:	df 91       	pop	r29
    11b8:	cf 91       	pop	r28
    11ba:	08 95       	ret

000011bc <SPI_MasterTransmit>:

char SPI_MasterTransmit(char cData){
    11bc:	cf 93       	push	r28
    11be:	df 93       	push	r29
    11c0:	1f 92       	push	r1
    11c2:	cd b7       	in	r28, 0x3d	; 61
    11c4:	de b7       	in	r29, 0x3e	; 62
    11c6:	89 83       	std	Y+1, r24	; 0x01
	//unsigned char transmitting[50] = "Transmitting over SPI now\0";
	//myPrint(transmitting,30);
	// SPI Data Register, transfers data between register file and the SPI shift register
	//USART_Transmit_8_hex(cData);
	SPDR = cData;
    11c8:	8e e4       	ldi	r24, 0x4E	; 78
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	29 81       	ldd	r18, Y+1	; 0x01
    11ce:	fc 01       	movw	r30, r24
    11d0:	20 83       	st	Z, r18
	//asm volatile("nop");	// This is supposed to help

	// Wait for transmission to complete
	// SPI Status Register
	// SPIF bit: SPI Interrupt Flag, it is set when a serial transfer is complete
	while ( !( SPSR & ( 1 << SPIF ) ) );
    11d2:	00 00       	nop
    11d4:	8d e4       	ldi	r24, 0x4D	; 77
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	fc 01       	movw	r30, r24
    11da:	80 81       	ld	r24, Z
    11dc:	88 23       	and	r24, r24
    11de:	d4 f7       	brge	.-12     	; 0x11d4 <SPI_MasterTransmit+0x18>
	if(!(SPCR & ( 1 << MSTR) ) ){SPCR |= ( 1 << MSTR);}
    11e0:	8c e4       	ldi	r24, 0x4C	; 76
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	fc 01       	movw	r30, r24
    11e6:	80 81       	ld	r24, Z
    11e8:	88 2f       	mov	r24, r24
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	80 71       	andi	r24, 0x10	; 16
    11ee:	99 27       	eor	r25, r25
    11f0:	00 97       	sbiw	r24, 0x00	; 0
    11f2:	49 f4       	brne	.+18     	; 0x1206 <SPI_MasterTransmit+0x4a>
    11f4:	8c e4       	ldi	r24, 0x4C	; 76
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	2c e4       	ldi	r18, 0x4C	; 76
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	f9 01       	movw	r30, r18
    11fe:	20 81       	ld	r18, Z
    1200:	20 61       	ori	r18, 0x10	; 16
    1202:	fc 01       	movw	r30, r24
    1204:	20 83       	st	Z, r18

	return SPDR;
    1206:	8e e4       	ldi	r24, 0x4E	; 78
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	fc 01       	movw	r30, r24
    120c:	80 81       	ld	r24, Z
}
    120e:	0f 90       	pop	r0
    1210:	df 91       	pop	r29
    1212:	cf 91       	pop	r28
    1214:	08 95       	ret

00001216 <__divmodhi4>:
    1216:	97 fb       	bst	r25, 7
    1218:	07 2e       	mov	r0, r23
    121a:	16 f4       	brtc	.+4      	; 0x1220 <__divmodhi4+0xa>
    121c:	00 94       	com	r0
    121e:	07 d0       	rcall	.+14     	; 0x122e <__divmodhi4_neg1>
    1220:	77 fd       	sbrc	r23, 7
    1222:	09 d0       	rcall	.+18     	; 0x1236 <__divmodhi4_neg2>
    1224:	0e 94 4d 09 	call	0x129a	; 0x129a <__udivmodhi4>
    1228:	07 fc       	sbrc	r0, 7
    122a:	05 d0       	rcall	.+10     	; 0x1236 <__divmodhi4_neg2>
    122c:	3e f4       	brtc	.+14     	; 0x123c <__divmodhi4_exit>

0000122e <__divmodhi4_neg1>:
    122e:	90 95       	com	r25
    1230:	81 95       	neg	r24
    1232:	9f 4f       	sbci	r25, 0xFF	; 255
    1234:	08 95       	ret

00001236 <__divmodhi4_neg2>:
    1236:	70 95       	com	r23
    1238:	61 95       	neg	r22
    123a:	7f 4f       	sbci	r23, 0xFF	; 255

0000123c <__divmodhi4_exit>:
    123c:	08 95       	ret

0000123e <__divmodsi4>:
    123e:	05 2e       	mov	r0, r21
    1240:	97 fb       	bst	r25, 7
    1242:	1e f4       	brtc	.+6      	; 0x124a <__divmodsi4+0xc>
    1244:	00 94       	com	r0
    1246:	0e 94 36 09 	call	0x126c	; 0x126c <__negsi2>
    124a:	57 fd       	sbrc	r21, 7
    124c:	07 d0       	rcall	.+14     	; 0x125c <__divmodsi4_neg2>
    124e:	0e 94 61 09 	call	0x12c2	; 0x12c2 <__udivmodsi4>
    1252:	07 fc       	sbrc	r0, 7
    1254:	03 d0       	rcall	.+6      	; 0x125c <__divmodsi4_neg2>
    1256:	4e f4       	brtc	.+18     	; 0x126a <__divmodsi4_exit>
    1258:	0c 94 36 09 	jmp	0x126c	; 0x126c <__negsi2>

0000125c <__divmodsi4_neg2>:
    125c:	50 95       	com	r21
    125e:	40 95       	com	r20
    1260:	30 95       	com	r19
    1262:	21 95       	neg	r18
    1264:	3f 4f       	sbci	r19, 0xFF	; 255
    1266:	4f 4f       	sbci	r20, 0xFF	; 255
    1268:	5f 4f       	sbci	r21, 0xFF	; 255

0000126a <__divmodsi4_exit>:
    126a:	08 95       	ret

0000126c <__negsi2>:
    126c:	90 95       	com	r25
    126e:	80 95       	com	r24
    1270:	70 95       	com	r23
    1272:	61 95       	neg	r22
    1274:	7f 4f       	sbci	r23, 0xFF	; 255
    1276:	8f 4f       	sbci	r24, 0xFF	; 255
    1278:	9f 4f       	sbci	r25, 0xFF	; 255
    127a:	08 95       	ret

0000127c <__umulhisi3>:
    127c:	a2 9f       	mul	r26, r18
    127e:	b0 01       	movw	r22, r0
    1280:	b3 9f       	mul	r27, r19
    1282:	c0 01       	movw	r24, r0
    1284:	a3 9f       	mul	r26, r19
    1286:	70 0d       	add	r23, r0
    1288:	81 1d       	adc	r24, r1
    128a:	11 24       	eor	r1, r1
    128c:	91 1d       	adc	r25, r1
    128e:	b2 9f       	mul	r27, r18
    1290:	70 0d       	add	r23, r0
    1292:	81 1d       	adc	r24, r1
    1294:	11 24       	eor	r1, r1
    1296:	91 1d       	adc	r25, r1
    1298:	08 95       	ret

0000129a <__udivmodhi4>:
    129a:	aa 1b       	sub	r26, r26
    129c:	bb 1b       	sub	r27, r27
    129e:	51 e1       	ldi	r21, 0x11	; 17
    12a0:	07 c0       	rjmp	.+14     	; 0x12b0 <__udivmodhi4_ep>

000012a2 <__udivmodhi4_loop>:
    12a2:	aa 1f       	adc	r26, r26
    12a4:	bb 1f       	adc	r27, r27
    12a6:	a6 17       	cp	r26, r22
    12a8:	b7 07       	cpc	r27, r23
    12aa:	10 f0       	brcs	.+4      	; 0x12b0 <__udivmodhi4_ep>
    12ac:	a6 1b       	sub	r26, r22
    12ae:	b7 0b       	sbc	r27, r23

000012b0 <__udivmodhi4_ep>:
    12b0:	88 1f       	adc	r24, r24
    12b2:	99 1f       	adc	r25, r25
    12b4:	5a 95       	dec	r21
    12b6:	a9 f7       	brne	.-22     	; 0x12a2 <__udivmodhi4_loop>
    12b8:	80 95       	com	r24
    12ba:	90 95       	com	r25
    12bc:	bc 01       	movw	r22, r24
    12be:	cd 01       	movw	r24, r26
    12c0:	08 95       	ret

000012c2 <__udivmodsi4>:
    12c2:	a1 e2       	ldi	r26, 0x21	; 33
    12c4:	1a 2e       	mov	r1, r26
    12c6:	aa 1b       	sub	r26, r26
    12c8:	bb 1b       	sub	r27, r27
    12ca:	fd 01       	movw	r30, r26
    12cc:	0d c0       	rjmp	.+26     	; 0x12e8 <__udivmodsi4_ep>

000012ce <__udivmodsi4_loop>:
    12ce:	aa 1f       	adc	r26, r26
    12d0:	bb 1f       	adc	r27, r27
    12d2:	ee 1f       	adc	r30, r30
    12d4:	ff 1f       	adc	r31, r31
    12d6:	a2 17       	cp	r26, r18
    12d8:	b3 07       	cpc	r27, r19
    12da:	e4 07       	cpc	r30, r20
    12dc:	f5 07       	cpc	r31, r21
    12de:	20 f0       	brcs	.+8      	; 0x12e8 <__udivmodsi4_ep>
    12e0:	a2 1b       	sub	r26, r18
    12e2:	b3 0b       	sbc	r27, r19
    12e4:	e4 0b       	sbc	r30, r20
    12e6:	f5 0b       	sbc	r31, r21

000012e8 <__udivmodsi4_ep>:
    12e8:	66 1f       	adc	r22, r22
    12ea:	77 1f       	adc	r23, r23
    12ec:	88 1f       	adc	r24, r24
    12ee:	99 1f       	adc	r25, r25
    12f0:	1a 94       	dec	r1
    12f2:	69 f7       	brne	.-38     	; 0x12ce <__udivmodsi4_loop>
    12f4:	60 95       	com	r22
    12f6:	70 95       	com	r23
    12f8:	80 95       	com	r24
    12fa:	90 95       	com	r25
    12fc:	9b 01       	movw	r18, r22
    12fe:	ac 01       	movw	r20, r24
    1300:	bd 01       	movw	r22, r26
    1302:	cf 01       	movw	r24, r30
    1304:	08 95       	ret

00001306 <__floatunsisf>:
    1306:	e8 94       	clt
    1308:	09 c0       	rjmp	.+18     	; 0x131c <__floatsisf+0x12>

0000130a <__floatsisf>:
    130a:	97 fb       	bst	r25, 7
    130c:	3e f4       	brtc	.+14     	; 0x131c <__floatsisf+0x12>
    130e:	90 95       	com	r25
    1310:	80 95       	com	r24
    1312:	70 95       	com	r23
    1314:	61 95       	neg	r22
    1316:	7f 4f       	sbci	r23, 0xFF	; 255
    1318:	8f 4f       	sbci	r24, 0xFF	; 255
    131a:	9f 4f       	sbci	r25, 0xFF	; 255
    131c:	99 23       	and	r25, r25
    131e:	a9 f0       	breq	.+42     	; 0x134a <__floatsisf+0x40>
    1320:	f9 2f       	mov	r31, r25
    1322:	96 e9       	ldi	r25, 0x96	; 150
    1324:	bb 27       	eor	r27, r27
    1326:	93 95       	inc	r25
    1328:	f6 95       	lsr	r31
    132a:	87 95       	ror	r24
    132c:	77 95       	ror	r23
    132e:	67 95       	ror	r22
    1330:	b7 95       	ror	r27
    1332:	f1 11       	cpse	r31, r1
    1334:	f8 cf       	rjmp	.-16     	; 0x1326 <__floatsisf+0x1c>
    1336:	fa f4       	brpl	.+62     	; 0x1376 <__floatsisf+0x6c>
    1338:	bb 0f       	add	r27, r27
    133a:	11 f4       	brne	.+4      	; 0x1340 <__floatsisf+0x36>
    133c:	60 ff       	sbrs	r22, 0
    133e:	1b c0       	rjmp	.+54     	; 0x1376 <__floatsisf+0x6c>
    1340:	6f 5f       	subi	r22, 0xFF	; 255
    1342:	7f 4f       	sbci	r23, 0xFF	; 255
    1344:	8f 4f       	sbci	r24, 0xFF	; 255
    1346:	9f 4f       	sbci	r25, 0xFF	; 255
    1348:	16 c0       	rjmp	.+44     	; 0x1376 <__floatsisf+0x6c>
    134a:	88 23       	and	r24, r24
    134c:	11 f0       	breq	.+4      	; 0x1352 <__floatsisf+0x48>
    134e:	96 e9       	ldi	r25, 0x96	; 150
    1350:	11 c0       	rjmp	.+34     	; 0x1374 <__floatsisf+0x6a>
    1352:	77 23       	and	r23, r23
    1354:	21 f0       	breq	.+8      	; 0x135e <__floatsisf+0x54>
    1356:	9e e8       	ldi	r25, 0x8E	; 142
    1358:	87 2f       	mov	r24, r23
    135a:	76 2f       	mov	r23, r22
    135c:	05 c0       	rjmp	.+10     	; 0x1368 <__floatsisf+0x5e>
    135e:	66 23       	and	r22, r22
    1360:	71 f0       	breq	.+28     	; 0x137e <__floatsisf+0x74>
    1362:	96 e8       	ldi	r25, 0x86	; 134
    1364:	86 2f       	mov	r24, r22
    1366:	70 e0       	ldi	r23, 0x00	; 0
    1368:	60 e0       	ldi	r22, 0x00	; 0
    136a:	2a f0       	brmi	.+10     	; 0x1376 <__floatsisf+0x6c>
    136c:	9a 95       	dec	r25
    136e:	66 0f       	add	r22, r22
    1370:	77 1f       	adc	r23, r23
    1372:	88 1f       	adc	r24, r24
    1374:	da f7       	brpl	.-10     	; 0x136c <__floatsisf+0x62>
    1376:	88 0f       	add	r24, r24
    1378:	96 95       	lsr	r25
    137a:	87 95       	ror	r24
    137c:	97 f9       	bld	r25, 7
    137e:	08 95       	ret

00001380 <__mulsf3>:
    1380:	0b d0       	rcall	.+22     	; 0x1398 <__mulsf3x>
    1382:	78 c0       	rjmp	.+240    	; 0x1474 <__fp_round>
    1384:	69 d0       	rcall	.+210    	; 0x1458 <__fp_pscA>
    1386:	28 f0       	brcs	.+10     	; 0x1392 <__mulsf3+0x12>
    1388:	6e d0       	rcall	.+220    	; 0x1466 <__fp_pscB>
    138a:	18 f0       	brcs	.+6      	; 0x1392 <__mulsf3+0x12>
    138c:	95 23       	and	r25, r21
    138e:	09 f0       	breq	.+2      	; 0x1392 <__mulsf3+0x12>
    1390:	5a c0       	rjmp	.+180    	; 0x1446 <__fp_inf>
    1392:	5f c0       	rjmp	.+190    	; 0x1452 <__fp_nan>
    1394:	11 24       	eor	r1, r1
    1396:	a2 c0       	rjmp	.+324    	; 0x14dc <__fp_szero>

00001398 <__mulsf3x>:
    1398:	7e d0       	rcall	.+252    	; 0x1496 <__fp_split3>
    139a:	a0 f3       	brcs	.-24     	; 0x1384 <__mulsf3+0x4>

0000139c <__mulsf3_pse>:
    139c:	95 9f       	mul	r25, r21
    139e:	d1 f3       	breq	.-12     	; 0x1394 <__mulsf3+0x14>
    13a0:	95 0f       	add	r25, r21
    13a2:	50 e0       	ldi	r21, 0x00	; 0
    13a4:	55 1f       	adc	r21, r21
    13a6:	62 9f       	mul	r22, r18
    13a8:	f0 01       	movw	r30, r0
    13aa:	72 9f       	mul	r23, r18
    13ac:	bb 27       	eor	r27, r27
    13ae:	f0 0d       	add	r31, r0
    13b0:	b1 1d       	adc	r27, r1
    13b2:	63 9f       	mul	r22, r19
    13b4:	aa 27       	eor	r26, r26
    13b6:	f0 0d       	add	r31, r0
    13b8:	b1 1d       	adc	r27, r1
    13ba:	aa 1f       	adc	r26, r26
    13bc:	64 9f       	mul	r22, r20
    13be:	66 27       	eor	r22, r22
    13c0:	b0 0d       	add	r27, r0
    13c2:	a1 1d       	adc	r26, r1
    13c4:	66 1f       	adc	r22, r22
    13c6:	82 9f       	mul	r24, r18
    13c8:	22 27       	eor	r18, r18
    13ca:	b0 0d       	add	r27, r0
    13cc:	a1 1d       	adc	r26, r1
    13ce:	62 1f       	adc	r22, r18
    13d0:	73 9f       	mul	r23, r19
    13d2:	b0 0d       	add	r27, r0
    13d4:	a1 1d       	adc	r26, r1
    13d6:	62 1f       	adc	r22, r18
    13d8:	83 9f       	mul	r24, r19
    13da:	a0 0d       	add	r26, r0
    13dc:	61 1d       	adc	r22, r1
    13de:	22 1f       	adc	r18, r18
    13e0:	74 9f       	mul	r23, r20
    13e2:	33 27       	eor	r19, r19
    13e4:	a0 0d       	add	r26, r0
    13e6:	61 1d       	adc	r22, r1
    13e8:	23 1f       	adc	r18, r19
    13ea:	84 9f       	mul	r24, r20
    13ec:	60 0d       	add	r22, r0
    13ee:	21 1d       	adc	r18, r1
    13f0:	82 2f       	mov	r24, r18
    13f2:	76 2f       	mov	r23, r22
    13f4:	6a 2f       	mov	r22, r26
    13f6:	11 24       	eor	r1, r1
    13f8:	9f 57       	subi	r25, 0x7F	; 127
    13fa:	50 40       	sbci	r21, 0x00	; 0
    13fc:	8a f0       	brmi	.+34     	; 0x1420 <__mulsf3_pse+0x84>
    13fe:	e1 f0       	breq	.+56     	; 0x1438 <__mulsf3_pse+0x9c>
    1400:	88 23       	and	r24, r24
    1402:	4a f0       	brmi	.+18     	; 0x1416 <__mulsf3_pse+0x7a>
    1404:	ee 0f       	add	r30, r30
    1406:	ff 1f       	adc	r31, r31
    1408:	bb 1f       	adc	r27, r27
    140a:	66 1f       	adc	r22, r22
    140c:	77 1f       	adc	r23, r23
    140e:	88 1f       	adc	r24, r24
    1410:	91 50       	subi	r25, 0x01	; 1
    1412:	50 40       	sbci	r21, 0x00	; 0
    1414:	a9 f7       	brne	.-22     	; 0x1400 <__mulsf3_pse+0x64>
    1416:	9e 3f       	cpi	r25, 0xFE	; 254
    1418:	51 05       	cpc	r21, r1
    141a:	70 f0       	brcs	.+28     	; 0x1438 <__mulsf3_pse+0x9c>
    141c:	14 c0       	rjmp	.+40     	; 0x1446 <__fp_inf>
    141e:	5e c0       	rjmp	.+188    	; 0x14dc <__fp_szero>
    1420:	5f 3f       	cpi	r21, 0xFF	; 255
    1422:	ec f3       	brlt	.-6      	; 0x141e <__mulsf3_pse+0x82>
    1424:	98 3e       	cpi	r25, 0xE8	; 232
    1426:	dc f3       	brlt	.-10     	; 0x141e <__mulsf3_pse+0x82>
    1428:	86 95       	lsr	r24
    142a:	77 95       	ror	r23
    142c:	67 95       	ror	r22
    142e:	b7 95       	ror	r27
    1430:	f7 95       	ror	r31
    1432:	e7 95       	ror	r30
    1434:	9f 5f       	subi	r25, 0xFF	; 255
    1436:	c1 f7       	brne	.-16     	; 0x1428 <__mulsf3_pse+0x8c>
    1438:	fe 2b       	or	r31, r30
    143a:	88 0f       	add	r24, r24
    143c:	91 1d       	adc	r25, r1
    143e:	96 95       	lsr	r25
    1440:	87 95       	ror	r24
    1442:	97 f9       	bld	r25, 7
    1444:	08 95       	ret

00001446 <__fp_inf>:
    1446:	97 f9       	bld	r25, 7
    1448:	9f 67       	ori	r25, 0x7F	; 127
    144a:	80 e8       	ldi	r24, 0x80	; 128
    144c:	70 e0       	ldi	r23, 0x00	; 0
    144e:	60 e0       	ldi	r22, 0x00	; 0
    1450:	08 95       	ret

00001452 <__fp_nan>:
    1452:	9f ef       	ldi	r25, 0xFF	; 255
    1454:	80 ec       	ldi	r24, 0xC0	; 192
    1456:	08 95       	ret

00001458 <__fp_pscA>:
    1458:	00 24       	eor	r0, r0
    145a:	0a 94       	dec	r0
    145c:	16 16       	cp	r1, r22
    145e:	17 06       	cpc	r1, r23
    1460:	18 06       	cpc	r1, r24
    1462:	09 06       	cpc	r0, r25
    1464:	08 95       	ret

00001466 <__fp_pscB>:
    1466:	00 24       	eor	r0, r0
    1468:	0a 94       	dec	r0
    146a:	12 16       	cp	r1, r18
    146c:	13 06       	cpc	r1, r19
    146e:	14 06       	cpc	r1, r20
    1470:	05 06       	cpc	r0, r21
    1472:	08 95       	ret

00001474 <__fp_round>:
    1474:	09 2e       	mov	r0, r25
    1476:	03 94       	inc	r0
    1478:	00 0c       	add	r0, r0
    147a:	11 f4       	brne	.+4      	; 0x1480 <__fp_round+0xc>
    147c:	88 23       	and	r24, r24
    147e:	52 f0       	brmi	.+20     	; 0x1494 <__fp_round+0x20>
    1480:	bb 0f       	add	r27, r27
    1482:	40 f4       	brcc	.+16     	; 0x1494 <__fp_round+0x20>
    1484:	bf 2b       	or	r27, r31
    1486:	11 f4       	brne	.+4      	; 0x148c <__fp_round+0x18>
    1488:	60 ff       	sbrs	r22, 0
    148a:	04 c0       	rjmp	.+8      	; 0x1494 <__fp_round+0x20>
    148c:	6f 5f       	subi	r22, 0xFF	; 255
    148e:	7f 4f       	sbci	r23, 0xFF	; 255
    1490:	8f 4f       	sbci	r24, 0xFF	; 255
    1492:	9f 4f       	sbci	r25, 0xFF	; 255
    1494:	08 95       	ret

00001496 <__fp_split3>:
    1496:	57 fd       	sbrc	r21, 7
    1498:	90 58       	subi	r25, 0x80	; 128
    149a:	44 0f       	add	r20, r20
    149c:	55 1f       	adc	r21, r21
    149e:	59 f0       	breq	.+22     	; 0x14b6 <__fp_splitA+0x10>
    14a0:	5f 3f       	cpi	r21, 0xFF	; 255
    14a2:	71 f0       	breq	.+28     	; 0x14c0 <__fp_splitA+0x1a>
    14a4:	47 95       	ror	r20

000014a6 <__fp_splitA>:
    14a6:	88 0f       	add	r24, r24
    14a8:	97 fb       	bst	r25, 7
    14aa:	99 1f       	adc	r25, r25
    14ac:	61 f0       	breq	.+24     	; 0x14c6 <__fp_splitA+0x20>
    14ae:	9f 3f       	cpi	r25, 0xFF	; 255
    14b0:	79 f0       	breq	.+30     	; 0x14d0 <__fp_splitA+0x2a>
    14b2:	87 95       	ror	r24
    14b4:	08 95       	ret
    14b6:	12 16       	cp	r1, r18
    14b8:	13 06       	cpc	r1, r19
    14ba:	14 06       	cpc	r1, r20
    14bc:	55 1f       	adc	r21, r21
    14be:	f2 cf       	rjmp	.-28     	; 0x14a4 <__fp_split3+0xe>
    14c0:	46 95       	lsr	r20
    14c2:	f1 df       	rcall	.-30     	; 0x14a6 <__fp_splitA>
    14c4:	08 c0       	rjmp	.+16     	; 0x14d6 <__fp_splitA+0x30>
    14c6:	16 16       	cp	r1, r22
    14c8:	17 06       	cpc	r1, r23
    14ca:	18 06       	cpc	r1, r24
    14cc:	99 1f       	adc	r25, r25
    14ce:	f1 cf       	rjmp	.-30     	; 0x14b2 <__fp_splitA+0xc>
    14d0:	86 95       	lsr	r24
    14d2:	71 05       	cpc	r23, r1
    14d4:	61 05       	cpc	r22, r1
    14d6:	08 94       	sec
    14d8:	08 95       	ret

000014da <__fp_zero>:
    14da:	e8 94       	clt

000014dc <__fp_szero>:
    14dc:	bb 27       	eor	r27, r27
    14de:	66 27       	eor	r22, r22
    14e0:	77 27       	eor	r23, r23
    14e2:	cb 01       	movw	r24, r22
    14e4:	97 f9       	bld	r25, 7
    14e6:	08 95       	ret

000014e8 <printf>:
    14e8:	a0 e0       	ldi	r26, 0x00	; 0
    14ea:	b0 e0       	ldi	r27, 0x00	; 0
    14ec:	ea e7       	ldi	r30, 0x7A	; 122
    14ee:	fa e0       	ldi	r31, 0x0A	; 10
    14f0:	0c 94 10 0d 	jmp	0x1a20	; 0x1a20 <__prologue_saves__+0x20>
    14f4:	fe 01       	movw	r30, r28
    14f6:	35 96       	adiw	r30, 0x05	; 5
    14f8:	61 91       	ld	r22, Z+
    14fa:	71 91       	ld	r23, Z+
    14fc:	af 01       	movw	r20, r30
    14fe:	80 91 66 01 	lds	r24, 0x0166
    1502:	90 91 67 01 	lds	r25, 0x0167
    1506:	0e 94 88 0a 	call	0x1510	; 0x1510 <vfprintf>
    150a:	e2 e0       	ldi	r30, 0x02	; 2
    150c:	0c 94 2c 0d 	jmp	0x1a58	; 0x1a58 <__epilogue_restores__+0x20>

00001510 <vfprintf>:
    1510:	ac e0       	ldi	r26, 0x0C	; 12
    1512:	b0 e0       	ldi	r27, 0x00	; 0
    1514:	ee e8       	ldi	r30, 0x8E	; 142
    1516:	fa e0       	ldi	r31, 0x0A	; 10
    1518:	0c 94 00 0d 	jmp	0x1a00	; 0x1a00 <__prologue_saves__>
    151c:	7c 01       	movw	r14, r24
    151e:	6b 01       	movw	r12, r22
    1520:	8a 01       	movw	r16, r20
    1522:	fc 01       	movw	r30, r24
    1524:	17 82       	std	Z+7, r1	; 0x07
    1526:	16 82       	std	Z+6, r1	; 0x06
    1528:	83 81       	ldd	r24, Z+3	; 0x03
    152a:	81 ff       	sbrs	r24, 1
    152c:	bd c1       	rjmp	.+890    	; 0x18a8 <vfprintf+0x398>
    152e:	ce 01       	movw	r24, r28
    1530:	01 96       	adiw	r24, 0x01	; 1
    1532:	4c 01       	movw	r8, r24
    1534:	f7 01       	movw	r30, r14
    1536:	93 81       	ldd	r25, Z+3	; 0x03
    1538:	f6 01       	movw	r30, r12
    153a:	93 fd       	sbrc	r25, 3
    153c:	85 91       	lpm	r24, Z+
    153e:	93 ff       	sbrs	r25, 3
    1540:	81 91       	ld	r24, Z+
    1542:	6f 01       	movw	r12, r30
    1544:	88 23       	and	r24, r24
    1546:	09 f4       	brne	.+2      	; 0x154a <vfprintf+0x3a>
    1548:	ab c1       	rjmp	.+854    	; 0x18a0 <vfprintf+0x390>
    154a:	85 32       	cpi	r24, 0x25	; 37
    154c:	39 f4       	brne	.+14     	; 0x155c <vfprintf+0x4c>
    154e:	93 fd       	sbrc	r25, 3
    1550:	85 91       	lpm	r24, Z+
    1552:	93 ff       	sbrs	r25, 3
    1554:	81 91       	ld	r24, Z+
    1556:	6f 01       	movw	r12, r30
    1558:	85 32       	cpi	r24, 0x25	; 37
    155a:	29 f4       	brne	.+10     	; 0x1566 <vfprintf+0x56>
    155c:	b7 01       	movw	r22, r14
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <fputc>
    1564:	e7 cf       	rjmp	.-50     	; 0x1534 <vfprintf+0x24>
    1566:	51 2c       	mov	r5, r1
    1568:	31 2c       	mov	r3, r1
    156a:	20 e0       	ldi	r18, 0x00	; 0
    156c:	20 32       	cpi	r18, 0x20	; 32
    156e:	a0 f4       	brcc	.+40     	; 0x1598 <vfprintf+0x88>
    1570:	8b 32       	cpi	r24, 0x2B	; 43
    1572:	69 f0       	breq	.+26     	; 0x158e <vfprintf+0x7e>
    1574:	30 f4       	brcc	.+12     	; 0x1582 <vfprintf+0x72>
    1576:	80 32       	cpi	r24, 0x20	; 32
    1578:	59 f0       	breq	.+22     	; 0x1590 <vfprintf+0x80>
    157a:	83 32       	cpi	r24, 0x23	; 35
    157c:	69 f4       	brne	.+26     	; 0x1598 <vfprintf+0x88>
    157e:	20 61       	ori	r18, 0x10	; 16
    1580:	2c c0       	rjmp	.+88     	; 0x15da <vfprintf+0xca>
    1582:	8d 32       	cpi	r24, 0x2D	; 45
    1584:	39 f0       	breq	.+14     	; 0x1594 <vfprintf+0x84>
    1586:	80 33       	cpi	r24, 0x30	; 48
    1588:	39 f4       	brne	.+14     	; 0x1598 <vfprintf+0x88>
    158a:	21 60       	ori	r18, 0x01	; 1
    158c:	26 c0       	rjmp	.+76     	; 0x15da <vfprintf+0xca>
    158e:	22 60       	ori	r18, 0x02	; 2
    1590:	24 60       	ori	r18, 0x04	; 4
    1592:	23 c0       	rjmp	.+70     	; 0x15da <vfprintf+0xca>
    1594:	28 60       	ori	r18, 0x08	; 8
    1596:	21 c0       	rjmp	.+66     	; 0x15da <vfprintf+0xca>
    1598:	27 fd       	sbrc	r18, 7
    159a:	27 c0       	rjmp	.+78     	; 0x15ea <vfprintf+0xda>
    159c:	30 ed       	ldi	r19, 0xD0	; 208
    159e:	38 0f       	add	r19, r24
    15a0:	3a 30       	cpi	r19, 0x0A	; 10
    15a2:	78 f4       	brcc	.+30     	; 0x15c2 <vfprintf+0xb2>
    15a4:	26 ff       	sbrs	r18, 6
    15a6:	06 c0       	rjmp	.+12     	; 0x15b4 <vfprintf+0xa4>
    15a8:	fa e0       	ldi	r31, 0x0A	; 10
    15aa:	5f 9e       	mul	r5, r31
    15ac:	30 0d       	add	r19, r0
    15ae:	11 24       	eor	r1, r1
    15b0:	53 2e       	mov	r5, r19
    15b2:	13 c0       	rjmp	.+38     	; 0x15da <vfprintf+0xca>
    15b4:	8a e0       	ldi	r24, 0x0A	; 10
    15b6:	38 9e       	mul	r3, r24
    15b8:	30 0d       	add	r19, r0
    15ba:	11 24       	eor	r1, r1
    15bc:	33 2e       	mov	r3, r19
    15be:	20 62       	ori	r18, 0x20	; 32
    15c0:	0c c0       	rjmp	.+24     	; 0x15da <vfprintf+0xca>
    15c2:	8e 32       	cpi	r24, 0x2E	; 46
    15c4:	21 f4       	brne	.+8      	; 0x15ce <vfprintf+0xbe>
    15c6:	26 fd       	sbrc	r18, 6
    15c8:	6b c1       	rjmp	.+726    	; 0x18a0 <vfprintf+0x390>
    15ca:	20 64       	ori	r18, 0x40	; 64
    15cc:	06 c0       	rjmp	.+12     	; 0x15da <vfprintf+0xca>
    15ce:	8c 36       	cpi	r24, 0x6C	; 108
    15d0:	11 f4       	brne	.+4      	; 0x15d6 <vfprintf+0xc6>
    15d2:	20 68       	ori	r18, 0x80	; 128
    15d4:	02 c0       	rjmp	.+4      	; 0x15da <vfprintf+0xca>
    15d6:	88 36       	cpi	r24, 0x68	; 104
    15d8:	41 f4       	brne	.+16     	; 0x15ea <vfprintf+0xda>
    15da:	f6 01       	movw	r30, r12
    15dc:	93 fd       	sbrc	r25, 3
    15de:	85 91       	lpm	r24, Z+
    15e0:	93 ff       	sbrs	r25, 3
    15e2:	81 91       	ld	r24, Z+
    15e4:	6f 01       	movw	r12, r30
    15e6:	81 11       	cpse	r24, r1
    15e8:	c1 cf       	rjmp	.-126    	; 0x156c <vfprintf+0x5c>
    15ea:	98 2f       	mov	r25, r24
    15ec:	9f 7d       	andi	r25, 0xDF	; 223
    15ee:	95 54       	subi	r25, 0x45	; 69
    15f0:	93 30       	cpi	r25, 0x03	; 3
    15f2:	28 f4       	brcc	.+10     	; 0x15fe <vfprintf+0xee>
    15f4:	0c 5f       	subi	r16, 0xFC	; 252
    15f6:	1f 4f       	sbci	r17, 0xFF	; 255
    15f8:	ff e3       	ldi	r31, 0x3F	; 63
    15fa:	f9 83       	std	Y+1, r31	; 0x01
    15fc:	0d c0       	rjmp	.+26     	; 0x1618 <vfprintf+0x108>
    15fe:	83 36       	cpi	r24, 0x63	; 99
    1600:	31 f0       	breq	.+12     	; 0x160e <vfprintf+0xfe>
    1602:	83 37       	cpi	r24, 0x73	; 115
    1604:	71 f0       	breq	.+28     	; 0x1622 <vfprintf+0x112>
    1606:	83 35       	cpi	r24, 0x53	; 83
    1608:	09 f0       	breq	.+2      	; 0x160c <vfprintf+0xfc>
    160a:	5b c0       	rjmp	.+182    	; 0x16c2 <vfprintf+0x1b2>
    160c:	22 c0       	rjmp	.+68     	; 0x1652 <vfprintf+0x142>
    160e:	f8 01       	movw	r30, r16
    1610:	80 81       	ld	r24, Z
    1612:	89 83       	std	Y+1, r24	; 0x01
    1614:	0e 5f       	subi	r16, 0xFE	; 254
    1616:	1f 4f       	sbci	r17, 0xFF	; 255
    1618:	44 24       	eor	r4, r4
    161a:	43 94       	inc	r4
    161c:	51 2c       	mov	r5, r1
    161e:	54 01       	movw	r10, r8
    1620:	15 c0       	rjmp	.+42     	; 0x164c <vfprintf+0x13c>
    1622:	38 01       	movw	r6, r16
    1624:	f2 e0       	ldi	r31, 0x02	; 2
    1626:	6f 0e       	add	r6, r31
    1628:	71 1c       	adc	r7, r1
    162a:	f8 01       	movw	r30, r16
    162c:	a0 80       	ld	r10, Z
    162e:	b1 80       	ldd	r11, Z+1	; 0x01
    1630:	26 ff       	sbrs	r18, 6
    1632:	03 c0       	rjmp	.+6      	; 0x163a <vfprintf+0x12a>
    1634:	65 2d       	mov	r22, r5
    1636:	70 e0       	ldi	r23, 0x00	; 0
    1638:	02 c0       	rjmp	.+4      	; 0x163e <vfprintf+0x12e>
    163a:	6f ef       	ldi	r22, 0xFF	; 255
    163c:	7f ef       	ldi	r23, 0xFF	; 255
    163e:	c5 01       	movw	r24, r10
    1640:	2c 87       	std	Y+12, r18	; 0x0c
    1642:	0e 94 65 0c 	call	0x18ca	; 0x18ca <strnlen>
    1646:	2c 01       	movw	r4, r24
    1648:	83 01       	movw	r16, r6
    164a:	2c 85       	ldd	r18, Y+12	; 0x0c
    164c:	2f 77       	andi	r18, 0x7F	; 127
    164e:	22 2e       	mov	r2, r18
    1650:	17 c0       	rjmp	.+46     	; 0x1680 <vfprintf+0x170>
    1652:	38 01       	movw	r6, r16
    1654:	f2 e0       	ldi	r31, 0x02	; 2
    1656:	6f 0e       	add	r6, r31
    1658:	71 1c       	adc	r7, r1
    165a:	f8 01       	movw	r30, r16
    165c:	a0 80       	ld	r10, Z
    165e:	b1 80       	ldd	r11, Z+1	; 0x01
    1660:	26 ff       	sbrs	r18, 6
    1662:	03 c0       	rjmp	.+6      	; 0x166a <vfprintf+0x15a>
    1664:	65 2d       	mov	r22, r5
    1666:	70 e0       	ldi	r23, 0x00	; 0
    1668:	02 c0       	rjmp	.+4      	; 0x166e <vfprintf+0x15e>
    166a:	6f ef       	ldi	r22, 0xFF	; 255
    166c:	7f ef       	ldi	r23, 0xFF	; 255
    166e:	c5 01       	movw	r24, r10
    1670:	2c 87       	std	Y+12, r18	; 0x0c
    1672:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <strnlen_P>
    1676:	2c 01       	movw	r4, r24
    1678:	2c 85       	ldd	r18, Y+12	; 0x0c
    167a:	20 68       	ori	r18, 0x80	; 128
    167c:	22 2e       	mov	r2, r18
    167e:	83 01       	movw	r16, r6
    1680:	23 fc       	sbrc	r2, 3
    1682:	1b c0       	rjmp	.+54     	; 0x16ba <vfprintf+0x1aa>
    1684:	83 2d       	mov	r24, r3
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	48 16       	cp	r4, r24
    168a:	59 06       	cpc	r5, r25
    168c:	b0 f4       	brcc	.+44     	; 0x16ba <vfprintf+0x1aa>
    168e:	b7 01       	movw	r22, r14
    1690:	80 e2       	ldi	r24, 0x20	; 32
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <fputc>
    1698:	3a 94       	dec	r3
    169a:	f4 cf       	rjmp	.-24     	; 0x1684 <vfprintf+0x174>
    169c:	f5 01       	movw	r30, r10
    169e:	27 fc       	sbrc	r2, 7
    16a0:	85 91       	lpm	r24, Z+
    16a2:	27 fe       	sbrs	r2, 7
    16a4:	81 91       	ld	r24, Z+
    16a6:	5f 01       	movw	r10, r30
    16a8:	b7 01       	movw	r22, r14
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <fputc>
    16b0:	31 10       	cpse	r3, r1
    16b2:	3a 94       	dec	r3
    16b4:	f1 e0       	ldi	r31, 0x01	; 1
    16b6:	4f 1a       	sub	r4, r31
    16b8:	51 08       	sbc	r5, r1
    16ba:	41 14       	cp	r4, r1
    16bc:	51 04       	cpc	r5, r1
    16be:	71 f7       	brne	.-36     	; 0x169c <vfprintf+0x18c>
    16c0:	e5 c0       	rjmp	.+458    	; 0x188c <vfprintf+0x37c>
    16c2:	84 36       	cpi	r24, 0x64	; 100
    16c4:	11 f0       	breq	.+4      	; 0x16ca <vfprintf+0x1ba>
    16c6:	89 36       	cpi	r24, 0x69	; 105
    16c8:	39 f5       	brne	.+78     	; 0x1718 <vfprintf+0x208>
    16ca:	f8 01       	movw	r30, r16
    16cc:	27 ff       	sbrs	r18, 7
    16ce:	07 c0       	rjmp	.+14     	; 0x16de <vfprintf+0x1ce>
    16d0:	60 81       	ld	r22, Z
    16d2:	71 81       	ldd	r23, Z+1	; 0x01
    16d4:	82 81       	ldd	r24, Z+2	; 0x02
    16d6:	93 81       	ldd	r25, Z+3	; 0x03
    16d8:	0c 5f       	subi	r16, 0xFC	; 252
    16da:	1f 4f       	sbci	r17, 0xFF	; 255
    16dc:	08 c0       	rjmp	.+16     	; 0x16ee <vfprintf+0x1de>
    16de:	60 81       	ld	r22, Z
    16e0:	71 81       	ldd	r23, Z+1	; 0x01
    16e2:	88 27       	eor	r24, r24
    16e4:	77 fd       	sbrc	r23, 7
    16e6:	80 95       	com	r24
    16e8:	98 2f       	mov	r25, r24
    16ea:	0e 5f       	subi	r16, 0xFE	; 254
    16ec:	1f 4f       	sbci	r17, 0xFF	; 255
    16ee:	2f 76       	andi	r18, 0x6F	; 111
    16f0:	b2 2e       	mov	r11, r18
    16f2:	97 ff       	sbrs	r25, 7
    16f4:	09 c0       	rjmp	.+18     	; 0x1708 <vfprintf+0x1f8>
    16f6:	90 95       	com	r25
    16f8:	80 95       	com	r24
    16fa:	70 95       	com	r23
    16fc:	61 95       	neg	r22
    16fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1700:	8f 4f       	sbci	r24, 0xFF	; 255
    1702:	9f 4f       	sbci	r25, 0xFF	; 255
    1704:	20 68       	ori	r18, 0x80	; 128
    1706:	b2 2e       	mov	r11, r18
    1708:	2a e0       	ldi	r18, 0x0A	; 10
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	a4 01       	movw	r20, r8
    170e:	0e 94 a2 0c 	call	0x1944	; 0x1944 <__ultoa_invert>
    1712:	a8 2e       	mov	r10, r24
    1714:	a8 18       	sub	r10, r8
    1716:	44 c0       	rjmp	.+136    	; 0x17a0 <vfprintf+0x290>
    1718:	85 37       	cpi	r24, 0x75	; 117
    171a:	29 f4       	brne	.+10     	; 0x1726 <vfprintf+0x216>
    171c:	2f 7e       	andi	r18, 0xEF	; 239
    171e:	b2 2e       	mov	r11, r18
    1720:	2a e0       	ldi	r18, 0x0A	; 10
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	25 c0       	rjmp	.+74     	; 0x1770 <vfprintf+0x260>
    1726:	f2 2f       	mov	r31, r18
    1728:	f9 7f       	andi	r31, 0xF9	; 249
    172a:	bf 2e       	mov	r11, r31
    172c:	8f 36       	cpi	r24, 0x6F	; 111
    172e:	c1 f0       	breq	.+48     	; 0x1760 <vfprintf+0x250>
    1730:	18 f4       	brcc	.+6      	; 0x1738 <vfprintf+0x228>
    1732:	88 35       	cpi	r24, 0x58	; 88
    1734:	79 f0       	breq	.+30     	; 0x1754 <vfprintf+0x244>
    1736:	b4 c0       	rjmp	.+360    	; 0x18a0 <vfprintf+0x390>
    1738:	80 37       	cpi	r24, 0x70	; 112
    173a:	19 f0       	breq	.+6      	; 0x1742 <vfprintf+0x232>
    173c:	88 37       	cpi	r24, 0x78	; 120
    173e:	21 f0       	breq	.+8      	; 0x1748 <vfprintf+0x238>
    1740:	af c0       	rjmp	.+350    	; 0x18a0 <vfprintf+0x390>
    1742:	2f 2f       	mov	r18, r31
    1744:	20 61       	ori	r18, 0x10	; 16
    1746:	b2 2e       	mov	r11, r18
    1748:	b4 fe       	sbrs	r11, 4
    174a:	0d c0       	rjmp	.+26     	; 0x1766 <vfprintf+0x256>
    174c:	8b 2d       	mov	r24, r11
    174e:	84 60       	ori	r24, 0x04	; 4
    1750:	b8 2e       	mov	r11, r24
    1752:	09 c0       	rjmp	.+18     	; 0x1766 <vfprintf+0x256>
    1754:	24 ff       	sbrs	r18, 4
    1756:	0a c0       	rjmp	.+20     	; 0x176c <vfprintf+0x25c>
    1758:	9f 2f       	mov	r25, r31
    175a:	96 60       	ori	r25, 0x06	; 6
    175c:	b9 2e       	mov	r11, r25
    175e:	06 c0       	rjmp	.+12     	; 0x176c <vfprintf+0x25c>
    1760:	28 e0       	ldi	r18, 0x08	; 8
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	05 c0       	rjmp	.+10     	; 0x1770 <vfprintf+0x260>
    1766:	20 e1       	ldi	r18, 0x10	; 16
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	02 c0       	rjmp	.+4      	; 0x1770 <vfprintf+0x260>
    176c:	20 e1       	ldi	r18, 0x10	; 16
    176e:	32 e0       	ldi	r19, 0x02	; 2
    1770:	f8 01       	movw	r30, r16
    1772:	b7 fe       	sbrs	r11, 7
    1774:	07 c0       	rjmp	.+14     	; 0x1784 <vfprintf+0x274>
    1776:	60 81       	ld	r22, Z
    1778:	71 81       	ldd	r23, Z+1	; 0x01
    177a:	82 81       	ldd	r24, Z+2	; 0x02
    177c:	93 81       	ldd	r25, Z+3	; 0x03
    177e:	0c 5f       	subi	r16, 0xFC	; 252
    1780:	1f 4f       	sbci	r17, 0xFF	; 255
    1782:	06 c0       	rjmp	.+12     	; 0x1790 <vfprintf+0x280>
    1784:	60 81       	ld	r22, Z
    1786:	71 81       	ldd	r23, Z+1	; 0x01
    1788:	80 e0       	ldi	r24, 0x00	; 0
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	0e 5f       	subi	r16, 0xFE	; 254
    178e:	1f 4f       	sbci	r17, 0xFF	; 255
    1790:	a4 01       	movw	r20, r8
    1792:	0e 94 a2 0c 	call	0x1944	; 0x1944 <__ultoa_invert>
    1796:	a8 2e       	mov	r10, r24
    1798:	a8 18       	sub	r10, r8
    179a:	fb 2d       	mov	r31, r11
    179c:	ff 77       	andi	r31, 0x7F	; 127
    179e:	bf 2e       	mov	r11, r31
    17a0:	b6 fe       	sbrs	r11, 6
    17a2:	0b c0       	rjmp	.+22     	; 0x17ba <vfprintf+0x2aa>
    17a4:	2b 2d       	mov	r18, r11
    17a6:	2e 7f       	andi	r18, 0xFE	; 254
    17a8:	a5 14       	cp	r10, r5
    17aa:	50 f4       	brcc	.+20     	; 0x17c0 <vfprintf+0x2b0>
    17ac:	b4 fe       	sbrs	r11, 4
    17ae:	0a c0       	rjmp	.+20     	; 0x17c4 <vfprintf+0x2b4>
    17b0:	b2 fc       	sbrc	r11, 2
    17b2:	08 c0       	rjmp	.+16     	; 0x17c4 <vfprintf+0x2b4>
    17b4:	2b 2d       	mov	r18, r11
    17b6:	2e 7e       	andi	r18, 0xEE	; 238
    17b8:	05 c0       	rjmp	.+10     	; 0x17c4 <vfprintf+0x2b4>
    17ba:	7a 2c       	mov	r7, r10
    17bc:	2b 2d       	mov	r18, r11
    17be:	03 c0       	rjmp	.+6      	; 0x17c6 <vfprintf+0x2b6>
    17c0:	7a 2c       	mov	r7, r10
    17c2:	01 c0       	rjmp	.+2      	; 0x17c6 <vfprintf+0x2b6>
    17c4:	75 2c       	mov	r7, r5
    17c6:	24 ff       	sbrs	r18, 4
    17c8:	0d c0       	rjmp	.+26     	; 0x17e4 <vfprintf+0x2d4>
    17ca:	fe 01       	movw	r30, r28
    17cc:	ea 0d       	add	r30, r10
    17ce:	f1 1d       	adc	r31, r1
    17d0:	80 81       	ld	r24, Z
    17d2:	80 33       	cpi	r24, 0x30	; 48
    17d4:	11 f4       	brne	.+4      	; 0x17da <vfprintf+0x2ca>
    17d6:	29 7e       	andi	r18, 0xE9	; 233
    17d8:	09 c0       	rjmp	.+18     	; 0x17ec <vfprintf+0x2dc>
    17da:	22 ff       	sbrs	r18, 2
    17dc:	06 c0       	rjmp	.+12     	; 0x17ea <vfprintf+0x2da>
    17de:	73 94       	inc	r7
    17e0:	73 94       	inc	r7
    17e2:	04 c0       	rjmp	.+8      	; 0x17ec <vfprintf+0x2dc>
    17e4:	82 2f       	mov	r24, r18
    17e6:	86 78       	andi	r24, 0x86	; 134
    17e8:	09 f0       	breq	.+2      	; 0x17ec <vfprintf+0x2dc>
    17ea:	73 94       	inc	r7
    17ec:	23 fd       	sbrc	r18, 3
    17ee:	13 c0       	rjmp	.+38     	; 0x1816 <vfprintf+0x306>
    17f0:	20 ff       	sbrs	r18, 0
    17f2:	06 c0       	rjmp	.+12     	; 0x1800 <vfprintf+0x2f0>
    17f4:	5a 2c       	mov	r5, r10
    17f6:	73 14       	cp	r7, r3
    17f8:	18 f4       	brcc	.+6      	; 0x1800 <vfprintf+0x2f0>
    17fa:	53 0c       	add	r5, r3
    17fc:	57 18       	sub	r5, r7
    17fe:	73 2c       	mov	r7, r3
    1800:	73 14       	cp	r7, r3
    1802:	68 f4       	brcc	.+26     	; 0x181e <vfprintf+0x30e>
    1804:	b7 01       	movw	r22, r14
    1806:	80 e2       	ldi	r24, 0x20	; 32
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	2c 87       	std	Y+12, r18	; 0x0c
    180c:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <fputc>
    1810:	73 94       	inc	r7
    1812:	2c 85       	ldd	r18, Y+12	; 0x0c
    1814:	f5 cf       	rjmp	.-22     	; 0x1800 <vfprintf+0x2f0>
    1816:	73 14       	cp	r7, r3
    1818:	10 f4       	brcc	.+4      	; 0x181e <vfprintf+0x30e>
    181a:	37 18       	sub	r3, r7
    181c:	01 c0       	rjmp	.+2      	; 0x1820 <vfprintf+0x310>
    181e:	31 2c       	mov	r3, r1
    1820:	24 ff       	sbrs	r18, 4
    1822:	12 c0       	rjmp	.+36     	; 0x1848 <vfprintf+0x338>
    1824:	b7 01       	movw	r22, r14
    1826:	80 e3       	ldi	r24, 0x30	; 48
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	2c 87       	std	Y+12, r18	; 0x0c
    182c:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <fputc>
    1830:	2c 85       	ldd	r18, Y+12	; 0x0c
    1832:	22 ff       	sbrs	r18, 2
    1834:	17 c0       	rjmp	.+46     	; 0x1864 <vfprintf+0x354>
    1836:	21 ff       	sbrs	r18, 1
    1838:	03 c0       	rjmp	.+6      	; 0x1840 <vfprintf+0x330>
    183a:	88 e5       	ldi	r24, 0x58	; 88
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	02 c0       	rjmp	.+4      	; 0x1844 <vfprintf+0x334>
    1840:	88 e7       	ldi	r24, 0x78	; 120
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	b7 01       	movw	r22, r14
    1846:	0c c0       	rjmp	.+24     	; 0x1860 <vfprintf+0x350>
    1848:	82 2f       	mov	r24, r18
    184a:	86 78       	andi	r24, 0x86	; 134
    184c:	59 f0       	breq	.+22     	; 0x1864 <vfprintf+0x354>
    184e:	21 fd       	sbrc	r18, 1
    1850:	02 c0       	rjmp	.+4      	; 0x1856 <vfprintf+0x346>
    1852:	80 e2       	ldi	r24, 0x20	; 32
    1854:	01 c0       	rjmp	.+2      	; 0x1858 <vfprintf+0x348>
    1856:	8b e2       	ldi	r24, 0x2B	; 43
    1858:	27 fd       	sbrc	r18, 7
    185a:	8d e2       	ldi	r24, 0x2D	; 45
    185c:	b7 01       	movw	r22, r14
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <fputc>
    1864:	a5 14       	cp	r10, r5
    1866:	38 f4       	brcc	.+14     	; 0x1876 <vfprintf+0x366>
    1868:	b7 01       	movw	r22, r14
    186a:	80 e3       	ldi	r24, 0x30	; 48
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <fputc>
    1872:	5a 94       	dec	r5
    1874:	f7 cf       	rjmp	.-18     	; 0x1864 <vfprintf+0x354>
    1876:	aa 94       	dec	r10
    1878:	f4 01       	movw	r30, r8
    187a:	ea 0d       	add	r30, r10
    187c:	f1 1d       	adc	r31, r1
    187e:	80 81       	ld	r24, Z
    1880:	b7 01       	movw	r22, r14
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <fputc>
    1888:	a1 10       	cpse	r10, r1
    188a:	f5 cf       	rjmp	.-22     	; 0x1876 <vfprintf+0x366>
    188c:	33 20       	and	r3, r3
    188e:	09 f4       	brne	.+2      	; 0x1892 <vfprintf+0x382>
    1890:	51 ce       	rjmp	.-862    	; 0x1534 <vfprintf+0x24>
    1892:	b7 01       	movw	r22, r14
    1894:	80 e2       	ldi	r24, 0x20	; 32
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <fputc>
    189c:	3a 94       	dec	r3
    189e:	f6 cf       	rjmp	.-20     	; 0x188c <vfprintf+0x37c>
    18a0:	f7 01       	movw	r30, r14
    18a2:	86 81       	ldd	r24, Z+6	; 0x06
    18a4:	97 81       	ldd	r25, Z+7	; 0x07
    18a6:	02 c0       	rjmp	.+4      	; 0x18ac <vfprintf+0x39c>
    18a8:	8f ef       	ldi	r24, 0xFF	; 255
    18aa:	9f ef       	ldi	r25, 0xFF	; 255
    18ac:	2c 96       	adiw	r28, 0x0c	; 12
    18ae:	e2 e1       	ldi	r30, 0x12	; 18
    18b0:	0c 94 1c 0d 	jmp	0x1a38	; 0x1a38 <__epilogue_restores__>

000018b4 <strnlen_P>:
    18b4:	fc 01       	movw	r30, r24
    18b6:	05 90       	lpm	r0, Z+
    18b8:	61 50       	subi	r22, 0x01	; 1
    18ba:	70 40       	sbci	r23, 0x00	; 0
    18bc:	01 10       	cpse	r0, r1
    18be:	d8 f7       	brcc	.-10     	; 0x18b6 <strnlen_P+0x2>
    18c0:	80 95       	com	r24
    18c2:	90 95       	com	r25
    18c4:	8e 0f       	add	r24, r30
    18c6:	9f 1f       	adc	r25, r31
    18c8:	08 95       	ret

000018ca <strnlen>:
    18ca:	fc 01       	movw	r30, r24
    18cc:	61 50       	subi	r22, 0x01	; 1
    18ce:	70 40       	sbci	r23, 0x00	; 0
    18d0:	01 90       	ld	r0, Z+
    18d2:	01 10       	cpse	r0, r1
    18d4:	d8 f7       	brcc	.-10     	; 0x18cc <strnlen+0x2>
    18d6:	80 95       	com	r24
    18d8:	90 95       	com	r25
    18da:	8e 0f       	add	r24, r30
    18dc:	9f 1f       	adc	r25, r31
    18de:	08 95       	ret

000018e0 <fputc>:
    18e0:	0f 93       	push	r16
    18e2:	1f 93       	push	r17
    18e4:	cf 93       	push	r28
    18e6:	df 93       	push	r29
    18e8:	18 2f       	mov	r17, r24
    18ea:	09 2f       	mov	r16, r25
    18ec:	eb 01       	movw	r28, r22
    18ee:	8b 81       	ldd	r24, Y+3	; 0x03
    18f0:	81 fd       	sbrc	r24, 1
    18f2:	03 c0       	rjmp	.+6      	; 0x18fa <fputc+0x1a>
    18f4:	8f ef       	ldi	r24, 0xFF	; 255
    18f6:	9f ef       	ldi	r25, 0xFF	; 255
    18f8:	20 c0       	rjmp	.+64     	; 0x193a <fputc+0x5a>
    18fa:	82 ff       	sbrs	r24, 2
    18fc:	10 c0       	rjmp	.+32     	; 0x191e <fputc+0x3e>
    18fe:	4e 81       	ldd	r20, Y+6	; 0x06
    1900:	5f 81       	ldd	r21, Y+7	; 0x07
    1902:	2c 81       	ldd	r18, Y+4	; 0x04
    1904:	3d 81       	ldd	r19, Y+5	; 0x05
    1906:	42 17       	cp	r20, r18
    1908:	53 07       	cpc	r21, r19
    190a:	7c f4       	brge	.+30     	; 0x192a <fputc+0x4a>
    190c:	e8 81       	ld	r30, Y
    190e:	f9 81       	ldd	r31, Y+1	; 0x01
    1910:	9f 01       	movw	r18, r30
    1912:	2f 5f       	subi	r18, 0xFF	; 255
    1914:	3f 4f       	sbci	r19, 0xFF	; 255
    1916:	39 83       	std	Y+1, r19	; 0x01
    1918:	28 83       	st	Y, r18
    191a:	10 83       	st	Z, r17
    191c:	06 c0       	rjmp	.+12     	; 0x192a <fputc+0x4a>
    191e:	e8 85       	ldd	r30, Y+8	; 0x08
    1920:	f9 85       	ldd	r31, Y+9	; 0x09
    1922:	81 2f       	mov	r24, r17
    1924:	09 95       	icall
    1926:	89 2b       	or	r24, r25
    1928:	29 f7       	brne	.-54     	; 0x18f4 <fputc+0x14>
    192a:	2e 81       	ldd	r18, Y+6	; 0x06
    192c:	3f 81       	ldd	r19, Y+7	; 0x07
    192e:	2f 5f       	subi	r18, 0xFF	; 255
    1930:	3f 4f       	sbci	r19, 0xFF	; 255
    1932:	3f 83       	std	Y+7, r19	; 0x07
    1934:	2e 83       	std	Y+6, r18	; 0x06
    1936:	81 2f       	mov	r24, r17
    1938:	90 2f       	mov	r25, r16
    193a:	df 91       	pop	r29
    193c:	cf 91       	pop	r28
    193e:	1f 91       	pop	r17
    1940:	0f 91       	pop	r16
    1942:	08 95       	ret

00001944 <__ultoa_invert>:
    1944:	fa 01       	movw	r30, r20
    1946:	aa 27       	eor	r26, r26
    1948:	28 30       	cpi	r18, 0x08	; 8
    194a:	51 f1       	breq	.+84     	; 0x19a0 <__ultoa_invert+0x5c>
    194c:	20 31       	cpi	r18, 0x10	; 16
    194e:	81 f1       	breq	.+96     	; 0x19b0 <__ultoa_invert+0x6c>
    1950:	e8 94       	clt
    1952:	6f 93       	push	r22
    1954:	6e 7f       	andi	r22, 0xFE	; 254
    1956:	6e 5f       	subi	r22, 0xFE	; 254
    1958:	7f 4f       	sbci	r23, 0xFF	; 255
    195a:	8f 4f       	sbci	r24, 0xFF	; 255
    195c:	9f 4f       	sbci	r25, 0xFF	; 255
    195e:	af 4f       	sbci	r26, 0xFF	; 255
    1960:	b1 e0       	ldi	r27, 0x01	; 1
    1962:	3e d0       	rcall	.+124    	; 0x19e0 <__ultoa_invert+0x9c>
    1964:	b4 e0       	ldi	r27, 0x04	; 4
    1966:	3c d0       	rcall	.+120    	; 0x19e0 <__ultoa_invert+0x9c>
    1968:	67 0f       	add	r22, r23
    196a:	78 1f       	adc	r23, r24
    196c:	89 1f       	adc	r24, r25
    196e:	9a 1f       	adc	r25, r26
    1970:	a1 1d       	adc	r26, r1
    1972:	68 0f       	add	r22, r24
    1974:	79 1f       	adc	r23, r25
    1976:	8a 1f       	adc	r24, r26
    1978:	91 1d       	adc	r25, r1
    197a:	a1 1d       	adc	r26, r1
    197c:	6a 0f       	add	r22, r26
    197e:	71 1d       	adc	r23, r1
    1980:	81 1d       	adc	r24, r1
    1982:	91 1d       	adc	r25, r1
    1984:	a1 1d       	adc	r26, r1
    1986:	20 d0       	rcall	.+64     	; 0x19c8 <__ultoa_invert+0x84>
    1988:	09 f4       	brne	.+2      	; 0x198c <__ultoa_invert+0x48>
    198a:	68 94       	set
    198c:	3f 91       	pop	r19
    198e:	2a e0       	ldi	r18, 0x0A	; 10
    1990:	26 9f       	mul	r18, r22
    1992:	11 24       	eor	r1, r1
    1994:	30 19       	sub	r19, r0
    1996:	30 5d       	subi	r19, 0xD0	; 208
    1998:	31 93       	st	Z+, r19
    199a:	de f6       	brtc	.-74     	; 0x1952 <__ultoa_invert+0xe>
    199c:	cf 01       	movw	r24, r30
    199e:	08 95       	ret
    19a0:	46 2f       	mov	r20, r22
    19a2:	47 70       	andi	r20, 0x07	; 7
    19a4:	40 5d       	subi	r20, 0xD0	; 208
    19a6:	41 93       	st	Z+, r20
    19a8:	b3 e0       	ldi	r27, 0x03	; 3
    19aa:	0f d0       	rcall	.+30     	; 0x19ca <__ultoa_invert+0x86>
    19ac:	c9 f7       	brne	.-14     	; 0x19a0 <__ultoa_invert+0x5c>
    19ae:	f6 cf       	rjmp	.-20     	; 0x199c <__ultoa_invert+0x58>
    19b0:	46 2f       	mov	r20, r22
    19b2:	4f 70       	andi	r20, 0x0F	; 15
    19b4:	40 5d       	subi	r20, 0xD0	; 208
    19b6:	4a 33       	cpi	r20, 0x3A	; 58
    19b8:	18 f0       	brcs	.+6      	; 0x19c0 <__ultoa_invert+0x7c>
    19ba:	49 5d       	subi	r20, 0xD9	; 217
    19bc:	31 fd       	sbrc	r19, 1
    19be:	40 52       	subi	r20, 0x20	; 32
    19c0:	41 93       	st	Z+, r20
    19c2:	02 d0       	rcall	.+4      	; 0x19c8 <__ultoa_invert+0x84>
    19c4:	a9 f7       	brne	.-22     	; 0x19b0 <__ultoa_invert+0x6c>
    19c6:	ea cf       	rjmp	.-44     	; 0x199c <__ultoa_invert+0x58>
    19c8:	b4 e0       	ldi	r27, 0x04	; 4
    19ca:	a6 95       	lsr	r26
    19cc:	97 95       	ror	r25
    19ce:	87 95       	ror	r24
    19d0:	77 95       	ror	r23
    19d2:	67 95       	ror	r22
    19d4:	ba 95       	dec	r27
    19d6:	c9 f7       	brne	.-14     	; 0x19ca <__ultoa_invert+0x86>
    19d8:	00 97       	sbiw	r24, 0x00	; 0
    19da:	61 05       	cpc	r22, r1
    19dc:	71 05       	cpc	r23, r1
    19de:	08 95       	ret
    19e0:	9b 01       	movw	r18, r22
    19e2:	ac 01       	movw	r20, r24
    19e4:	0a 2e       	mov	r0, r26
    19e6:	06 94       	lsr	r0
    19e8:	57 95       	ror	r21
    19ea:	47 95       	ror	r20
    19ec:	37 95       	ror	r19
    19ee:	27 95       	ror	r18
    19f0:	ba 95       	dec	r27
    19f2:	c9 f7       	brne	.-14     	; 0x19e6 <__ultoa_invert+0xa2>
    19f4:	62 0f       	add	r22, r18
    19f6:	73 1f       	adc	r23, r19
    19f8:	84 1f       	adc	r24, r20
    19fa:	95 1f       	adc	r25, r21
    19fc:	a0 1d       	adc	r26, r0
    19fe:	08 95       	ret

00001a00 <__prologue_saves__>:
    1a00:	2f 92       	push	r2
    1a02:	3f 92       	push	r3
    1a04:	4f 92       	push	r4
    1a06:	5f 92       	push	r5
    1a08:	6f 92       	push	r6
    1a0a:	7f 92       	push	r7
    1a0c:	8f 92       	push	r8
    1a0e:	9f 92       	push	r9
    1a10:	af 92       	push	r10
    1a12:	bf 92       	push	r11
    1a14:	cf 92       	push	r12
    1a16:	df 92       	push	r13
    1a18:	ef 92       	push	r14
    1a1a:	ff 92       	push	r15
    1a1c:	0f 93       	push	r16
    1a1e:	1f 93       	push	r17
    1a20:	cf 93       	push	r28
    1a22:	df 93       	push	r29
    1a24:	cd b7       	in	r28, 0x3d	; 61
    1a26:	de b7       	in	r29, 0x3e	; 62
    1a28:	ca 1b       	sub	r28, r26
    1a2a:	db 0b       	sbc	r29, r27
    1a2c:	0f b6       	in	r0, 0x3f	; 63
    1a2e:	f8 94       	cli
    1a30:	de bf       	out	0x3e, r29	; 62
    1a32:	0f be       	out	0x3f, r0	; 63
    1a34:	cd bf       	out	0x3d, r28	; 61
    1a36:	09 94       	ijmp

00001a38 <__epilogue_restores__>:
    1a38:	2a 88       	ldd	r2, Y+18	; 0x12
    1a3a:	39 88       	ldd	r3, Y+17	; 0x11
    1a3c:	48 88       	ldd	r4, Y+16	; 0x10
    1a3e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1a40:	6e 84       	ldd	r6, Y+14	; 0x0e
    1a42:	7d 84       	ldd	r7, Y+13	; 0x0d
    1a44:	8c 84       	ldd	r8, Y+12	; 0x0c
    1a46:	9b 84       	ldd	r9, Y+11	; 0x0b
    1a48:	aa 84       	ldd	r10, Y+10	; 0x0a
    1a4a:	b9 84       	ldd	r11, Y+9	; 0x09
    1a4c:	c8 84       	ldd	r12, Y+8	; 0x08
    1a4e:	df 80       	ldd	r13, Y+7	; 0x07
    1a50:	ee 80       	ldd	r14, Y+6	; 0x06
    1a52:	fd 80       	ldd	r15, Y+5	; 0x05
    1a54:	0c 81       	ldd	r16, Y+4	; 0x04
    1a56:	1b 81       	ldd	r17, Y+3	; 0x03
    1a58:	aa 81       	ldd	r26, Y+2	; 0x02
    1a5a:	b9 81       	ldd	r27, Y+1	; 0x01
    1a5c:	ce 0f       	add	r28, r30
    1a5e:	d1 1d       	adc	r29, r1
    1a60:	0f b6       	in	r0, 0x3f	; 63
    1a62:	f8 94       	cli
    1a64:	de bf       	out	0x3e, r29	; 62
    1a66:	0f be       	out	0x3f, r0	; 63
    1a68:	cd bf       	out	0x3d, r28	; 61
    1a6a:	ed 01       	movw	r28, r26
    1a6c:	08 95       	ret

00001a6e <_exit>:
    1a6e:	f8 94       	cli

00001a70 <__stop_program>:
    1a70:	ff cf       	rjmp	.-2      	; 0x1a70 <__stop_program>
